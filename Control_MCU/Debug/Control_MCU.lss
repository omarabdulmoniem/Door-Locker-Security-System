
Control_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  000021ae  00002242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080008c  0080008c  0000226e  2**0
                  ALLOC
  3 .stab         00002268  00000000  00000000  00002270  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012aa  00000000  00000000  000044d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005782  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000058c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005a32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000767b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008566  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009314  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009474  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009701  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009ecf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 d4 0d 	jmp	0x1ba8	; 0x1ba8 <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 39       	cpi	r26, 0x91	; 145
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cf 05 	call	0xb9e	; 0xb9e <main>
      8a:	0c 94 d5 10 	jmp	0x21aa	; 0x21aa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9e 10 	jmp	0x213c	; 0x213c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c6 10 	jmp	0x218c	; 0x218c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c6 10 	jmp	0x218c	; 0x218c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9e 10 	jmp	0x213c	; 0x213c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c6 10 	jmp	0x218c	; 0x218c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c6 10 	jmp	0x218c	; 0x218c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c6 10 	jmp	0x218c	; 0x218c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <buzzer_init>:
#include "common_macros.h"
#include "gpio.h"
#include "uart.h"
#include "messages.h"

void buzzer_init(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(buzzer_PORT,buzzer_pin,PIN_OUTPUT);
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	62 e0       	ldi	r22, 0x02	; 2
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 96 0a 	call	0x152c	; 0x152c <GPIO_setupPinDirection>
	GPIO_writePin(buzzer_PORT,buzzer_pin,LOGIC_LOW);
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	62 e0       	ldi	r22, 0x02	; 2
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 81 0b 	call	0x1702	; 0x1702 <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <buzzerON>:

void buzzerON(void){
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(buzzer_PORT,buzzer_pin,LOGIC_HIGH);
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	62 e0       	ldi	r22, 0x02	; 2
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 81 0b 	call	0x1702	; 0x1702 <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <buzzerOff>:


void buzzerOff(void) {
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(buzzer_PORT,buzzer_pin,LOGIC_LOW);
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	62 e0       	ldi	r22, 0x02	; 2
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 81 0b 	call	0x1702	; 0x1702 <GPIO_writePin>
	UART_sendByte(returnMainOptions);
     b92:	8d e4       	ldi	r24, 0x4D	; 77
     b94:	0e 94 3c 10 	call	0x2078	; 0x2078 <UART_sendByte>
}
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <main>:
 * [Description] : A function to stop the motor (door) */
void stopMotor(void) ;


int main(void)
{
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	e5 97       	sbiw	r28, 0x35	; 53
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
     bac:	de bf       	out	0x3e, r29	; 62
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	cd bf       	out	0x3d, r28	; 61
	/* 3 variables used to represent arrays indexes while accessing them*/
	uint8 countArray = 0;
     bb2:	1b 82       	std	Y+3, r1	; 0x03
	uint8 countArray2 =0 ;
     bb4:	1a 82       	std	Y+2, r1	; 0x02
	uint8 countArray3 =0 ;
     bb6:	19 82       	std	Y+1, r1	; 0x01
	/* 3 arrays used to store data (password) received from MC1*/
	uint8 arr_storedData1 [12]  ;
	uint8 arr_storedData2 [12] ;
	uint8 arr_storedData3 [12] ;
	/* Enable interrupts by setting I-bit */
	SREG  |= (1<<7);
     bb8:	af e5       	ldi	r26, 0x5F	; 95
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	ef e5       	ldi	r30, 0x5F	; 95
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	80 68       	ori	r24, 0x80	; 128
     bc4:	8c 93       	st	X, r24
	/* initialize UART */
	UART_ConfigType UART_Config ={EIGHT,ONE,DISABLE_PARITY,9600};
     bc6:	9e 01       	movw	r18, r28
     bc8:	28 5d       	subi	r18, 0xD8	; 216
     bca:	3f 4f       	sbci	r19, 0xFF	; 255
     bcc:	3a ab       	std	Y+50, r19	; 0x32
     bce:	29 ab       	std	Y+49, r18	; 0x31
     bd0:	88 e6       	ldi	r24, 0x68	; 104
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	9c ab       	std	Y+52, r25	; 0x34
     bd6:	8b ab       	std	Y+51, r24	; 0x33
     bd8:	97 e0       	ldi	r25, 0x07	; 7
     bda:	9d ab       	std	Y+53, r25	; 0x35
     bdc:	eb a9       	ldd	r30, Y+51	; 0x33
     bde:	fc a9       	ldd	r31, Y+52	; 0x34
     be0:	00 80       	ld	r0, Z
     be2:	2b a9       	ldd	r18, Y+51	; 0x33
     be4:	3c a9       	ldd	r19, Y+52	; 0x34
     be6:	2f 5f       	subi	r18, 0xFF	; 255
     be8:	3f 4f       	sbci	r19, 0xFF	; 255
     bea:	3c ab       	std	Y+52, r19	; 0x34
     bec:	2b ab       	std	Y+51, r18	; 0x33
     bee:	e9 a9       	ldd	r30, Y+49	; 0x31
     bf0:	fa a9       	ldd	r31, Y+50	; 0x32
     bf2:	00 82       	st	Z, r0
     bf4:	29 a9       	ldd	r18, Y+49	; 0x31
     bf6:	3a a9       	ldd	r19, Y+50	; 0x32
     bf8:	2f 5f       	subi	r18, 0xFF	; 255
     bfa:	3f 4f       	sbci	r19, 0xFF	; 255
     bfc:	3a ab       	std	Y+50, r19	; 0x32
     bfe:	29 ab       	std	Y+49, r18	; 0x31
     c00:	3d a9       	ldd	r19, Y+53	; 0x35
     c02:	31 50       	subi	r19, 0x01	; 1
     c04:	3d ab       	std	Y+53, r19	; 0x35
     c06:	8d a9       	ldd	r24, Y+53	; 0x35
     c08:	88 23       	and	r24, r24
     c0a:	41 f7       	brne	.-48     	; 0xbdc <main+0x3e>
	UART_init(&UART_Config);
     c0c:	ce 01       	movw	r24, r28
     c0e:	88 96       	adiw	r24, 0x28	; 40
     c10:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <UART_init>
	/* initialize buzzer */
	buzzer_init();
     c14:	0e 94 a3 05 	call	0xb46	; 0xb46 <buzzer_init>
	/* Configure first two pins in PORTB as output pins (Motor Pins) */
	DDRB  |= (1<<PB0) | (1<<PB1);
     c18:	a7 e3       	ldi	r26, 0x37	; 55
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e7 e3       	ldi	r30, 0x37	; 55
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	83 60       	ori	r24, 0x03	; 3
     c24:	8c 93       	st	X, r24
	/* motor is stopped at the beginning */
	PORTB &= ~(1<<PB0);
     c26:	a8 e3       	ldi	r26, 0x38	; 56
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e8 e3       	ldi	r30, 0x38	; 56
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	8e 7f       	andi	r24, 0xFE	; 254
     c32:	8c 93       	st	X, r24
	PORTB &= ~(1<<PB1);
     c34:	a8 e3       	ldi	r26, 0x38	; 56
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e8 e3       	ldi	r30, 0x38	; 56
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	8d 7f       	andi	r24, 0xFD	; 253
     c40:	8c 93       	st	X, r24
	/* Initialize EEPROM */
	EEPROM_init();
     c42:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <EEPROM_init>
	while(1)
	{
		/* every loop the program clear content of this elements to
		 *  be used as indexes again */
		countArray = 0;
     c46:	1b 82       	std	Y+3, r1	; 0x03
		countArray2 =0 ;
     c48:	1a 82       	std	Y+2, r1	; 0x02
		countArray3 =0 ;
     c4a:	19 82       	std	Y+1, r1	; 0x01
		/* The program begins by switching the received data
		 * in the UDR to take action according to it */
		switch(g_recievedValue) {
     c4c:	80 91 8d 00 	lds	r24, 0x008D
     c50:	e8 2f       	mov	r30, r24
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	f8 ab       	std	Y+48, r31	; 0x30
     c56:	ef a7       	std	Y+47, r30	; 0x2f
     c58:	2f a5       	ldd	r18, Y+47	; 0x2f
     c5a:	38 a9       	ldd	r19, Y+48	; 0x30
     c5c:	20 34       	cpi	r18, 0x40	; 64
     c5e:	31 05       	cpc	r19, r1
     c60:	09 f4       	brne	.+2      	; 0xc64 <main+0xc6>
     c62:	b1 c0       	rjmp	.+354    	; 0xdc6 <main+0x228>
     c64:	8f a5       	ldd	r24, Y+47	; 0x2f
     c66:	98 a9       	ldd	r25, Y+48	; 0x30
     c68:	81 34       	cpi	r24, 0x41	; 65
     c6a:	91 05       	cpc	r25, r1
     c6c:	3c f4       	brge	.+14     	; 0xc7c <main+0xde>
     c6e:	ef a5       	ldd	r30, Y+47	; 0x2f
     c70:	f8 a9       	ldd	r31, Y+48	; 0x30
     c72:	e1 32       	cpi	r30, 0x21	; 33
     c74:	f1 05       	cpc	r31, r1
     c76:	09 f4       	brne	.+2      	; 0xc7a <main+0xdc>
     c78:	76 c0       	rjmp	.+236    	; 0xd66 <main+0x1c8>
     c7a:	e5 cf       	rjmp	.-54     	; 0xc46 <main+0xa8>
     c7c:	2f a5       	ldd	r18, Y+47	; 0x2f
     c7e:	38 a9       	ldd	r19, Y+48	; 0x30
     c80:	2e 35       	cpi	r18, 0x5E	; 94
     c82:	31 05       	cpc	r19, r1
     c84:	31 f0       	breq	.+12     	; 0xc92 <main+0xf4>
     c86:	8f a5       	ldd	r24, Y+47	; 0x2f
     c88:	98 a9       	ldd	r25, Y+48	; 0x30
     c8a:	8e 37       	cpi	r24, 0x7E	; 126
     c8c:	91 05       	cpc	r25, r1
     c8e:	69 f1       	breq	.+90     	; 0xcea <main+0x14c>
     c90:	da cf       	rjmp	.-76     	; 0xc46 <main+0xa8>
			 * one time only
			 * 2- the flag because if you want to store the received
			 * value in this case ,clearing the flag will make
			 * sure you want store the initialize communication
			 * message */
			g_recievedValue=0;
     c92:	10 92 8d 00 	sts	0x008D, r1
			g_recievedFlag=0 ;
     c96:	10 92 8e 00 	sts	0x008E, r1
     c9a:	18 c0       	rjmp	.+48     	; 0xccc <main+0x12e>
			while(g_recievedValue != finishedEntery ) {
				/* &&(g_recievedValue != finishedEntery : This statement
				 * is important to avoid storing (finishedEntery) if the
				 * g_recievedValue changed after checking the while
				 * condition  */
				if((g_recievedFlag ==1) &&(g_recievedValue != finishedEntery )) {
     c9c:	80 91 8e 00 	lds	r24, 0x008E
     ca0:	81 30       	cpi	r24, 0x01	; 1
     ca2:	a1 f4       	brne	.+40     	; 0xccc <main+0x12e>
     ca4:	80 91 8d 00 	lds	r24, 0x008D
     ca8:	86 32       	cpi	r24, 0x26	; 38
     caa:	81 f0       	breq	.+32     	; 0xccc <main+0x12e>
					arr_storedData1[countArray] =g_recievedValue ;
     cac:	8b 81       	ldd	r24, Y+3	; 0x03
     cae:	28 2f       	mov	r18, r24
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	40 91 8d 00 	lds	r20, 0x008D
     cb6:	ce 01       	movw	r24, r28
     cb8:	04 96       	adiw	r24, 0x04	; 4
     cba:	fc 01       	movw	r30, r24
     cbc:	e2 0f       	add	r30, r18
     cbe:	f3 1f       	adc	r31, r19
     cc0:	40 83       	st	Z, r20
					countArray++ ;
     cc2:	8b 81       	ldd	r24, Y+3	; 0x03
     cc4:	8f 5f       	subi	r24, 0xFF	; 255
     cc6:	8b 83       	std	Y+3, r24	; 0x03
					g_recievedFlag=0 ;
     cc8:	10 92 8e 00 	sts	0x008E, r1
			 * value in this case ,clearing the flag will make
			 * sure you want store the initialize communication
			 * message */
			g_recievedValue=0;
			g_recievedFlag=0 ;
			while(g_recievedValue != finishedEntery ) {
     ccc:	80 91 8d 00 	lds	r24, 0x008D
     cd0:	86 32       	cpi	r24, 0x26	; 38
     cd2:	21 f7       	brne	.-56     	; 0xc9c <main+0xfe>
					arr_storedData1[countArray] =g_recievedValue ;
					countArray++ ;
					g_recievedFlag=0 ;
				}
			}
			arr_storedData1[countArray]=endOfPass ;
     cd4:	8b 81       	ldd	r24, Y+3	; 0x03
     cd6:	28 2f       	mov	r18, r24
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	ce 01       	movw	r24, r28
     cdc:	04 96       	adiw	r24, 0x04	; 4
     cde:	fc 01       	movw	r30, r24
     ce0:	e2 0f       	add	r30, r18
     ce2:	f3 1f       	adc	r31, r19
     ce4:	88 e5       	ldi	r24, 0x58	; 88
     ce6:	80 83       	st	Z, r24
     ce8:	ae cf       	rjmp	.-164    	; 0xc46 <main+0xa8>
			 * one time only
			 * 2- the flag because if you want to store the received
			 * value in this case ,clearing the flag will make
			 * sure you want store the initialize communication
			 * message */
			g_recievedValue=0;
     cea:	10 92 8d 00 	sts	0x008D, r1
			g_recievedFlag=0 ;
     cee:	10 92 8e 00 	sts	0x008E, r1
     cf2:	18 c0       	rjmp	.+48     	; 0xd24 <main+0x186>
			while(g_recievedValue != finishedEntery ) {
				/* &&(g_recievedValue != finishedEntery : This statement
				 * is important to avoid storing (finishedEntery) if the
				 * g_recievedValue changed after checking the while
				 * condition  */
				if((g_recievedFlag ==1) &&(g_recievedValue != finishedEntery )) {
     cf4:	80 91 8e 00 	lds	r24, 0x008E
     cf8:	81 30       	cpi	r24, 0x01	; 1
     cfa:	a1 f4       	brne	.+40     	; 0xd24 <main+0x186>
     cfc:	80 91 8d 00 	lds	r24, 0x008D
     d00:	86 32       	cpi	r24, 0x26	; 38
     d02:	81 f0       	breq	.+32     	; 0xd24 <main+0x186>
					arr_storedData2[countArray2] =g_recievedValue ;
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	28 2f       	mov	r18, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	40 91 8d 00 	lds	r20, 0x008D
     d0e:	ce 01       	movw	r24, r28
     d10:	40 96       	adiw	r24, 0x10	; 16
     d12:	fc 01       	movw	r30, r24
     d14:	e2 0f       	add	r30, r18
     d16:	f3 1f       	adc	r31, r19
     d18:	40 83       	st	Z, r20
					countArray2++ ;
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	8f 5f       	subi	r24, 0xFF	; 255
     d1e:	8a 83       	std	Y+2, r24	; 0x02
					g_recievedFlag=0 ;
     d20:	10 92 8e 00 	sts	0x008E, r1
			 * value in this case ,clearing the flag will make
			 * sure you want store the initialize communication
			 * message */
			g_recievedValue=0;
			g_recievedFlag=0 ;
			while(g_recievedValue != finishedEntery ) {
     d24:	80 91 8d 00 	lds	r24, 0x008D
     d28:	86 32       	cpi	r24, 0x26	; 38
     d2a:	21 f7       	brne	.-56     	; 0xcf4 <main+0x156>
					arr_storedData2[countArray2] =g_recievedValue ;
					countArray2++ ;
					g_recievedFlag=0 ;
				}
			}
			arr_storedData2[countArray2]=endOfPass ;
     d2c:	8a 81       	ldd	r24, Y+2	; 0x02
     d2e:	28 2f       	mov	r18, r24
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	ce 01       	movw	r24, r28
     d34:	40 96       	adiw	r24, 0x10	; 16
     d36:	fc 01       	movw	r30, r24
     d38:	e2 0f       	add	r30, r18
     d3a:	f3 1f       	adc	r31, r19
     d3c:	88 e5       	ldi	r24, 0x58	; 88
     d3e:	80 83       	st	Z, r24
			if((compareTwoPasswords(arr_storedData1,arr_storedData2)) ==0) {
     d40:	ce 01       	movw	r24, r28
     d42:	04 96       	adiw	r24, 0x04	; 4
     d44:	9e 01       	movw	r18, r28
     d46:	20 5f       	subi	r18, 0xF0	; 240
     d48:	3f 4f       	sbci	r19, 0xFF	; 255
     d4a:	b9 01       	movw	r22, r18
     d4c:	0e 94 98 09 	call	0x1330	; 0x1330 <compareTwoPasswords>
     d50:	88 23       	and	r24, r24
     d52:	29 f4       	brne	.+10     	; 0xd5e <main+0x1c0>
				storeNewPassword(arr_storedData1) ;
     d54:	ce 01       	movw	r24, r28
     d56:	04 96       	adiw	r24, 0x04	; 4
     d58:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <storeNewPassword>
     d5c:	74 cf       	rjmp	.-280    	; 0xc46 <main+0xa8>
			}
			else {
				UART_sendByte(passwordsUnmatched) ;
     d5e:	85 e5       	ldi	r24, 0x55	; 85
     d60:	0e 94 3c 10 	call	0x2078	; 0x2078 <UART_sendByte>
     d64:	70 cf       	rjmp	.-288    	; 0xc46 <main+0xa8>
			}
			break ;
		case uncheckedPassword :
			g_recievedFlag=0 ;
     d66:	10 92 8e 00 	sts	0x008E, r1
			g_recievedValue=0;
     d6a:	10 92 8d 00 	sts	0x008D, r1
     d6e:	18 c0       	rjmp	.+48     	; 0xda0 <main+0x202>
			while(g_recievedValue != finishedEntery ) {
				if((g_recievedFlag ==1) &&(g_recievedValue != finishedEntery )) {
     d70:	80 91 8e 00 	lds	r24, 0x008E
     d74:	81 30       	cpi	r24, 0x01	; 1
     d76:	a1 f4       	brne	.+40     	; 0xda0 <main+0x202>
     d78:	80 91 8d 00 	lds	r24, 0x008D
     d7c:	86 32       	cpi	r24, 0x26	; 38
     d7e:	81 f0       	breq	.+32     	; 0xda0 <main+0x202>
					arr_storedData3[countArray3] =g_recievedValue ;
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	28 2f       	mov	r18, r24
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	40 91 8d 00 	lds	r20, 0x008D
     d8a:	ce 01       	movw	r24, r28
     d8c:	4c 96       	adiw	r24, 0x1c	; 28
     d8e:	fc 01       	movw	r30, r24
     d90:	e2 0f       	add	r30, r18
     d92:	f3 1f       	adc	r31, r19
     d94:	40 83       	st	Z, r20
					countArray3++ ;
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	8f 5f       	subi	r24, 0xFF	; 255
     d9a:	89 83       	std	Y+1, r24	; 0x01
					g_recievedFlag=0 ;
     d9c:	10 92 8e 00 	sts	0x008E, r1
			}
			break ;
		case uncheckedPassword :
			g_recievedFlag=0 ;
			g_recievedValue=0;
			while(g_recievedValue != finishedEntery ) {
     da0:	80 91 8d 00 	lds	r24, 0x008D
     da4:	86 32       	cpi	r24, 0x26	; 38
     da6:	21 f7       	brne	.-56     	; 0xd70 <main+0x1d2>
					arr_storedData3[countArray3] =g_recievedValue ;
					countArray3++ ;
					g_recievedFlag=0 ;
				}
			}
			arr_storedData3[countArray3]=endOfPass ;
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	ce 01       	movw	r24, r28
     db0:	4c 96       	adiw	r24, 0x1c	; 28
     db2:	fc 01       	movw	r30, r24
     db4:	e2 0f       	add	r30, r18
     db6:	f3 1f       	adc	r31, r19
     db8:	88 e5       	ldi	r24, 0x58	; 88
     dba:	80 83       	st	Z, r24
			checkPassword(arr_storedData3) ;
     dbc:	ce 01       	movw	r24, r28
     dbe:	4c 96       	adiw	r24, 0x1c	; 28
     dc0:	0e 94 9f 07 	call	0xf3e	; 0xf3e <checkPassword>
     dc4:	40 cf       	rjmp	.-384    	; 0xc46 <main+0xa8>
			break ;
		case openDoor :
			g_recievedValue=0;
     dc6:	10 92 8d 00 	sts	0x008D, r1
			rotateMotorCW() ;
     dca:	0e 94 9d 08 	call	0x113a	; 0x113a <rotateMotorCW>
     dce:	3b cf       	rjmp	.-394    	; 0xc46 <main+0xa8>

00000dd0 <storeNewPassword>:
			break;
		}

	}
}
void storeNewPassword (uint8* a_storedPassword_Ptr) {
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
     dd8:	63 97       	sbiw	r28, 0x13	; 19
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	de bf       	out	0x3e, r29	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	cd bf       	out	0x3d, r28	; 61
     de4:	9b 8b       	std	Y+19, r25	; 0x13
     de6:	8a 8b       	std	Y+18, r24	; 0x12
	uint8 index=0 ;
     de8:	19 8a       	std	Y+17, r1	; 0x11
	/* address of the eeprom */
	uint16 add=0x0302;
     dea:	82 e0       	ldi	r24, 0x02	; 2
     dec:	93 e0       	ldi	r25, 0x03	; 3
     dee:	98 8b       	std	Y+16, r25	; 0x10
     df0:	8f 87       	std	Y+15, r24	; 0x0f
     df2:	88 c0       	rjmp	.+272    	; 0xf04 <storeNewPassword+0x134>
	while(a_storedPassword_Ptr[index] != endOfPass) {
		/* Write in the external EEPROM */
		EEPROM_writeByte(add, a_storedPassword_Ptr[index]);
     df4:	89 89       	ldd	r24, Y+17	; 0x11
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	8a 89       	ldd	r24, Y+18	; 0x12
     dfc:	9b 89       	ldd	r25, Y+19	; 0x13
     dfe:	fc 01       	movw	r30, r24
     e00:	e2 0f       	add	r30, r18
     e02:	f3 1f       	adc	r31, r19
     e04:	20 81       	ld	r18, Z
     e06:	8f 85       	ldd	r24, Y+15	; 0x0f
     e08:	98 89       	ldd	r25, Y+16	; 0x10
     e0a:	62 2f       	mov	r22, r18
     e0c:	0e 94 f5 09 	call	0x13ea	; 0x13ea <EEPROM_writeByte>
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	a0 e2       	ldi	r26, 0x20	; 32
     e16:	b1 e4       	ldi	r27, 0x41	; 65
     e18:	8b 87       	std	Y+11, r24	; 0x0b
     e1a:	9c 87       	std	Y+12, r25	; 0x0c
     e1c:	ad 87       	std	Y+13, r26	; 0x0d
     e1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e20:	6b 85       	ldd	r22, Y+11	; 0x0b
     e22:	7c 85       	ldd	r23, Y+12	; 0x0c
     e24:	8d 85       	ldd	r24, Y+13	; 0x0d
     e26:	9e 85       	ldd	r25, Y+14	; 0x0e
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	4a ef       	ldi	r20, 0xFA	; 250
     e2e:	54 e4       	ldi	r21, 0x44	; 68
     e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	8f 83       	std	Y+7, r24	; 0x07
     e3a:	98 87       	std	Y+8, r25	; 0x08
     e3c:	a9 87       	std	Y+9, r26	; 0x09
     e3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e40:	6f 81       	ldd	r22, Y+7	; 0x07
     e42:	78 85       	ldd	r23, Y+8	; 0x08
     e44:	89 85       	ldd	r24, Y+9	; 0x09
     e46:	9a 85       	ldd	r25, Y+10	; 0x0a
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	40 e8       	ldi	r20, 0x80	; 128
     e4e:	5f e3       	ldi	r21, 0x3F	; 63
     e50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e54:	88 23       	and	r24, r24
     e56:	2c f4       	brge	.+10     	; 0xe62 <storeNewPassword+0x92>
		__ticks = 1;
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	9e 83       	std	Y+6, r25	; 0x06
     e5e:	8d 83       	std	Y+5, r24	; 0x05
     e60:	3f c0       	rjmp	.+126    	; 0xee0 <storeNewPassword+0x110>
	else if (__tmp > 65535)
     e62:	6f 81       	ldd	r22, Y+7	; 0x07
     e64:	78 85       	ldd	r23, Y+8	; 0x08
     e66:	89 85       	ldd	r24, Y+9	; 0x09
     e68:	9a 85       	ldd	r25, Y+10	; 0x0a
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	3f ef       	ldi	r19, 0xFF	; 255
     e6e:	4f e7       	ldi	r20, 0x7F	; 127
     e70:	57 e4       	ldi	r21, 0x47	; 71
     e72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e76:	18 16       	cp	r1, r24
     e78:	4c f5       	brge	.+82     	; 0xecc <storeNewPassword+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e7a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e7c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e7e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e80:	9e 85       	ldd	r25, Y+14	; 0x0e
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	40 e2       	ldi	r20, 0x20	; 32
     e88:	51 e4       	ldi	r21, 0x41	; 65
     e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	bc 01       	movw	r22, r24
     e94:	cd 01       	movw	r24, r26
     e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	9e 83       	std	Y+6, r25	; 0x06
     ea0:	8d 83       	std	Y+5, r24	; 0x05
     ea2:	0f c0       	rjmp	.+30     	; 0xec2 <storeNewPassword+0xf2>
     ea4:	88 ec       	ldi	r24, 0xC8	; 200
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	9c 83       	std	Y+4, r25	; 0x04
     eaa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	9c 81       	ldd	r25, Y+4	; 0x04
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	f1 f7       	brne	.-4      	; 0xeb0 <storeNewPassword+0xe0>
     eb4:	9c 83       	std	Y+4, r25	; 0x04
     eb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb8:	8d 81       	ldd	r24, Y+5	; 0x05
     eba:	9e 81       	ldd	r25, Y+6	; 0x06
     ebc:	01 97       	sbiw	r24, 0x01	; 1
     ebe:	9e 83       	std	Y+6, r25	; 0x06
     ec0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ec2:	8d 81       	ldd	r24, Y+5	; 0x05
     ec4:	9e 81       	ldd	r25, Y+6	; 0x06
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	69 f7       	brne	.-38     	; 0xea4 <storeNewPassword+0xd4>
     eca:	14 c0       	rjmp	.+40     	; 0xef4 <storeNewPassword+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ecc:	6f 81       	ldd	r22, Y+7	; 0x07
     ece:	78 85       	ldd	r23, Y+8	; 0x08
     ed0:	89 85       	ldd	r24, Y+9	; 0x09
     ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	9e 83       	std	Y+6, r25	; 0x06
     ede:	8d 83       	std	Y+5, r24	; 0x05
     ee0:	8d 81       	ldd	r24, Y+5	; 0x05
     ee2:	9e 81       	ldd	r25, Y+6	; 0x06
     ee4:	9a 83       	std	Y+2, r25	; 0x02
     ee6:	89 83       	std	Y+1, r24	; 0x01
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	9a 81       	ldd	r25, Y+2	; 0x02
     eec:	01 97       	sbiw	r24, 0x01	; 1
     eee:	f1 f7       	brne	.-4      	; 0xeec <storeNewPassword+0x11c>
     ef0:	9a 83       	std	Y+2, r25	; 0x02
     ef2:	89 83       	std	Y+1, r24	; 0x01
		/* delay time as the eeprom take 10ms to make a write*/
		_delay_ms(10) ;
		add++ ;
     ef4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ef6:	98 89       	ldd	r25, Y+16	; 0x10
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	98 8b       	std	Y+16, r25	; 0x10
     efc:	8f 87       	std	Y+15, r24	; 0x0f
		index++ ;
     efe:	89 89       	ldd	r24, Y+17	; 0x11
     f00:	8f 5f       	subi	r24, 0xFF	; 255
     f02:	89 8b       	std	Y+17, r24	; 0x11
}
void storeNewPassword (uint8* a_storedPassword_Ptr) {
	uint8 index=0 ;
	/* address of the eeprom */
	uint16 add=0x0302;
	while(a_storedPassword_Ptr[index] != endOfPass) {
     f04:	89 89       	ldd	r24, Y+17	; 0x11
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	8a 89       	ldd	r24, Y+18	; 0x12
     f0c:	9b 89       	ldd	r25, Y+19	; 0x13
     f0e:	fc 01       	movw	r30, r24
     f10:	e2 0f       	add	r30, r18
     f12:	f3 1f       	adc	r31, r19
     f14:	80 81       	ld	r24, Z
     f16:	88 35       	cpi	r24, 0x58	; 88
     f18:	09 f0       	breq	.+2      	; 0xf1c <storeNewPassword+0x14c>
     f1a:	6c cf       	rjmp	.-296    	; 0xdf4 <storeNewPassword+0x24>
		/* delay time as the eeprom take 10ms to make a write*/
		_delay_ms(10) ;
		add++ ;
		index++ ;
	}
	EEPROM_writeByte(add, endOfPass);
     f1c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f1e:	98 89       	ldd	r25, Y+16	; 0x10
     f20:	68 e5       	ldi	r22, 0x58	; 88
     f22:	0e 94 f5 09 	call	0x13ea	; 0x13ea <EEPROM_writeByte>
	UART_sendByte(returnMainOptions) ;
     f26:	8d e4       	ldi	r24, 0x4D	; 77
     f28:	0e 94 3c 10 	call	0x2078	; 0x2078 <UART_sendByte>
}
     f2c:	63 96       	adiw	r28, 0x13	; 19
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	08 95       	ret

00000f3e <checkPassword>:
void checkPassword (uint8* a_checkPassword_Ptr) {
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	ab 97       	sbiw	r28, 0x2b	; 43
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	f8 94       	cli
     f4c:	de bf       	out	0x3e, r29	; 62
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	cd bf       	out	0x3d, r28	; 61
     f52:	9e a3       	std	Y+38, r25	; 0x26
     f54:	8d a3       	std	Y+37, r24	; 0x25
	uint8 index=0 ;
     f56:	19 8a       	std	Y+17, r1	; 0x11
	uint16 add=0x0302 ;
     f58:	82 e0       	ldi	r24, 0x02	; 2
     f5a:	93 e0       	ldi	r25, 0x03	; 3
     f5c:	98 8b       	std	Y+16, r25	; 0x10
     f5e:	8f 87       	std	Y+15, r24	; 0x0f
	uint8 c[12] ;
	do{
		/* Read the pass from external EEPROM */
		EEPROM_readByte(add, c+index);
     f60:	89 89       	ldd	r24, Y+17	; 0x11
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	9e 01       	movw	r18, r28
     f68:	2e 5e       	subi	r18, 0xEE	; 238
     f6a:	3f 4f       	sbci	r19, 0xFF	; 255
     f6c:	28 0f       	add	r18, r24
     f6e:	39 1f       	adc	r19, r25
     f70:	8f 85       	ldd	r24, Y+15	; 0x0f
     f72:	98 89       	ldd	r25, Y+16	; 0x10
     f74:	b9 01       	movw	r22, r18
     f76:	0e 94 36 0a 	call	0x146c	; 0x146c <EEPROM_readByte>
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	a0 e2       	ldi	r26, 0x20	; 32
     f80:	b1 e4       	ldi	r27, 0x41	; 65
     f82:	8b 87       	std	Y+11, r24	; 0x0b
     f84:	9c 87       	std	Y+12, r25	; 0x0c
     f86:	ad 87       	std	Y+13, r26	; 0x0d
     f88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f8a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f8c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f90:	9e 85       	ldd	r25, Y+14	; 0x0e
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	4a ef       	ldi	r20, 0xFA	; 250
     f98:	54 e4       	ldi	r21, 0x44	; 68
     f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	8f 83       	std	Y+7, r24	; 0x07
     fa4:	98 87       	std	Y+8, r25	; 0x08
     fa6:	a9 87       	std	Y+9, r26	; 0x09
     fa8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     faa:	6f 81       	ldd	r22, Y+7	; 0x07
     fac:	78 85       	ldd	r23, Y+8	; 0x08
     fae:	89 85       	ldd	r24, Y+9	; 0x09
     fb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	40 e8       	ldi	r20, 0x80	; 128
     fb8:	5f e3       	ldi	r21, 0x3F	; 63
     fba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fbe:	88 23       	and	r24, r24
     fc0:	2c f4       	brge	.+10     	; 0xfcc <checkPassword+0x8e>
		__ticks = 1;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	9e 83       	std	Y+6, r25	; 0x06
     fc8:	8d 83       	std	Y+5, r24	; 0x05
     fca:	3f c0       	rjmp	.+126    	; 0x104a <checkPassword+0x10c>
	else if (__tmp > 65535)
     fcc:	6f 81       	ldd	r22, Y+7	; 0x07
     fce:	78 85       	ldd	r23, Y+8	; 0x08
     fd0:	89 85       	ldd	r24, Y+9	; 0x09
     fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	3f ef       	ldi	r19, 0xFF	; 255
     fd8:	4f e7       	ldi	r20, 0x7F	; 127
     fda:	57 e4       	ldi	r21, 0x47	; 71
     fdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fe0:	18 16       	cp	r1, r24
     fe2:	4c f5       	brge	.+82     	; 0x1036 <checkPassword+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe4:	6b 85       	ldd	r22, Y+11	; 0x0b
     fe6:	7c 85       	ldd	r23, Y+12	; 0x0c
     fe8:	8d 85       	ldd	r24, Y+13	; 0x0d
     fea:	9e 85       	ldd	r25, Y+14	; 0x0e
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	40 e2       	ldi	r20, 0x20	; 32
     ff2:	51 e4       	ldi	r21, 0x41	; 65
     ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	bc 01       	movw	r22, r24
     ffe:	cd 01       	movw	r24, r26
    1000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	9e 83       	std	Y+6, r25	; 0x06
    100a:	8d 83       	std	Y+5, r24	; 0x05
    100c:	0f c0       	rjmp	.+30     	; 0x102c <checkPassword+0xee>
    100e:	88 ec       	ldi	r24, 0xC8	; 200
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	9c 83       	std	Y+4, r25	; 0x04
    1014:	8b 83       	std	Y+3, r24	; 0x03
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	9c 81       	ldd	r25, Y+4	; 0x04
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	f1 f7       	brne	.-4      	; 0x101a <checkPassword+0xdc>
    101e:	9c 83       	std	Y+4, r25	; 0x04
    1020:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1022:	8d 81       	ldd	r24, Y+5	; 0x05
    1024:	9e 81       	ldd	r25, Y+6	; 0x06
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	9e 83       	std	Y+6, r25	; 0x06
    102a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    102c:	8d 81       	ldd	r24, Y+5	; 0x05
    102e:	9e 81       	ldd	r25, Y+6	; 0x06
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	69 f7       	brne	.-38     	; 0x100e <checkPassword+0xd0>
    1034:	14 c0       	rjmp	.+40     	; 0x105e <checkPassword+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1036:	6f 81       	ldd	r22, Y+7	; 0x07
    1038:	78 85       	ldd	r23, Y+8	; 0x08
    103a:	89 85       	ldd	r24, Y+9	; 0x09
    103c:	9a 85       	ldd	r25, Y+10	; 0x0a
    103e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	9e 83       	std	Y+6, r25	; 0x06
    1048:	8d 83       	std	Y+5, r24	; 0x05
    104a:	8d 81       	ldd	r24, Y+5	; 0x05
    104c:	9e 81       	ldd	r25, Y+6	; 0x06
    104e:	9a 83       	std	Y+2, r25	; 0x02
    1050:	89 83       	std	Y+1, r24	; 0x01
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	9a 81       	ldd	r25, Y+2	; 0x02
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	f1 f7       	brne	.-4      	; 0x1056 <checkPassword+0x118>
    105a:	9a 83       	std	Y+2, r25	; 0x02
    105c:	89 83       	std	Y+1, r24	; 0x01
		/* delay time as the eeprom take 10ms to make a write*/
		_delay_ms(10) ;
		add++ ;
    105e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1060:	98 89       	ldd	r25, Y+16	; 0x10
    1062:	01 96       	adiw	r24, 0x01	; 1
    1064:	98 8b       	std	Y+16, r25	; 0x10
    1066:	8f 87       	std	Y+15, r24	; 0x0f
		index++;
    1068:	89 89       	ldd	r24, Y+17	; 0x11
    106a:	8f 5f       	subi	r24, 0xFF	; 255
    106c:	89 8b       	std	Y+17, r24	; 0x11
	}
	while(c[index-1] != endOfPass) ;
    106e:	89 89       	ldd	r24, Y+17	; 0x11
    1070:	88 2f       	mov	r24, r24
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	9c 01       	movw	r18, r24
    1076:	21 50       	subi	r18, 0x01	; 1
    1078:	30 40       	sbci	r19, 0x00	; 0
    107a:	ce 01       	movw	r24, r28
    107c:	42 96       	adiw	r24, 0x12	; 18
    107e:	fc 01       	movw	r30, r24
    1080:	e2 0f       	add	r30, r18
    1082:	f3 1f       	adc	r31, r19
    1084:	80 81       	ld	r24, Z
    1086:	88 35       	cpi	r24, 0x58	; 88
    1088:	09 f0       	breq	.+2      	; 0x108c <checkPassword+0x14e>
    108a:	6a cf       	rjmp	.-300    	; 0xf60 <checkPassword+0x22>
	if(compareTwoPasswords(a_checkPassword_Ptr,c) == 0) {
    108c:	8d a1       	ldd	r24, Y+37	; 0x25
    108e:	9e a1       	ldd	r25, Y+38	; 0x26
    1090:	9e 01       	movw	r18, r28
    1092:	2e 5e       	subi	r18, 0xEE	; 238
    1094:	3f 4f       	sbci	r19, 0xFF	; 255
    1096:	b9 01       	movw	r22, r18
    1098:	0e 94 98 09 	call	0x1330	; 0x1330 <compareTwoPasswords>
    109c:	88 23       	and	r24, r24
    109e:	31 f4       	brne	.+12     	; 0x10ac <checkPassword+0x16e>
		g_trialNumber=0 ;
    10a0:	10 92 8c 00 	sts	0x008C, r1
		UART_sendByte(rightPassword) ;
    10a4:	82 e5       	ldi	r24, 0x52	; 82
    10a6:	0e 94 3c 10 	call	0x2078	; 0x2078 <UART_sendByte>
    10aa:	3e c0       	rjmp	.+124    	; 0x1128 <checkPassword+0x1ea>
	}
	else{
		g_trialNumber++ ;
    10ac:	80 91 8c 00 	lds	r24, 0x008C
    10b0:	8f 5f       	subi	r24, 0xFF	; 255
    10b2:	80 93 8c 00 	sts	0x008C, r24
		if (g_trialNumber ==3){
    10b6:	80 91 8c 00 	lds	r24, 0x008C
    10ba:	83 30       	cpi	r24, 0x03	; 3
    10bc:	91 f5       	brne	.+100    	; 0x1122 <checkPassword+0x1e4>
			UART_sendByte(errorScreen) ;
    10be:	85 e4       	ldi	r24, 0x45	; 69
    10c0:	0e 94 3c 10 	call	0x2078	; 0x2078 <UART_sendByte>
			Timer_setCallBack(buzzerOff);
    10c4:	80 ec       	ldi	r24, 0xC0	; 192
    10c6:	95 e0       	ldi	r25, 0x05	; 5
    10c8:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <Timer_setCallBack>
			buzzerON(); //OPEN BUZZER
    10cc:	0e 94 b4 05 	call	0xb68	; 0xb68 <buzzerON>
			Timer_ConfigType Timer_Config = {F_CPU_1024,COMPARE,ENABLE,0,65000};
    10d0:	ce 01       	movw	r24, r28
    10d2:	4e 96       	adiw	r24, 0x1e	; 30
    10d4:	98 a7       	std	Y+40, r25	; 0x28
    10d6:	8f a3       	std	Y+39, r24	; 0x27
    10d8:	ef e6       	ldi	r30, 0x6F	; 111
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	fa a7       	std	Y+42, r31	; 0x2a
    10de:	e9 a7       	std	Y+41, r30	; 0x29
    10e0:	f7 e0       	ldi	r31, 0x07	; 7
    10e2:	fb a7       	std	Y+43, r31	; 0x2b
    10e4:	e9 a5       	ldd	r30, Y+41	; 0x29
    10e6:	fa a5       	ldd	r31, Y+42	; 0x2a
    10e8:	00 80       	ld	r0, Z
    10ea:	89 a5       	ldd	r24, Y+41	; 0x29
    10ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    10ee:	01 96       	adiw	r24, 0x01	; 1
    10f0:	9a a7       	std	Y+42, r25	; 0x2a
    10f2:	89 a7       	std	Y+41, r24	; 0x29
    10f4:	ef a1       	ldd	r30, Y+39	; 0x27
    10f6:	f8 a5       	ldd	r31, Y+40	; 0x28
    10f8:	00 82       	st	Z, r0
    10fa:	8f a1       	ldd	r24, Y+39	; 0x27
    10fc:	98 a5       	ldd	r25, Y+40	; 0x28
    10fe:	01 96       	adiw	r24, 0x01	; 1
    1100:	98 a7       	std	Y+40, r25	; 0x28
    1102:	8f a3       	std	Y+39, r24	; 0x27
    1104:	9b a5       	ldd	r25, Y+43	; 0x2b
    1106:	91 50       	subi	r25, 0x01	; 1
    1108:	9b a7       	std	Y+43, r25	; 0x2b
    110a:	eb a5       	ldd	r30, Y+43	; 0x2b
    110c:	ee 23       	and	r30, r30
    110e:	51 f7       	brne	.-44     	; 0x10e4 <checkPassword+0x1a6>
			Timer_init(&Timer_Config);
    1110:	ce 01       	movw	r24, r28
    1112:	4e 96       	adiw	r24, 0x1e	; 30
    1114:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Timer_init>
			Timer_setCallBack(buzzerOff);
    1118:	80 ec       	ldi	r24, 0xC0	; 192
    111a:	95 e0       	ldi	r25, 0x05	; 5
    111c:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <Timer_setCallBack>
    1120:	03 c0       	rjmp	.+6      	; 0x1128 <checkPassword+0x1ea>

		}
		else{
			UART_sendByte(wrogPassword) ;
    1122:	87 e5       	ldi	r24, 0x57	; 87
    1124:	0e 94 3c 10 	call	0x2078	; 0x2078 <UART_sendByte>
		}}
}
    1128:	ab 96       	adiw	r28, 0x2b	; 43
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	cd bf       	out	0x3d, r28	; 61
    1134:	cf 91       	pop	r28
    1136:	df 91       	pop	r29
    1138:	08 95       	ret

0000113a <rotateMotorCW>:
void rotateMotorCW (void) {
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
    1142:	2c 97       	sbiw	r28, 0x0c	; 12
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	de bf       	out	0x3e, r29	; 62
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte(doorOpening) ;
    114e:	8f e4       	ldi	r24, 0x4F	; 79
    1150:	0e 94 3c 10 	call	0x2078	; 0x2078 <UART_sendByte>
	Timer_setCallBack(holdMotor);
    1154:	89 ee       	ldi	r24, 0xE9	; 233
    1156:	98 e0       	ldi	r25, 0x08	; 8
    1158:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <Timer_setCallBack>
	Timer_ConfigType Timer_Config = {F_CPU_1024,COMPARE,ENABLE,0,65000};
    115c:	ce 01       	movw	r24, r28
    115e:	01 96       	adiw	r24, 0x01	; 1
    1160:	99 87       	std	Y+9, r25	; 0x09
    1162:	88 87       	std	Y+8, r24	; 0x08
    1164:	e6 e7       	ldi	r30, 0x76	; 118
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	fb 87       	std	Y+11, r31	; 0x0b
    116a:	ea 87       	std	Y+10, r30	; 0x0a
    116c:	f7 e0       	ldi	r31, 0x07	; 7
    116e:	fc 87       	std	Y+12, r31	; 0x0c
    1170:	ea 85       	ldd	r30, Y+10	; 0x0a
    1172:	fb 85       	ldd	r31, Y+11	; 0x0b
    1174:	00 80       	ld	r0, Z
    1176:	8a 85       	ldd	r24, Y+10	; 0x0a
    1178:	9b 85       	ldd	r25, Y+11	; 0x0b
    117a:	01 96       	adiw	r24, 0x01	; 1
    117c:	9b 87       	std	Y+11, r25	; 0x0b
    117e:	8a 87       	std	Y+10, r24	; 0x0a
    1180:	e8 85       	ldd	r30, Y+8	; 0x08
    1182:	f9 85       	ldd	r31, Y+9	; 0x09
    1184:	00 82       	st	Z, r0
    1186:	88 85       	ldd	r24, Y+8	; 0x08
    1188:	99 85       	ldd	r25, Y+9	; 0x09
    118a:	01 96       	adiw	r24, 0x01	; 1
    118c:	99 87       	std	Y+9, r25	; 0x09
    118e:	88 87       	std	Y+8, r24	; 0x08
    1190:	9c 85       	ldd	r25, Y+12	; 0x0c
    1192:	91 50       	subi	r25, 0x01	; 1
    1194:	9c 87       	std	Y+12, r25	; 0x0c
    1196:	ec 85       	ldd	r30, Y+12	; 0x0c
    1198:	ee 23       	and	r30, r30
    119a:	51 f7       	brne	.-44     	; 0x1170 <rotateMotorCW+0x36>
	SET_BIT(PORTB,PB0) ;
    119c:	a8 e3       	ldi	r26, 0x38	; 56
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e8 e3       	ldi	r30, 0x38	; 56
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	81 60       	ori	r24, 0x01	; 1
    11a8:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB,PB1) ;
    11aa:	a8 e3       	ldi	r26, 0x38	; 56
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e8 e3       	ldi	r30, 0x38	; 56
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	8d 7f       	andi	r24, 0xFD	; 253
    11b6:	8c 93       	st	X, r24
	Timer_init(&Timer_Config);
    11b8:	ce 01       	movw	r24, r28
    11ba:	01 96       	adiw	r24, 0x01	; 1
    11bc:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Timer_init>

}
    11c0:	2c 96       	adiw	r28, 0x0c	; 12
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <holdMotor>:
void holdMotor (void) {
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	2c 97       	sbiw	r28, 0x0c	; 12
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	cd bf       	out	0x3d, r28	; 61
	Timer_setCallBack(rotateMotorCCW);
    11e6:	82 e3       	ldi	r24, 0x32	; 50
    11e8:	99 e0       	ldi	r25, 0x09	; 9
    11ea:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <Timer_setCallBack>
	Timer_ConfigType Timer_Config = {F_CPU_1024,COMPARE,ENABLE,0,20000};
    11ee:	ce 01       	movw	r24, r28
    11f0:	01 96       	adiw	r24, 0x01	; 1
    11f2:	99 87       	std	Y+9, r25	; 0x09
    11f4:	88 87       	std	Y+8, r24	; 0x08
    11f6:	ed e7       	ldi	r30, 0x7D	; 125
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	fb 87       	std	Y+11, r31	; 0x0b
    11fc:	ea 87       	std	Y+10, r30	; 0x0a
    11fe:	f7 e0       	ldi	r31, 0x07	; 7
    1200:	fc 87       	std	Y+12, r31	; 0x0c
    1202:	ea 85       	ldd	r30, Y+10	; 0x0a
    1204:	fb 85       	ldd	r31, Y+11	; 0x0b
    1206:	00 80       	ld	r0, Z
    1208:	8a 85       	ldd	r24, Y+10	; 0x0a
    120a:	9b 85       	ldd	r25, Y+11	; 0x0b
    120c:	01 96       	adiw	r24, 0x01	; 1
    120e:	9b 87       	std	Y+11, r25	; 0x0b
    1210:	8a 87       	std	Y+10, r24	; 0x0a
    1212:	e8 85       	ldd	r30, Y+8	; 0x08
    1214:	f9 85       	ldd	r31, Y+9	; 0x09
    1216:	00 82       	st	Z, r0
    1218:	88 85       	ldd	r24, Y+8	; 0x08
    121a:	99 85       	ldd	r25, Y+9	; 0x09
    121c:	01 96       	adiw	r24, 0x01	; 1
    121e:	99 87       	std	Y+9, r25	; 0x09
    1220:	88 87       	std	Y+8, r24	; 0x08
    1222:	9c 85       	ldd	r25, Y+12	; 0x0c
    1224:	91 50       	subi	r25, 0x01	; 1
    1226:	9c 87       	std	Y+12, r25	; 0x0c
    1228:	ec 85       	ldd	r30, Y+12	; 0x0c
    122a:	ee 23       	and	r30, r30
    122c:	51 f7       	brne	.-44     	; 0x1202 <holdMotor+0x30>
	CLEAR_BIT(PORTB,PB0) ;
    122e:	a8 e3       	ldi	r26, 0x38	; 56
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e8 e3       	ldi	r30, 0x38	; 56
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	8e 7f       	andi	r24, 0xFE	; 254
    123a:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB,PB1) ;
    123c:	a8 e3       	ldi	r26, 0x38	; 56
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e8 e3       	ldi	r30, 0x38	; 56
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	8d 7f       	andi	r24, 0xFD	; 253
    1248:	8c 93       	st	X, r24
	Timer_init(&Timer_Config);
    124a:	ce 01       	movw	r24, r28
    124c:	01 96       	adiw	r24, 0x01	; 1
    124e:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Timer_init>

}
    1252:	2c 96       	adiw	r28, 0x0c	; 12
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	cd bf       	out	0x3d, r28	; 61
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <rotateMotorCCW>:
void rotateMotorCCW (void) {
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	2c 97       	sbiw	r28, 0x0c	; 12
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte(doorClosing) ;
    1278:	83 e4       	ldi	r24, 0x43	; 67
    127a:	0e 94 3c 10 	call	0x2078	; 0x2078 <UART_sendByte>
	Timer_setCallBack(stopMotor);
    127e:	8e e7       	ldi	r24, 0x7E	; 126
    1280:	99 e0       	ldi	r25, 0x09	; 9
    1282:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <Timer_setCallBack>
	Timer_ConfigType Timer_Config = {F_CPU_1024,COMPARE,ENABLE,0,65000};
    1286:	ce 01       	movw	r24, r28
    1288:	01 96       	adiw	r24, 0x01	; 1
    128a:	99 87       	std	Y+9, r25	; 0x09
    128c:	88 87       	std	Y+8, r24	; 0x08
    128e:	e4 e8       	ldi	r30, 0x84	; 132
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	fb 87       	std	Y+11, r31	; 0x0b
    1294:	ea 87       	std	Y+10, r30	; 0x0a
    1296:	f7 e0       	ldi	r31, 0x07	; 7
    1298:	fc 87       	std	Y+12, r31	; 0x0c
    129a:	ea 85       	ldd	r30, Y+10	; 0x0a
    129c:	fb 85       	ldd	r31, Y+11	; 0x0b
    129e:	00 80       	ld	r0, Z
    12a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    12a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    12a4:	01 96       	adiw	r24, 0x01	; 1
    12a6:	9b 87       	std	Y+11, r25	; 0x0b
    12a8:	8a 87       	std	Y+10, r24	; 0x0a
    12aa:	e8 85       	ldd	r30, Y+8	; 0x08
    12ac:	f9 85       	ldd	r31, Y+9	; 0x09
    12ae:	00 82       	st	Z, r0
    12b0:	88 85       	ldd	r24, Y+8	; 0x08
    12b2:	99 85       	ldd	r25, Y+9	; 0x09
    12b4:	01 96       	adiw	r24, 0x01	; 1
    12b6:	99 87       	std	Y+9, r25	; 0x09
    12b8:	88 87       	std	Y+8, r24	; 0x08
    12ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    12bc:	91 50       	subi	r25, 0x01	; 1
    12be:	9c 87       	std	Y+12, r25	; 0x0c
    12c0:	ec 85       	ldd	r30, Y+12	; 0x0c
    12c2:	ee 23       	and	r30, r30
    12c4:	51 f7       	brne	.-44     	; 0x129a <rotateMotorCCW+0x36>
	CLEAR_BIT(PORTB,PB0) ;
    12c6:	a8 e3       	ldi	r26, 0x38	; 56
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e8 e3       	ldi	r30, 0x38	; 56
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	8e 7f       	andi	r24, 0xFE	; 254
    12d2:	8c 93       	st	X, r24
	SET_BIT(PORTB,PB1) ;
    12d4:	a8 e3       	ldi	r26, 0x38	; 56
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e8 e3       	ldi	r30, 0x38	; 56
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	82 60       	ori	r24, 0x02	; 2
    12e0:	8c 93       	st	X, r24
	Timer_init(&Timer_Config);
    12e2:	ce 01       	movw	r24, r28
    12e4:	01 96       	adiw	r24, 0x01	; 1
    12e6:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Timer_init>
}
    12ea:	2c 96       	adiw	r28, 0x0c	; 12
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	cd bf       	out	0x3d, r28	; 61
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <stopMotor>:
void stopMotor(void) {
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
	Timer_DeInit() ;
    1304:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <Timer_DeInit>
	CLEAR_BIT(PORTB,PB0) ;
    1308:	a8 e3       	ldi	r26, 0x38	; 56
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e8 e3       	ldi	r30, 0x38	; 56
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	8e 7f       	andi	r24, 0xFE	; 254
    1314:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB,PB1) ;
    1316:	a8 e3       	ldi	r26, 0x38	; 56
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e8 e3       	ldi	r30, 0x38	; 56
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	8d 7f       	andi	r24, 0xFD	; 253
    1322:	8c 93       	st	X, r24
	UART_sendByte(returnMainOptions) ;
    1324:	8d e4       	ldi	r24, 0x4D	; 77
    1326:	0e 94 3c 10 	call	0x2078	; 0x2078 <UART_sendByte>
}
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <compareTwoPasswords>:

uint8 compareTwoPasswords(uint8* a_passwordOne_Ptr, uint8* a_passwordTwo_Ptr) {
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	00 d0       	rcall	.+0      	; 0x1336 <compareTwoPasswords+0x6>
    1336:	00 d0       	rcall	.+0      	; 0x1338 <compareTwoPasswords+0x8>
    1338:	00 d0       	rcall	.+0      	; 0x133a <compareTwoPasswords+0xa>
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	9c 83       	std	Y+4, r25	; 0x04
    1340:	8b 83       	std	Y+3, r24	; 0x03
    1342:	7e 83       	std	Y+6, r23	; 0x06
    1344:	6d 83       	std	Y+5, r22	; 0x05
	uint8 numberOfDifference = 0;
    1346:	1a 82       	std	Y+2, r1	; 0x02
	uint8 index=0;
    1348:	19 82       	std	Y+1, r1	; 0x01
    134a:	1a c0       	rjmp	.+52     	; 0x1380 <compareTwoPasswords+0x50>
	while(a_passwordOne_Ptr[index] != endOfPass)  {
		if (a_passwordOne_Ptr[index] == a_passwordTwo_Ptr[index]) {
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	9c 81       	ldd	r25, Y+4	; 0x04
    1356:	fc 01       	movw	r30, r24
    1358:	e2 0f       	add	r30, r18
    135a:	f3 1f       	adc	r31, r19
    135c:	40 81       	ld	r20, Z
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	8d 81       	ldd	r24, Y+5	; 0x05
    1366:	9e 81       	ldd	r25, Y+6	; 0x06
    1368:	fc 01       	movw	r30, r24
    136a:	e2 0f       	add	r30, r18
    136c:	f3 1f       	adc	r31, r19
    136e:	80 81       	ld	r24, Z
    1370:	48 17       	cp	r20, r24
    1372:	19 f0       	breq	.+6      	; 0x137a <compareTwoPasswords+0x4a>
		}
		else{
			numberOfDifference ++;
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	8f 5f       	subi	r24, 0xFF	; 255
    1378:	8a 83       	std	Y+2, r24	; 0x02
		}
		index++;
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	8f 5f       	subi	r24, 0xFF	; 255
    137e:	89 83       	std	Y+1, r24	; 0x01
}

uint8 compareTwoPasswords(uint8* a_passwordOne_Ptr, uint8* a_passwordTwo_Ptr) {
	uint8 numberOfDifference = 0;
	uint8 index=0;
	while(a_passwordOne_Ptr[index] != endOfPass)  {
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	9c 81       	ldd	r25, Y+4	; 0x04
    138a:	fc 01       	movw	r30, r24
    138c:	e2 0f       	add	r30, r18
    138e:	f3 1f       	adc	r31, r19
    1390:	80 81       	ld	r24, Z
    1392:	88 35       	cpi	r24, 0x58	; 88
    1394:	d9 f6       	brne	.-74     	; 0x134c <compareTwoPasswords+0x1c>
	}
	/*this statment check if they have the same length or not
	 * because if it wasn't there and the first password is 123
	 * and the seconend is 1234 the compare function would
	 * think they are identical while they are not*/
	if(a_passwordTwo_Ptr[index] == endOfPass) {
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	8d 81       	ldd	r24, Y+5	; 0x05
    139e:	9e 81       	ldd	r25, Y+6	; 0x06
    13a0:	fc 01       	movw	r30, r24
    13a2:	e2 0f       	add	r30, r18
    13a4:	f3 1f       	adc	r31, r19
    13a6:	80 81       	ld	r24, Z
    13a8:	88 35       	cpi	r24, 0x58	; 88
    13aa:	19 f0       	breq	.+6      	; 0x13b2 <compareTwoPasswords+0x82>

	}
	else{
		numberOfDifference ++;
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	8f 5f       	subi	r24, 0xFF	; 255
    13b0:	8a 83       	std	Y+2, r24	; 0x02
	}
	return numberOfDifference ;
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    13b4:	26 96       	adiw	r28, 0x06	; 6
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <EEPROM_init>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"


void EEPROM_init(void){
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <EEPROM_init+0x6>
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
	I2c_ConfigType I2c_Config ={0x02,0b00000010};
    13d0:	82 e0       	ldi	r24, 0x02	; 2
    13d2:	89 83       	std	Y+1, r24	; 0x01
    13d4:	82 e0       	ldi	r24, 0x02	; 2
    13d6:	8a 83       	std	Y+2, r24	; 0x02
	TWI_init(&I2c_Config);
    13d8:	ce 01       	movw	r24, r28
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <TWI_init>
}
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <EEPROM_writeByte>:



uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <EEPROM_writeByte+0x6>
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <EEPROM_writeByte+0x8>
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	9a 83       	std	Y+2, r25	; 0x02
    13f8:	89 83       	std	Y+1, r24	; 0x01
    13fa:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    13fc:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1400:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <TWI_getStatus>
    1404:	88 30       	cpi	r24, 0x08	; 8
    1406:	11 f0       	breq	.+4      	; 0x140c <EEPROM_writeByte+0x22>
        return ERROR;
    1408:	1c 82       	std	Y+4, r1	; 0x04
    140a:	28 c0       	rjmp	.+80     	; 0x145c <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	9a 81       	ldd	r25, Y+2	; 0x02
    1410:	80 70       	andi	r24, 0x00	; 0
    1412:	97 70       	andi	r25, 0x07	; 7
    1414:	88 0f       	add	r24, r24
    1416:	89 2f       	mov	r24, r25
    1418:	88 1f       	adc	r24, r24
    141a:	99 0b       	sbc	r25, r25
    141c:	91 95       	neg	r25
    141e:	80 6a       	ori	r24, 0xA0	; 160
    1420:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1424:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <TWI_getStatus>
    1428:	88 31       	cpi	r24, 0x18	; 24
    142a:	11 f0       	breq	.+4      	; 0x1430 <EEPROM_writeByte+0x46>
        return ERROR; 
    142c:	1c 82       	std	Y+4, r1	; 0x04
    142e:	16 c0       	rjmp	.+44     	; 0x145c <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1436:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <TWI_getStatus>
    143a:	88 32       	cpi	r24, 0x28	; 40
    143c:	11 f0       	breq	.+4      	; 0x1442 <EEPROM_writeByte+0x58>
        return ERROR;
    143e:	1c 82       	std	Y+4, r1	; 0x04
    1440:	0d c0       	rjmp	.+26     	; 0x145c <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1448:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <TWI_getStatus>
    144c:	88 32       	cpi	r24, 0x28	; 40
    144e:	11 f0       	breq	.+4      	; 0x1454 <EEPROM_writeByte+0x6a>
        return ERROR;
    1450:	1c 82       	std	Y+4, r1	; 0x04
    1452:	04 c0       	rjmp	.+8      	; 0x145c <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1454:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <TWI_stop>
	
    return SUCCESS;
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	8c 83       	std	Y+4, r24	; 0x04
    145c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	00 d0       	rcall	.+0      	; 0x1472 <EEPROM_readByte+0x6>
    1472:	00 d0       	rcall	.+0      	; 0x1474 <EEPROM_readByte+0x8>
    1474:	0f 92       	push	r0
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
    147a:	9a 83       	std	Y+2, r25	; 0x02
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	7c 83       	std	Y+4, r23	; 0x04
    1480:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1482:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1486:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <TWI_getStatus>
    148a:	88 30       	cpi	r24, 0x08	; 8
    148c:	11 f0       	breq	.+4      	; 0x1492 <EEPROM_readByte+0x26>
        return ERROR;
    148e:	1d 82       	std	Y+5, r1	; 0x05
    1490:	44 c0       	rjmp	.+136    	; 0x151a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	9a 81       	ldd	r25, Y+2	; 0x02
    1496:	80 70       	andi	r24, 0x00	; 0
    1498:	97 70       	andi	r25, 0x07	; 7
    149a:	88 0f       	add	r24, r24
    149c:	89 2f       	mov	r24, r25
    149e:	88 1f       	adc	r24, r24
    14a0:	99 0b       	sbc	r25, r25
    14a2:	91 95       	neg	r25
    14a4:	80 6a       	ori	r24, 0xA0	; 160
    14a6:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    14aa:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <TWI_getStatus>
    14ae:	88 31       	cpi	r24, 0x18	; 24
    14b0:	11 f0       	breq	.+4      	; 0x14b6 <EEPROM_readByte+0x4a>
        return ERROR;
    14b2:	1d 82       	std	Y+5, r1	; 0x05
    14b4:	32 c0       	rjmp	.+100    	; 0x151a <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    14bc:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <TWI_getStatus>
    14c0:	88 32       	cpi	r24, 0x28	; 40
    14c2:	11 f0       	breq	.+4      	; 0x14c8 <EEPROM_readByte+0x5c>
        return ERROR;
    14c4:	1d 82       	std	Y+5, r1	; 0x05
    14c6:	29 c0       	rjmp	.+82     	; 0x151a <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    14c8:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    14cc:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <TWI_getStatus>
    14d0:	80 31       	cpi	r24, 0x10	; 16
    14d2:	11 f0       	breq	.+4      	; 0x14d8 <EEPROM_readByte+0x6c>
        return ERROR;
    14d4:	1d 82       	std	Y+5, r1	; 0x05
    14d6:	21 c0       	rjmp	.+66     	; 0x151a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	9a 81       	ldd	r25, Y+2	; 0x02
    14dc:	80 70       	andi	r24, 0x00	; 0
    14de:	97 70       	andi	r25, 0x07	; 7
    14e0:	88 0f       	add	r24, r24
    14e2:	89 2f       	mov	r24, r25
    14e4:	88 1f       	adc	r24, r24
    14e6:	99 0b       	sbc	r25, r25
    14e8:	91 95       	neg	r25
    14ea:	81 6a       	ori	r24, 0xA1	; 161
    14ec:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    14f0:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <TWI_getStatus>
    14f4:	80 34       	cpi	r24, 0x40	; 64
    14f6:	11 f0       	breq	.+4      	; 0x14fc <EEPROM_readByte+0x90>
        return ERROR;
    14f8:	1d 82       	std	Y+5, r1	; 0x05
    14fa:	0f c0       	rjmp	.+30     	; 0x151a <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    14fc:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <TWI_readByteWithNACK>
    1500:	eb 81       	ldd	r30, Y+3	; 0x03
    1502:	fc 81       	ldd	r31, Y+4	; 0x04
    1504:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1506:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <TWI_getStatus>
    150a:	88 35       	cpi	r24, 0x58	; 88
    150c:	11 f0       	breq	.+4      	; 0x1512 <EEPROM_readByte+0xa6>
        return ERROR;
    150e:	1d 82       	std	Y+5, r1	; 0x05
    1510:	04 c0       	rjmp	.+8      	; 0x151a <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1512:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <TWI_stop>

    return SUCCESS;
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	8d 83       	std	Y+5, r24	; 0x05
    151a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	00 d0       	rcall	.+0      	; 0x1532 <GPIO_setupPinDirection+0x6>
    1532:	00 d0       	rcall	.+0      	; 0x1534 <GPIO_setupPinDirection+0x8>
    1534:	0f 92       	push	r0
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	89 83       	std	Y+1, r24	; 0x01
    153c:	6a 83       	std	Y+2, r22	; 0x02
    153e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	88 30       	cpi	r24, 0x08	; 8
    1544:	08 f0       	brcs	.+2      	; 0x1548 <GPIO_setupPinDirection+0x1c>
    1546:	d5 c0       	rjmp	.+426    	; 0x16f2 <GPIO_setupPinDirection+0x1c6>
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	84 30       	cpi	r24, 0x04	; 4
    154c:	08 f0       	brcs	.+2      	; 0x1550 <GPIO_setupPinDirection+0x24>
    154e:	d1 c0       	rjmp	.+418    	; 0x16f2 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	3d 83       	std	Y+5, r19	; 0x05
    1558:	2c 83       	std	Y+4, r18	; 0x04
    155a:	8c 81       	ldd	r24, Y+4	; 0x04
    155c:	9d 81       	ldd	r25, Y+5	; 0x05
    155e:	81 30       	cpi	r24, 0x01	; 1
    1560:	91 05       	cpc	r25, r1
    1562:	09 f4       	brne	.+2      	; 0x1566 <GPIO_setupPinDirection+0x3a>
    1564:	43 c0       	rjmp	.+134    	; 0x15ec <GPIO_setupPinDirection+0xc0>
    1566:	2c 81       	ldd	r18, Y+4	; 0x04
    1568:	3d 81       	ldd	r19, Y+5	; 0x05
    156a:	22 30       	cpi	r18, 0x02	; 2
    156c:	31 05       	cpc	r19, r1
    156e:	2c f4       	brge	.+10     	; 0x157a <GPIO_setupPinDirection+0x4e>
    1570:	8c 81       	ldd	r24, Y+4	; 0x04
    1572:	9d 81       	ldd	r25, Y+5	; 0x05
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	71 f0       	breq	.+28     	; 0x1594 <GPIO_setupPinDirection+0x68>
    1578:	bc c0       	rjmp	.+376    	; 0x16f2 <GPIO_setupPinDirection+0x1c6>
    157a:	2c 81       	ldd	r18, Y+4	; 0x04
    157c:	3d 81       	ldd	r19, Y+5	; 0x05
    157e:	22 30       	cpi	r18, 0x02	; 2
    1580:	31 05       	cpc	r19, r1
    1582:	09 f4       	brne	.+2      	; 0x1586 <GPIO_setupPinDirection+0x5a>
    1584:	5f c0       	rjmp	.+190    	; 0x1644 <GPIO_setupPinDirection+0x118>
    1586:	8c 81       	ldd	r24, Y+4	; 0x04
    1588:	9d 81       	ldd	r25, Y+5	; 0x05
    158a:	83 30       	cpi	r24, 0x03	; 3
    158c:	91 05       	cpc	r25, r1
    158e:	09 f4       	brne	.+2      	; 0x1592 <GPIO_setupPinDirection+0x66>
    1590:	85 c0       	rjmp	.+266    	; 0x169c <GPIO_setupPinDirection+0x170>
    1592:	af c0       	rjmp	.+350    	; 0x16f2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	81 30       	cpi	r24, 0x01	; 1
    1598:	a1 f4       	brne	.+40     	; 0x15c2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    159a:	aa e3       	ldi	r26, 0x3A	; 58
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	ea e3       	ldi	r30, 0x3A	; 58
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	48 2f       	mov	r20, r24
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	02 2e       	mov	r0, r18
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <GPIO_setupPinDirection+0x8c>
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	0a 94       	dec	r0
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <GPIO_setupPinDirection+0x88>
    15bc:	84 2b       	or	r24, r20
    15be:	8c 93       	st	X, r24
    15c0:	98 c0       	rjmp	.+304    	; 0x16f2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    15c2:	aa e3       	ldi	r26, 0x3A	; 58
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	ea e3       	ldi	r30, 0x3A	; 58
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	48 2f       	mov	r20, r24
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	02 2e       	mov	r0, r18
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <GPIO_setupPinDirection+0xb4>
    15dc:	88 0f       	add	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	0a 94       	dec	r0
    15e2:	e2 f7       	brpl	.-8      	; 0x15dc <GPIO_setupPinDirection+0xb0>
    15e4:	80 95       	com	r24
    15e6:	84 23       	and	r24, r20
    15e8:	8c 93       	st	X, r24
    15ea:	83 c0       	rjmp	.+262    	; 0x16f2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	81 30       	cpi	r24, 0x01	; 1
    15f0:	a1 f4       	brne	.+40     	; 0x161a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    15f2:	a7 e3       	ldi	r26, 0x37	; 55
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e7 e3       	ldi	r30, 0x37	; 55
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	48 2f       	mov	r20, r24
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	02 2e       	mov	r0, r18
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <GPIO_setupPinDirection+0xe4>
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	0a 94       	dec	r0
    1612:	e2 f7       	brpl	.-8      	; 0x160c <GPIO_setupPinDirection+0xe0>
    1614:	84 2b       	or	r24, r20
    1616:	8c 93       	st	X, r24
    1618:	6c c0       	rjmp	.+216    	; 0x16f2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    161a:	a7 e3       	ldi	r26, 0x37	; 55
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e7 e3       	ldi	r30, 0x37	; 55
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	48 2f       	mov	r20, r24
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	02 2e       	mov	r0, r18
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <GPIO_setupPinDirection+0x10c>
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	0a 94       	dec	r0
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <GPIO_setupPinDirection+0x108>
    163c:	80 95       	com	r24
    163e:	84 23       	and	r24, r20
    1640:	8c 93       	st	X, r24
    1642:	57 c0       	rjmp	.+174    	; 0x16f2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	81 30       	cpi	r24, 0x01	; 1
    1648:	a1 f4       	brne	.+40     	; 0x1672 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    164a:	a4 e3       	ldi	r26, 0x34	; 52
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	e4 e3       	ldi	r30, 0x34	; 52
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	48 2f       	mov	r20, r24
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	02 2e       	mov	r0, r18
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <GPIO_setupPinDirection+0x13c>
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	0a 94       	dec	r0
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <GPIO_setupPinDirection+0x138>
    166c:	84 2b       	or	r24, r20
    166e:	8c 93       	st	X, r24
    1670:	40 c0       	rjmp	.+128    	; 0x16f2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1672:	a4 e3       	ldi	r26, 0x34	; 52
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e4 e3       	ldi	r30, 0x34	; 52
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	48 2f       	mov	r20, r24
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	02 2e       	mov	r0, r18
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <GPIO_setupPinDirection+0x164>
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	0a 94       	dec	r0
    1692:	e2 f7       	brpl	.-8      	; 0x168c <GPIO_setupPinDirection+0x160>
    1694:	80 95       	com	r24
    1696:	84 23       	and	r24, r20
    1698:	8c 93       	st	X, r24
    169a:	2b c0       	rjmp	.+86     	; 0x16f2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	a1 f4       	brne	.+40     	; 0x16ca <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    16a2:	a1 e3       	ldi	r26, 0x31	; 49
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e1 e3       	ldi	r30, 0x31	; 49
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	48 2f       	mov	r20, r24
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	02 2e       	mov	r0, r18
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <GPIO_setupPinDirection+0x194>
    16bc:	88 0f       	add	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	0a 94       	dec	r0
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <GPIO_setupPinDirection+0x190>
    16c4:	84 2b       	or	r24, r20
    16c6:	8c 93       	st	X, r24
    16c8:	14 c0       	rjmp	.+40     	; 0x16f2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    16ca:	a1 e3       	ldi	r26, 0x31	; 49
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e1 e3       	ldi	r30, 0x31	; 49
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	48 2f       	mov	r20, r24
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	02 2e       	mov	r0, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <GPIO_setupPinDirection+0x1bc>
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	0a 94       	dec	r0
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <GPIO_setupPinDirection+0x1b8>
    16ec:	80 95       	com	r24
    16ee:	84 23       	and	r24, r20
    16f0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	08 95       	ret

00001702 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	00 d0       	rcall	.+0      	; 0x1708 <GPIO_writePin+0x6>
    1708:	00 d0       	rcall	.+0      	; 0x170a <GPIO_writePin+0x8>
    170a:	0f 92       	push	r0
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	89 83       	std	Y+1, r24	; 0x01
    1712:	6a 83       	std	Y+2, r22	; 0x02
    1714:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	88 30       	cpi	r24, 0x08	; 8
    171a:	08 f0       	brcs	.+2      	; 0x171e <GPIO_writePin+0x1c>
    171c:	d5 c0       	rjmp	.+426    	; 0x18c8 <GPIO_writePin+0x1c6>
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	84 30       	cpi	r24, 0x04	; 4
    1722:	08 f0       	brcs	.+2      	; 0x1726 <GPIO_writePin+0x24>
    1724:	d1 c0       	rjmp	.+418    	; 0x18c8 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	3d 83       	std	Y+5, r19	; 0x05
    172e:	2c 83       	std	Y+4, r18	; 0x04
    1730:	8c 81       	ldd	r24, Y+4	; 0x04
    1732:	9d 81       	ldd	r25, Y+5	; 0x05
    1734:	81 30       	cpi	r24, 0x01	; 1
    1736:	91 05       	cpc	r25, r1
    1738:	09 f4       	brne	.+2      	; 0x173c <GPIO_writePin+0x3a>
    173a:	43 c0       	rjmp	.+134    	; 0x17c2 <GPIO_writePin+0xc0>
    173c:	2c 81       	ldd	r18, Y+4	; 0x04
    173e:	3d 81       	ldd	r19, Y+5	; 0x05
    1740:	22 30       	cpi	r18, 0x02	; 2
    1742:	31 05       	cpc	r19, r1
    1744:	2c f4       	brge	.+10     	; 0x1750 <GPIO_writePin+0x4e>
    1746:	8c 81       	ldd	r24, Y+4	; 0x04
    1748:	9d 81       	ldd	r25, Y+5	; 0x05
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	71 f0       	breq	.+28     	; 0x176a <GPIO_writePin+0x68>
    174e:	bc c0       	rjmp	.+376    	; 0x18c8 <GPIO_writePin+0x1c6>
    1750:	2c 81       	ldd	r18, Y+4	; 0x04
    1752:	3d 81       	ldd	r19, Y+5	; 0x05
    1754:	22 30       	cpi	r18, 0x02	; 2
    1756:	31 05       	cpc	r19, r1
    1758:	09 f4       	brne	.+2      	; 0x175c <GPIO_writePin+0x5a>
    175a:	5f c0       	rjmp	.+190    	; 0x181a <GPIO_writePin+0x118>
    175c:	8c 81       	ldd	r24, Y+4	; 0x04
    175e:	9d 81       	ldd	r25, Y+5	; 0x05
    1760:	83 30       	cpi	r24, 0x03	; 3
    1762:	91 05       	cpc	r25, r1
    1764:	09 f4       	brne	.+2      	; 0x1768 <GPIO_writePin+0x66>
    1766:	85 c0       	rjmp	.+266    	; 0x1872 <GPIO_writePin+0x170>
    1768:	af c0       	rjmp	.+350    	; 0x18c8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	81 30       	cpi	r24, 0x01	; 1
    176e:	a1 f4       	brne	.+40     	; 0x1798 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1770:	ab e3       	ldi	r26, 0x3B	; 59
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	eb e3       	ldi	r30, 0x3B	; 59
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	48 2f       	mov	r20, r24
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	02 2e       	mov	r0, r18
    1788:	02 c0       	rjmp	.+4      	; 0x178e <GPIO_writePin+0x8c>
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	0a 94       	dec	r0
    1790:	e2 f7       	brpl	.-8      	; 0x178a <GPIO_writePin+0x88>
    1792:	84 2b       	or	r24, r20
    1794:	8c 93       	st	X, r24
    1796:	98 c0       	rjmp	.+304    	; 0x18c8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1798:	ab e3       	ldi	r26, 0x3B	; 59
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	eb e3       	ldi	r30, 0x3B	; 59
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	48 2f       	mov	r20, r24
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	02 2e       	mov	r0, r18
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <GPIO_writePin+0xb4>
    17b2:	88 0f       	add	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	0a 94       	dec	r0
    17b8:	e2 f7       	brpl	.-8      	; 0x17b2 <GPIO_writePin+0xb0>
    17ba:	80 95       	com	r24
    17bc:	84 23       	and	r24, r20
    17be:	8c 93       	st	X, r24
    17c0:	83 c0       	rjmp	.+262    	; 0x18c8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	81 30       	cpi	r24, 0x01	; 1
    17c6:	a1 f4       	brne	.+40     	; 0x17f0 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    17c8:	a8 e3       	ldi	r26, 0x38	; 56
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	e8 e3       	ldi	r30, 0x38	; 56
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	48 2f       	mov	r20, r24
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	02 2e       	mov	r0, r18
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <GPIO_writePin+0xe4>
    17e2:	88 0f       	add	r24, r24
    17e4:	99 1f       	adc	r25, r25
    17e6:	0a 94       	dec	r0
    17e8:	e2 f7       	brpl	.-8      	; 0x17e2 <GPIO_writePin+0xe0>
    17ea:	84 2b       	or	r24, r20
    17ec:	8c 93       	st	X, r24
    17ee:	6c c0       	rjmp	.+216    	; 0x18c8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    17f0:	a8 e3       	ldi	r26, 0x38	; 56
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e8 e3       	ldi	r30, 0x38	; 56
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	48 2f       	mov	r20, r24
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	02 2e       	mov	r0, r18
    1808:	02 c0       	rjmp	.+4      	; 0x180e <GPIO_writePin+0x10c>
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	0a 94       	dec	r0
    1810:	e2 f7       	brpl	.-8      	; 0x180a <GPIO_writePin+0x108>
    1812:	80 95       	com	r24
    1814:	84 23       	and	r24, r20
    1816:	8c 93       	st	X, r24
    1818:	57 c0       	rjmp	.+174    	; 0x18c8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	a1 f4       	brne	.+40     	; 0x1848 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1820:	a5 e3       	ldi	r26, 0x35	; 53
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e5 e3       	ldi	r30, 0x35	; 53
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	48 2f       	mov	r20, r24
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	02 2e       	mov	r0, r18
    1838:	02 c0       	rjmp	.+4      	; 0x183e <GPIO_writePin+0x13c>
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	0a 94       	dec	r0
    1840:	e2 f7       	brpl	.-8      	; 0x183a <GPIO_writePin+0x138>
    1842:	84 2b       	or	r24, r20
    1844:	8c 93       	st	X, r24
    1846:	40 c0       	rjmp	.+128    	; 0x18c8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1848:	a5 e3       	ldi	r26, 0x35	; 53
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e5 e3       	ldi	r30, 0x35	; 53
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	48 2f       	mov	r20, r24
    1854:	8a 81       	ldd	r24, Y+2	; 0x02
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	02 2e       	mov	r0, r18
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <GPIO_writePin+0x164>
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	0a 94       	dec	r0
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <GPIO_writePin+0x160>
    186a:	80 95       	com	r24
    186c:	84 23       	and	r24, r20
    186e:	8c 93       	st	X, r24
    1870:	2b c0       	rjmp	.+86     	; 0x18c8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	81 30       	cpi	r24, 0x01	; 1
    1876:	a1 f4       	brne	.+40     	; 0x18a0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1878:	a2 e3       	ldi	r26, 0x32	; 50
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e2 e3       	ldi	r30, 0x32	; 50
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	48 2f       	mov	r20, r24
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	02 2e       	mov	r0, r18
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <GPIO_writePin+0x194>
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	0a 94       	dec	r0
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <GPIO_writePin+0x190>
    189a:	84 2b       	or	r24, r20
    189c:	8c 93       	st	X, r24
    189e:	14 c0       	rjmp	.+40     	; 0x18c8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    18a0:	a2 e3       	ldi	r26, 0x32	; 50
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e2 e3       	ldi	r30, 0x32	; 50
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	48 2f       	mov	r20, r24
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	02 2e       	mov	r0, r18
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <GPIO_writePin+0x1bc>
    18ba:	88 0f       	add	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	0a 94       	dec	r0
    18c0:	e2 f7       	brpl	.-8      	; 0x18ba <GPIO_writePin+0x1b8>
    18c2:	80 95       	com	r24
    18c4:	84 23       	and	r24, r20
    18c6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	cf 91       	pop	r28
    18d4:	df 91       	pop	r29
    18d6:	08 95       	ret

000018d8 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    18d8:	df 93       	push	r29
    18da:	cf 93       	push	r28
    18dc:	00 d0       	rcall	.+0      	; 0x18de <GPIO_readPin+0x6>
    18de:	00 d0       	rcall	.+0      	; 0x18e0 <GPIO_readPin+0x8>
    18e0:	0f 92       	push	r0
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	8a 83       	std	Y+2, r24	; 0x02
    18e8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    18ea:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	88 30       	cpi	r24, 0x08	; 8
    18f0:	08 f0       	brcs	.+2      	; 0x18f4 <GPIO_readPin+0x1c>
    18f2:	84 c0       	rjmp	.+264    	; 0x19fc <GPIO_readPin+0x124>
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	84 30       	cpi	r24, 0x04	; 4
    18f8:	08 f0       	brcs	.+2      	; 0x18fc <GPIO_readPin+0x24>
    18fa:	80 c0       	rjmp	.+256    	; 0x19fc <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	3d 83       	std	Y+5, r19	; 0x05
    1904:	2c 83       	std	Y+4, r18	; 0x04
    1906:	4c 81       	ldd	r20, Y+4	; 0x04
    1908:	5d 81       	ldd	r21, Y+5	; 0x05
    190a:	41 30       	cpi	r20, 0x01	; 1
    190c:	51 05       	cpc	r21, r1
    190e:	79 f1       	breq	.+94     	; 0x196e <GPIO_readPin+0x96>
    1910:	8c 81       	ldd	r24, Y+4	; 0x04
    1912:	9d 81       	ldd	r25, Y+5	; 0x05
    1914:	82 30       	cpi	r24, 0x02	; 2
    1916:	91 05       	cpc	r25, r1
    1918:	34 f4       	brge	.+12     	; 0x1926 <GPIO_readPin+0x4e>
    191a:	2c 81       	ldd	r18, Y+4	; 0x04
    191c:	3d 81       	ldd	r19, Y+5	; 0x05
    191e:	21 15       	cp	r18, r1
    1920:	31 05       	cpc	r19, r1
    1922:	69 f0       	breq	.+26     	; 0x193e <GPIO_readPin+0x66>
    1924:	6b c0       	rjmp	.+214    	; 0x19fc <GPIO_readPin+0x124>
    1926:	4c 81       	ldd	r20, Y+4	; 0x04
    1928:	5d 81       	ldd	r21, Y+5	; 0x05
    192a:	42 30       	cpi	r20, 0x02	; 2
    192c:	51 05       	cpc	r21, r1
    192e:	b9 f1       	breq	.+110    	; 0x199e <GPIO_readPin+0xc6>
    1930:	8c 81       	ldd	r24, Y+4	; 0x04
    1932:	9d 81       	ldd	r25, Y+5	; 0x05
    1934:	83 30       	cpi	r24, 0x03	; 3
    1936:	91 05       	cpc	r25, r1
    1938:	09 f4       	brne	.+2      	; 0x193c <GPIO_readPin+0x64>
    193a:	49 c0       	rjmp	.+146    	; 0x19ce <GPIO_readPin+0xf6>
    193c:	5f c0       	rjmp	.+190    	; 0x19fc <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    193e:	e9 e3       	ldi	r30, 0x39	; 57
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	88 2f       	mov	r24, r24
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	a9 01       	movw	r20, r18
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <GPIO_readPin+0x7e>
    1952:	55 95       	asr	r21
    1954:	47 95       	ror	r20
    1956:	8a 95       	dec	r24
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <GPIO_readPin+0x7a>
    195a:	ca 01       	movw	r24, r20
    195c:	81 70       	andi	r24, 0x01	; 1
    195e:	90 70       	andi	r25, 0x00	; 0
    1960:	88 23       	and	r24, r24
    1962:	19 f0       	breq	.+6      	; 0x196a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	89 83       	std	Y+1, r24	; 0x01
    1968:	49 c0       	rjmp	.+146    	; 0x19fc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    196a:	19 82       	std	Y+1, r1	; 0x01
    196c:	47 c0       	rjmp	.+142    	; 0x19fc <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    196e:	e6 e3       	ldi	r30, 0x36	; 54
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	88 2f       	mov	r24, r24
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	a9 01       	movw	r20, r18
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <GPIO_readPin+0xae>
    1982:	55 95       	asr	r21
    1984:	47 95       	ror	r20
    1986:	8a 95       	dec	r24
    1988:	e2 f7       	brpl	.-8      	; 0x1982 <GPIO_readPin+0xaa>
    198a:	ca 01       	movw	r24, r20
    198c:	81 70       	andi	r24, 0x01	; 1
    198e:	90 70       	andi	r25, 0x00	; 0
    1990:	88 23       	and	r24, r24
    1992:	19 f0       	breq	.+6      	; 0x199a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	89 83       	std	Y+1, r24	; 0x01
    1998:	31 c0       	rjmp	.+98     	; 0x19fc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    199a:	19 82       	std	Y+1, r1	; 0x01
    199c:	2f c0       	rjmp	.+94     	; 0x19fc <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    199e:	e3 e3       	ldi	r30, 0x33	; 51
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	28 2f       	mov	r18, r24
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	8b 81       	ldd	r24, Y+3	; 0x03
    19aa:	88 2f       	mov	r24, r24
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	a9 01       	movw	r20, r18
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <GPIO_readPin+0xde>
    19b2:	55 95       	asr	r21
    19b4:	47 95       	ror	r20
    19b6:	8a 95       	dec	r24
    19b8:	e2 f7       	brpl	.-8      	; 0x19b2 <GPIO_readPin+0xda>
    19ba:	ca 01       	movw	r24, r20
    19bc:	81 70       	andi	r24, 0x01	; 1
    19be:	90 70       	andi	r25, 0x00	; 0
    19c0:	88 23       	and	r24, r24
    19c2:	19 f0       	breq	.+6      	; 0x19ca <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	89 83       	std	Y+1, r24	; 0x01
    19c8:	19 c0       	rjmp	.+50     	; 0x19fc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19ca:	19 82       	std	Y+1, r1	; 0x01
    19cc:	17 c0       	rjmp	.+46     	; 0x19fc <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    19ce:	e0 e3       	ldi	r30, 0x30	; 48
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	88 2f       	mov	r24, r24
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	a9 01       	movw	r20, r18
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <GPIO_readPin+0x10e>
    19e2:	55 95       	asr	r21
    19e4:	47 95       	ror	r20
    19e6:	8a 95       	dec	r24
    19e8:	e2 f7       	brpl	.-8      	; 0x19e2 <GPIO_readPin+0x10a>
    19ea:	ca 01       	movw	r24, r20
    19ec:	81 70       	andi	r24, 0x01	; 1
    19ee:	90 70       	andi	r25, 0x00	; 0
    19f0:	88 23       	and	r24, r24
    19f2:	19 f0       	breq	.+6      	; 0x19fa <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	01 c0       	rjmp	.+2      	; 0x19fc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19fa:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <GPIO_setupPortDirection+0x6>
    1a14:	00 d0       	rcall	.+0      	; 0x1a16 <GPIO_setupPortDirection+0x8>
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	89 83       	std	Y+1, r24	; 0x01
    1a1c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	84 30       	cpi	r24, 0x04	; 4
    1a22:	90 f5       	brcc	.+100    	; 0x1a88 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	3c 83       	std	Y+4, r19	; 0x04
    1a2c:	2b 83       	std	Y+3, r18	; 0x03
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	9c 81       	ldd	r25, Y+4	; 0x04
    1a32:	81 30       	cpi	r24, 0x01	; 1
    1a34:	91 05       	cpc	r25, r1
    1a36:	d1 f0       	breq	.+52     	; 0x1a6c <GPIO_setupPortDirection+0x5e>
    1a38:	2b 81       	ldd	r18, Y+3	; 0x03
    1a3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a3c:	22 30       	cpi	r18, 0x02	; 2
    1a3e:	31 05       	cpc	r19, r1
    1a40:	2c f4       	brge	.+10     	; 0x1a4c <GPIO_setupPortDirection+0x3e>
    1a42:	8b 81       	ldd	r24, Y+3	; 0x03
    1a44:	9c 81       	ldd	r25, Y+4	; 0x04
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	61 f0       	breq	.+24     	; 0x1a62 <GPIO_setupPortDirection+0x54>
    1a4a:	1e c0       	rjmp	.+60     	; 0x1a88 <GPIO_setupPortDirection+0x7a>
    1a4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a50:	22 30       	cpi	r18, 0x02	; 2
    1a52:	31 05       	cpc	r19, r1
    1a54:	81 f0       	breq	.+32     	; 0x1a76 <GPIO_setupPortDirection+0x68>
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5a:	83 30       	cpi	r24, 0x03	; 3
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	81 f0       	breq	.+32     	; 0x1a80 <GPIO_setupPortDirection+0x72>
    1a60:	13 c0       	rjmp	.+38     	; 0x1a88 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1a62:	ea e3       	ldi	r30, 0x3A	; 58
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	80 83       	st	Z, r24
    1a6a:	0e c0       	rjmp	.+28     	; 0x1a88 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1a6c:	e7 e3       	ldi	r30, 0x37	; 55
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	8a 81       	ldd	r24, Y+2	; 0x02
    1a72:	80 83       	st	Z, r24
    1a74:	09 c0       	rjmp	.+18     	; 0x1a88 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1a76:	e4 e3       	ldi	r30, 0x34	; 52
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	80 83       	st	Z, r24
    1a7e:	04 c0       	rjmp	.+8      	; 0x1a88 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1a80:	e1 e3       	ldi	r30, 0x31	; 49
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	8a 81       	ldd	r24, Y+2	; 0x02
    1a86:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	00 d0       	rcall	.+0      	; 0x1a9c <GPIO_writePort+0x6>
    1a9c:	00 d0       	rcall	.+0      	; 0x1a9e <GPIO_writePort+0x8>
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	89 83       	std	Y+1, r24	; 0x01
    1aa4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	84 30       	cpi	r24, 0x04	; 4
    1aaa:	90 f5       	brcc	.+100    	; 0x1b10 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1aac:	89 81       	ldd	r24, Y+1	; 0x01
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	3c 83       	std	Y+4, r19	; 0x04
    1ab4:	2b 83       	std	Y+3, r18	; 0x03
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	81 30       	cpi	r24, 0x01	; 1
    1abc:	91 05       	cpc	r25, r1
    1abe:	d1 f0       	breq	.+52     	; 0x1af4 <GPIO_writePort+0x5e>
    1ac0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac4:	22 30       	cpi	r18, 0x02	; 2
    1ac6:	31 05       	cpc	r19, r1
    1ac8:	2c f4       	brge	.+10     	; 0x1ad4 <GPIO_writePort+0x3e>
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ace:	00 97       	sbiw	r24, 0x00	; 0
    1ad0:	61 f0       	breq	.+24     	; 0x1aea <GPIO_writePort+0x54>
    1ad2:	1e c0       	rjmp	.+60     	; 0x1b10 <GPIO_writePort+0x7a>
    1ad4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad8:	22 30       	cpi	r18, 0x02	; 2
    1ada:	31 05       	cpc	r19, r1
    1adc:	81 f0       	breq	.+32     	; 0x1afe <GPIO_writePort+0x68>
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae2:	83 30       	cpi	r24, 0x03	; 3
    1ae4:	91 05       	cpc	r25, r1
    1ae6:	81 f0       	breq	.+32     	; 0x1b08 <GPIO_writePort+0x72>
    1ae8:	13 c0       	rjmp	.+38     	; 0x1b10 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1aea:	eb e3       	ldi	r30, 0x3B	; 59
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	80 83       	st	Z, r24
    1af2:	0e c0       	rjmp	.+28     	; 0x1b10 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1af4:	e8 e3       	ldi	r30, 0x38	; 56
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	80 83       	st	Z, r24
    1afc:	09 c0       	rjmp	.+18     	; 0x1b10 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1afe:	e5 e3       	ldi	r30, 0x35	; 53
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	80 83       	st	Z, r24
    1b06:	04 c0       	rjmp	.+8      	; 0x1b10 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1b08:	e2 e3       	ldi	r30, 0x32	; 50
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	cf 91       	pop	r28
    1b1a:	df 91       	pop	r29
    1b1c:	08 95       	ret

00001b1e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1b1e:	df 93       	push	r29
    1b20:	cf 93       	push	r28
    1b22:	00 d0       	rcall	.+0      	; 0x1b24 <GPIO_readPort+0x6>
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <GPIO_readPort+0x8>
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
    1b2a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1b2c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	84 30       	cpi	r24, 0x04	; 4
    1b32:	90 f5       	brcc	.+100    	; 0x1b98 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1b34:	8a 81       	ldd	r24, Y+2	; 0x02
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	3c 83       	std	Y+4, r19	; 0x04
    1b3c:	2b 83       	std	Y+3, r18	; 0x03
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	9c 81       	ldd	r25, Y+4	; 0x04
    1b42:	81 30       	cpi	r24, 0x01	; 1
    1b44:	91 05       	cpc	r25, r1
    1b46:	d1 f0       	breq	.+52     	; 0x1b7c <GPIO_readPort+0x5e>
    1b48:	2b 81       	ldd	r18, Y+3	; 0x03
    1b4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b4c:	22 30       	cpi	r18, 0x02	; 2
    1b4e:	31 05       	cpc	r19, r1
    1b50:	2c f4       	brge	.+10     	; 0x1b5c <GPIO_readPort+0x3e>
    1b52:	8b 81       	ldd	r24, Y+3	; 0x03
    1b54:	9c 81       	ldd	r25, Y+4	; 0x04
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	61 f0       	breq	.+24     	; 0x1b72 <GPIO_readPort+0x54>
    1b5a:	1e c0       	rjmp	.+60     	; 0x1b98 <GPIO_readPort+0x7a>
    1b5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b60:	22 30       	cpi	r18, 0x02	; 2
    1b62:	31 05       	cpc	r19, r1
    1b64:	81 f0       	breq	.+32     	; 0x1b86 <GPIO_readPort+0x68>
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6a:	83 30       	cpi	r24, 0x03	; 3
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	81 f0       	breq	.+32     	; 0x1b90 <GPIO_readPort+0x72>
    1b70:	13 c0       	rjmp	.+38     	; 0x1b98 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1b72:	e9 e3       	ldi	r30, 0x39	; 57
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	89 83       	std	Y+1, r24	; 0x01
    1b7a:	0e c0       	rjmp	.+28     	; 0x1b98 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1b7c:	e6 e3       	ldi	r30, 0x36	; 54
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	89 83       	std	Y+1, r24	; 0x01
    1b84:	09 c0       	rjmp	.+18     	; 0x1b98 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1b86:	e3 e3       	ldi	r30, 0x33	; 51
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	89 83       	std	Y+1, r24	; 0x01
    1b8e:	04 c0       	rjmp	.+8      	; 0x1b98 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1b90:	e0 e3       	ldi	r30, 0x30	; 48
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	cf 91       	pop	r28
    1ba4:	df 91       	pop	r29
    1ba6:	08 95       	ret

00001ba8 <__vector_8>:
	}
}
#elif (Timer_number ==1)

ISR(TIMER1_OVF_vect)
{
    1ba8:	1f 92       	push	r1
    1baa:	0f 92       	push	r0
    1bac:	0f b6       	in	r0, 0x3f	; 63
    1bae:	0f 92       	push	r0
    1bb0:	11 24       	eor	r1, r1
    1bb2:	2f 93       	push	r18
    1bb4:	3f 93       	push	r19
    1bb6:	4f 93       	push	r20
    1bb8:	5f 93       	push	r21
    1bba:	6f 93       	push	r22
    1bbc:	7f 93       	push	r23
    1bbe:	8f 93       	push	r24
    1bc0:	9f 93       	push	r25
    1bc2:	af 93       	push	r26
    1bc4:	bf 93       	push	r27
    1bc6:	ef 93       	push	r30
    1bc8:	ff 93       	push	r31
    1bca:	df 93       	push	r29
    1bcc:	cf 93       	push	r28
    1bce:	cd b7       	in	r28, 0x3d	; 61
    1bd0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackTimerPtr != NULL_PTR)
    1bd2:	80 91 8f 00 	lds	r24, 0x008F
    1bd6:	90 91 90 00 	lds	r25, 0x0090
    1bda:	00 97       	sbiw	r24, 0x00	; 0
    1bdc:	29 f0       	breq	.+10     	; 0x1be8 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackTimerPtr)();
    1bde:	e0 91 8f 00 	lds	r30, 0x008F
    1be2:	f0 91 90 00 	lds	r31, 0x0090
    1be6:	09 95       	icall
	}
}
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	ff 91       	pop	r31
    1bee:	ef 91       	pop	r30
    1bf0:	bf 91       	pop	r27
    1bf2:	af 91       	pop	r26
    1bf4:	9f 91       	pop	r25
    1bf6:	8f 91       	pop	r24
    1bf8:	7f 91       	pop	r23
    1bfa:	6f 91       	pop	r22
    1bfc:	5f 91       	pop	r21
    1bfe:	4f 91       	pop	r20
    1c00:	3f 91       	pop	r19
    1c02:	2f 91       	pop	r18
    1c04:	0f 90       	pop	r0
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	0f 90       	pop	r0
    1c0a:	1f 90       	pop	r1
    1c0c:	18 95       	reti

00001c0e <__vector_6>:
#if(Timer_channel ==0)
ISR(TIMER1_COMPA_vect)
{
    1c0e:	1f 92       	push	r1
    1c10:	0f 92       	push	r0
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	0f 92       	push	r0
    1c16:	11 24       	eor	r1, r1
    1c18:	2f 93       	push	r18
    1c1a:	3f 93       	push	r19
    1c1c:	4f 93       	push	r20
    1c1e:	5f 93       	push	r21
    1c20:	6f 93       	push	r22
    1c22:	7f 93       	push	r23
    1c24:	8f 93       	push	r24
    1c26:	9f 93       	push	r25
    1c28:	af 93       	push	r26
    1c2a:	bf 93       	push	r27
    1c2c:	ef 93       	push	r30
    1c2e:	ff 93       	push	r31
    1c30:	df 93       	push	r29
    1c32:	cf 93       	push	r28
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackTimerPtr != NULL_PTR)
    1c38:	80 91 8f 00 	lds	r24, 0x008F
    1c3c:	90 91 90 00 	lds	r25, 0x0090
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	29 f0       	breq	.+10     	; 0x1c4e <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackTimerPtr)();
    1c44:	e0 91 8f 00 	lds	r30, 0x008F
    1c48:	f0 91 90 00 	lds	r31, 0x0090
    1c4c:	09 95       	icall
	}
}
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	ff 91       	pop	r31
    1c54:	ef 91       	pop	r30
    1c56:	bf 91       	pop	r27
    1c58:	af 91       	pop	r26
    1c5a:	9f 91       	pop	r25
    1c5c:	8f 91       	pop	r24
    1c5e:	7f 91       	pop	r23
    1c60:	6f 91       	pop	r22
    1c62:	5f 91       	pop	r21
    1c64:	4f 91       	pop	r20
    1c66:	3f 91       	pop	r19
    1c68:	2f 91       	pop	r18
    1c6a:	0f 90       	pop	r0
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	0f 90       	pop	r0
    1c70:	1f 90       	pop	r1
    1c72:	18 95       	reti

00001c74 <Timer_init>:
	OCR0=Config_Ptr->compareValue ;

}
#elif(Timer_number == 1)
#if (Timer_channel ==0)
void Timer_init(const Timer_ConfigType *Config_Ptr) {
    1c74:	df 93       	push	r29
    1c76:	cf 93       	push	r28
    1c78:	00 d0       	rcall	.+0      	; 0x1c7a <Timer_init+0x6>
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	9a 83       	std	Y+2, r25	; 0x02
    1c80:	89 83       	std	Y+1, r24	; 0x01

	/* Normal port operation, OC1A disconnected */
	TCCR1A &= 0x30 ;
    1c82:	af e4       	ldi	r26, 0x4F	; 79
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	ef e4       	ldi	r30, 0x4F	; 79
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	80 73       	andi	r24, 0x30	; 48
    1c8e:	8c 93       	st	X, r24
	/*NON PWM MODE */
	SET_BIT(TCCR1A,FOC1A) ;
    1c90:	af e4       	ldi	r26, 0x4F	; 79
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	ef e4       	ldi	r30, 0x4F	; 79
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
    1c9a:	88 60       	ori	r24, 0x08	; 8
    1c9c:	8c 93       	st	X, r24
	/*insert the required mode (overflow or compare)
	 * in WGM12 and WGM13 bits in TCCR1B Register
	 */
	CLEAR_BIT(TCCR1B,WGM13) ;
    1c9e:	ae e4       	ldi	r26, 0x4E	; 78
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	ee e4       	ldi	r30, 0x4E	; 78
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	8f 7e       	andi	r24, 0xEF	; 239
    1caa:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xF7) | ((Config_Ptr->mode)<<2);
    1cac:	ae e4       	ldi	r26, 0x4E	; 78
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	ee e4       	ldi	r30, 0x4E	; 78
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	27 7f       	andi	r18, 0xF7	; 247
    1cba:	e9 81       	ldd	r30, Y+1	; 0x01
    1cbc:	fa 81       	ldd	r31, Y+2	; 0x02
    1cbe:	81 81       	ldd	r24, Z+1	; 0x01
    1cc0:	88 2f       	mov	r24, r24
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	82 2b       	or	r24, r18
    1cce:	8c 93       	st	X, r24
	/* insert the required intIial value in TCNT1 register */
	TCNT1=Config_Ptr->initialValue ;
    1cd0:	ac e4       	ldi	r26, 0x4C	; 76
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd8:	83 81       	ldd	r24, Z+3	; 0x03
    1cda:	94 81       	ldd	r25, Z+4	; 0x04
    1cdc:	11 96       	adiw	r26, 0x01	; 1
    1cde:	9c 93       	st	X, r25
    1ce0:	8e 93       	st	-X, r24

	/* Insert the mode of interrupt (enable/disable)*/
	TIMSK = (TIMSK & ~(1<<(2+(Config_Ptr->mode)))) | ((Config_Ptr->interruptMode)<<(2+(Config_Ptr->mode))) ;
    1ce2:	a9 e5       	ldi	r26, 0x59	; 89
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e9 e5       	ldi	r30, 0x59	; 89
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	48 2f       	mov	r20, r24
    1cee:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf0:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf2:	81 81       	ldd	r24, Z+1	; 0x01
    1cf4:	88 2f       	mov	r24, r24
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	9c 01       	movw	r18, r24
    1cfa:	2e 5f       	subi	r18, 0xFE	; 254
    1cfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <Timer_init+0x94>
    1d04:	88 0f       	add	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	2a 95       	dec	r18
    1d0a:	e2 f7       	brpl	.-8      	; 0x1d04 <Timer_init+0x90>
    1d0c:	80 95       	com	r24
    1d0e:	48 23       	and	r20, r24
    1d10:	e9 81       	ldd	r30, Y+1	; 0x01
    1d12:	fa 81       	ldd	r31, Y+2	; 0x02
    1d14:	82 81       	ldd	r24, Z+2	; 0x02
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d1e:	81 81       	ldd	r24, Z+1	; 0x01
    1d20:	88 2f       	mov	r24, r24
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	02 96       	adiw	r24, 0x02	; 2
    1d26:	b9 01       	movw	r22, r18
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <Timer_init+0xba>
    1d2a:	66 0f       	add	r22, r22
    1d2c:	77 1f       	adc	r23, r23
    1d2e:	8a 95       	dec	r24
    1d30:	e2 f7       	brpl	.-8      	; 0x1d2a <Timer_init+0xb6>
    1d32:	cb 01       	movw	r24, r22
    1d34:	84 2b       	or	r24, r20
    1d36:	8c 93       	st	X, r24
	 /* insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    1d38:	ae e4       	ldi	r26, 0x4E	; 78
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	ee e4       	ldi	r30, 0x4E	; 78
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	98 2f       	mov	r25, r24
    1d44:	98 7f       	andi	r25, 0xF8	; 248
    1d46:	e9 81       	ldd	r30, Y+1	; 0x01
    1d48:	fa 81       	ldd	r31, Y+2	; 0x02
    1d4a:	80 81       	ld	r24, Z
    1d4c:	89 2b       	or	r24, r25
    1d4e:	8c 93       	st	X, r24

	/* insert the required compare value in OCR1A register */

	OCR1A=Config_Ptr->compareValue ;
    1d50:	aa e4       	ldi	r26, 0x4A	; 74
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	e9 81       	ldd	r30, Y+1	; 0x01
    1d56:	fa 81       	ldd	r31, Y+2	; 0x02
    1d58:	85 81       	ldd	r24, Z+5	; 0x05
    1d5a:	96 81       	ldd	r25, Z+6	; 0x06
    1d5c:	11 96       	adiw	r26, 0x01	; 1
    1d5e:	9c 93       	st	X, r25
    1d60:	8e 93       	st	-X, r24

}
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	cf 91       	pop	r28
    1d68:	df 91       	pop	r29
    1d6a:	08 95       	ret

00001d6c <Timer_getTimerValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 Timer_getTimerValue(void)
{
    1d6c:	df 93       	push	r29
    1d6e:	cf 93       	push	r28
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    1d74:	ec e4       	ldi	r30, 0x4C	; 76
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	91 81       	ldd	r25, Z+1	; 0x01
}
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <Timer_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void Timer_clearTimerValue(void)
{
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1d8a:	ec e4       	ldi	r30, 0x4C	; 76
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	11 82       	std	Z+1, r1	; 0x01
    1d90:	10 82       	st	Z, r1
}
    1d92:	cf 91       	pop	r28
    1d94:	df 91       	pop	r29
    1d96:	08 95       	ret

00001d98 <Timer_DeInit>:

/*
 * Description: Function to disable the Timer1
 */
void Timer_DeInit(void)
{
    1d98:	df 93       	push	r29
    1d9a:	cf 93       	push	r28
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    1da0:	ef e4       	ldi	r30, 0x4F	; 79
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	10 82       	st	Z, r1
	TCCR1B = 0;
    1da6:	ee e4       	ldi	r30, 0x4E	; 78
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	10 82       	st	Z, r1
	TCNT1 = 0;
    1dac:	ec e4       	ldi	r30, 0x4C	; 76
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	11 82       	std	Z+1, r1	; 0x01
    1db2:	10 82       	st	Z, r1
	OCR1A = 0 ;
    1db4:	ea e4       	ldi	r30, 0x4A	; 74
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	11 82       	std	Z+1, r1	; 0x01
    1dba:	10 82       	st	Z, r1
	OCR1B = 0 ;
    1dbc:	e8 e4       	ldi	r30, 0x48	; 72
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	11 82       	std	Z+1, r1	; 0x01
    1dc2:	10 82       	st	Z, r1


}
    1dc4:	cf 91       	pop	r28
    1dc6:	df 91       	pop	r29
    1dc8:	08 95       	ret

00001dca <Timer_setCallBack>:
/*
 * Description: Function to set the Call Back function address.
 */
void Timer_setCallBack( void(*aTimer_ptr)(void))
{
    1dca:	df 93       	push	r29
    1dcc:	cf 93       	push	r28
    1dce:	00 d0       	rcall	.+0      	; 0x1dd0 <Timer_setCallBack+0x6>
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	9a 83       	std	Y+2, r25	; 0x02
    1dd6:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackTimerPtr = aTimer_ptr;
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	9a 81       	ldd	r25, Y+2	; 0x02
    1ddc:	90 93 90 00 	sts	0x0090, r25
    1de0:	80 93 8f 00 	sts	0x008F, r24
}
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	cf 91       	pop	r28
    1dea:	df 91       	pop	r29
    1dec:	08 95       	ret

00001dee <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const I2c_ConfigType *Config_ptr)
{
    1dee:	df 93       	push	r29
    1df0:	cf 93       	push	r28
    1df2:	00 d0       	rcall	.+0      	; 0x1df4 <TWI_init+0x6>
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
    1df8:	9a 83       	std	Y+2, r25	; 0x02
    1dfa:	89 83       	std	Y+1, r24	; 0x01
	/* Bit Rate insertion */
	TWBR = (Config_ptr->bitRate);
    1dfc:	a0 e2       	ldi	r26, 0x20	; 32
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e9 81       	ldd	r30, Y+1	; 0x01
    1e02:	fa 81       	ldd	r31, Y+2	; 0x02
    1e04:	80 81       	ld	r24, Z
    1e06:	8c 93       	st	X, r24
	/*TWPS=00 */
	TWSR = 0x00;
    1e08:	e1 e2       	ldi	r30, 0x21	; 33
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	10 82       	st	Z, r1
	/* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
	       General Call Recognition: Off */
	TWAR = (Config_ptr->slaveAddress);
    1e0e:	a2 e2       	ldi	r26, 0x22	; 34
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	e9 81       	ldd	r30, Y+1	; 0x01
    1e14:	fa 81       	ldd	r31, Y+2	; 0x02
    1e16:	81 81       	ldd	r24, Z+1	; 0x01
    1e18:	8c 93       	st	X, r24
	TWCR = (1<<TWEN); /* enable TWI */
    1e1a:	e6 e5       	ldi	r30, 0x56	; 86
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	84 e0       	ldi	r24, 0x04	; 4
    1e20:	80 83       	st	Z, r24
}
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	08 95       	ret

00001e2c <TWI_start>:

void TWI_start(void)
{
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1e34:	e6 e5       	ldi	r30, 0x56	; 86
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	84 ea       	ldi	r24, 0xA4	; 164
    1e3a:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1e3c:	e6 e5       	ldi	r30, 0x56	; 86
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	88 23       	and	r24, r24
    1e44:	dc f7       	brge	.-10     	; 0x1e3c <TWI_start+0x10>
}
    1e46:	cf 91       	pop	r28
    1e48:	df 91       	pop	r29
    1e4a:	08 95       	ret

00001e4c <TWI_stop>:

void TWI_stop(void)
{
    1e4c:	df 93       	push	r29
    1e4e:	cf 93       	push	r28
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1e54:	e6 e5       	ldi	r30, 0x56	; 86
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	84 e9       	ldi	r24, 0x94	; 148
    1e5a:	80 83       	st	Z, r24
}
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	0f 92       	push	r0
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1e6e:	e3 e2       	ldi	r30, 0x23	; 35
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1e76:	e6 e5       	ldi	r30, 0x56	; 86
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	84 e8       	ldi	r24, 0x84	; 132
    1e7c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1e7e:	e6 e5       	ldi	r30, 0x56	; 86
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	88 23       	and	r24, r24
    1e86:	dc f7       	brge	.-10     	; 0x1e7e <TWI_writeByte+0x1c>
}
    1e88:	0f 90       	pop	r0
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1e98:	e6 e5       	ldi	r30, 0x56	; 86
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	84 ec       	ldi	r24, 0xC4	; 196
    1e9e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1ea0:	e6 e5       	ldi	r30, 0x56	; 86
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	88 23       	and	r24, r24
    1ea8:	dc f7       	brge	.-10     	; 0x1ea0 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1eaa:	e3 e2       	ldi	r30, 0x23	; 35
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
}
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1ebe:	e6 e5       	ldi	r30, 0x56	; 86
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	84 e8       	ldi	r24, 0x84	; 132
    1ec4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1ec6:	e6 e5       	ldi	r30, 0x56	; 86
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	88 23       	and	r24, r24
    1ece:	dc f7       	brge	.-10     	; 0x1ec6 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1ed0:	e3 e2       	ldi	r30, 0x23	; 35
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
}
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	08 95       	ret

00001edc <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1edc:	df 93       	push	r29
    1ede:	cf 93       	push	r28
    1ee0:	0f 92       	push	r0
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1ee6:	e1 e2       	ldi	r30, 0x21	; 33
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	88 7f       	andi	r24, 0xF8	; 248
    1eee:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ef2:	0f 90       	pop	r0
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <ISR>:
//#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 8UL))) - 1)

/*******************************************************************************
 *                                ISR                                    *
 *******************************************************************************/
ISR(USART_RXC_vect) {
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <ISR+0x6>
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <ISR+0x8>
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    1f06:	9a 83       	std	Y+2, r25	; 0x02
    1f08:	89 83       	std	Y+1, r24	; 0x01
	g_recievedValue =UDR ;
    1f0a:	ec e2       	ldi	r30, 0x2C	; 44
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	80 93 8d 00 	sts	0x008D, r24
	g_recievedFlag =1 ;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	80 93 8e 00 	sts	0x008E, r24

}
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	0f 90       	pop	r0
    1f22:	cf 91       	pop	r28
    1f24:	df 91       	pop	r29
    1f26:	08 95       	ret

00001f28 <UART_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(const UART_ConfigType *Config_ptr)
{
    1f28:	0f 93       	push	r16
    1f2a:	1f 93       	push	r17
    1f2c:	df 93       	push	r29
    1f2e:	cf 93       	push	r28
    1f30:	00 d0       	rcall	.+0      	; 0x1f32 <UART_init+0xa>
    1f32:	00 d0       	rcall	.+0      	; 0x1f34 <UART_init+0xc>
    1f34:	00 d0       	rcall	.+0      	; 0x1f36 <UART_init+0xe>
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	9e 83       	std	Y+6, r25	; 0x06
    1f3c:	8d 83       	std	Y+5, r24	; 0x05
	uint32 USART_BAUDRATE=(Config_ptr->baudRate ) ;
    1f3e:	ed 81       	ldd	r30, Y+5	; 0x05
    1f40:	fe 81       	ldd	r31, Y+6	; 0x06
    1f42:	83 81       	ldd	r24, Z+3	; 0x03
    1f44:	94 81       	ldd	r25, Z+4	; 0x04
    1f46:	a5 81       	ldd	r26, Z+5	; 0x05
    1f48:	b6 81       	ldd	r27, Z+6	; 0x06
    1f4a:	89 83       	std	Y+1, r24	; 0x01
    1f4c:	9a 83       	std	Y+2, r25	; 0x02
    1f4e:	ab 83       	std	Y+3, r26	; 0x03
    1f50:	bc 83       	std	Y+4, r27	; 0x04
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1f52:	eb e2       	ldi	r30, 0x2B	; 43
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	82 e0       	ldi	r24, 0x02	; 2
    1f58:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 =0 FOR (5,6,7,8)BIT DATE MODES
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN)  | (1<<RXCIE);
    1f5a:	ea e2       	ldi	r30, 0x2A	; 42
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	88 e9       	ldi	r24, 0x98	; 152
    1f60:	80 83       	st	Z, r24
	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    1f62:	e0 e4       	ldi	r30, 0x40	; 64
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	86 e8       	ldi	r24, 0x86	; 134
    1f68:	80 83       	st	Z, r24
	/* UCSZ1:0 = 11 For number of data mode */
	UCSRC =(0XFC &UCSRC) |(Config_ptr->dataBits) ;
    1f6a:	a0 e4       	ldi	r26, 0x40	; 64
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	e0 e4       	ldi	r30, 0x40	; 64
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	98 2f       	mov	r25, r24
    1f76:	9c 7f       	andi	r25, 0xFC	; 252
    1f78:	ed 81       	ldd	r30, Y+5	; 0x05
    1f7a:	fe 81       	ldd	r31, Y+6	; 0x06
    1f7c:	80 81       	ld	r24, Z
    1f7e:	89 2b       	or	r24, r25
    1f80:	8c 93       	st	X, r24
	/* UPM1:0  = 00 Disable parity bit */
	UCSRC =(0XCF &UCSRC) |((Config_ptr->parityBits)<<4) ;
    1f82:	a0 e4       	ldi	r26, 0x40	; 64
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	e0 e4       	ldi	r30, 0x40	; 64
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	28 2f       	mov	r18, r24
    1f8e:	2f 7c       	andi	r18, 0xCF	; 207
    1f90:	ed 81       	ldd	r30, Y+5	; 0x05
    1f92:	fe 81       	ldd	r31, Y+6	; 0x06
    1f94:	82 81       	ldd	r24, Z+2	; 0x02
    1f96:	88 2f       	mov	r24, r24
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	82 95       	swap	r24
    1f9c:	92 95       	swap	r25
    1f9e:	90 7f       	andi	r25, 0xF0	; 240
    1fa0:	98 27       	eor	r25, r24
    1fa2:	80 7f       	andi	r24, 0xF0	; 240
    1fa4:	98 27       	eor	r25, r24
    1fa6:	82 2b       	or	r24, r18
    1fa8:	8c 93       	st	X, r24
	/* USBS    = 0 One stop bit
	 * */
	UCSRC =(0XF7 &UCSRC) |((Config_ptr->stopBits)<<3) ;
    1faa:	a0 e4       	ldi	r26, 0x40	; 64
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	e0 e4       	ldi	r30, 0x40	; 64
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	28 2f       	mov	r18, r24
    1fb6:	27 7f       	andi	r18, 0xF7	; 247
    1fb8:	ed 81       	ldd	r30, Y+5	; 0x05
    1fba:	fe 81       	ldd	r31, Y+6	; 0x06
    1fbc:	81 81       	ldd	r24, Z+1	; 0x01
    1fbe:	88 2f       	mov	r24, r24
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	88 0f       	add	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	88 0f       	add	r24, r24
    1fc8:	99 1f       	adc	r25, r25
    1fca:	88 0f       	add	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	82 2b       	or	r24, r18
    1fd0:	8c 93       	st	X, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	//UBRRH = BAUD_PRESCALE>>8;
	//UBRRL = BAUD_PRESCALE;
	UBRRH = ((((F_CPU / (USART_BAUDRATE * 8UL))) - 1)>>8) ;
    1fd2:	00 e4       	ldi	r16, 0x40	; 64
    1fd4:	10 e0       	ldi	r17, 0x00	; 0
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fda:	ab 81       	ldd	r26, Y+3	; 0x03
    1fdc:	bc 81       	ldd	r27, Y+4	; 0x04
    1fde:	88 0f       	add	r24, r24
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	aa 1f       	adc	r26, r26
    1fe4:	bb 1f       	adc	r27, r27
    1fe6:	88 0f       	add	r24, r24
    1fe8:	99 1f       	adc	r25, r25
    1fea:	aa 1f       	adc	r26, r26
    1fec:	bb 1f       	adc	r27, r27
    1fee:	88 0f       	add	r24, r24
    1ff0:	99 1f       	adc	r25, r25
    1ff2:	aa 1f       	adc	r26, r26
    1ff4:	bb 1f       	adc	r27, r27
    1ff6:	9c 01       	movw	r18, r24
    1ff8:	ad 01       	movw	r20, r26
    1ffa:	80 e4       	ldi	r24, 0x40	; 64
    1ffc:	92 e4       	ldi	r25, 0x42	; 66
    1ffe:	af e0       	ldi	r26, 0x0F	; 15
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	bc 01       	movw	r22, r24
    2004:	cd 01       	movw	r24, r26
    2006:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__udivmodsi4>
    200a:	da 01       	movw	r26, r20
    200c:	c9 01       	movw	r24, r18
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	a1 09       	sbc	r26, r1
    2012:	b1 09       	sbc	r27, r1
    2014:	89 2f       	mov	r24, r25
    2016:	9a 2f       	mov	r25, r26
    2018:	ab 2f       	mov	r26, r27
    201a:	bb 27       	eor	r27, r27
    201c:	f8 01       	movw	r30, r16
    201e:	80 83       	st	Z, r24
	UBRRL = (((F_CPU / (USART_BAUDRATE * 8UL))) - 1) ;
    2020:	09 e2       	ldi	r16, 0x29	; 41
    2022:	10 e0       	ldi	r17, 0x00	; 0
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	9a 81       	ldd	r25, Y+2	; 0x02
    2028:	ab 81       	ldd	r26, Y+3	; 0x03
    202a:	bc 81       	ldd	r27, Y+4	; 0x04
    202c:	88 0f       	add	r24, r24
    202e:	99 1f       	adc	r25, r25
    2030:	aa 1f       	adc	r26, r26
    2032:	bb 1f       	adc	r27, r27
    2034:	88 0f       	add	r24, r24
    2036:	99 1f       	adc	r25, r25
    2038:	aa 1f       	adc	r26, r26
    203a:	bb 1f       	adc	r27, r27
    203c:	88 0f       	add	r24, r24
    203e:	99 1f       	adc	r25, r25
    2040:	aa 1f       	adc	r26, r26
    2042:	bb 1f       	adc	r27, r27
    2044:	9c 01       	movw	r18, r24
    2046:	ad 01       	movw	r20, r26
    2048:	80 e4       	ldi	r24, 0x40	; 64
    204a:	92 e4       	ldi	r25, 0x42	; 66
    204c:	af e0       	ldi	r26, 0x0F	; 15
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	bc 01       	movw	r22, r24
    2052:	cd 01       	movw	r24, r26
    2054:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__udivmodsi4>
    2058:	da 01       	movw	r26, r20
    205a:	c9 01       	movw	r24, r18
    205c:	81 50       	subi	r24, 0x01	; 1
    205e:	f8 01       	movw	r30, r16
    2060:	80 83       	st	Z, r24
}
    2062:	26 96       	adiw	r28, 0x06	; 6
    2064:	0f b6       	in	r0, 0x3f	; 63
    2066:	f8 94       	cli
    2068:	de bf       	out	0x3e, r29	; 62
    206a:	0f be       	out	0x3f, r0	; 63
    206c:	cd bf       	out	0x3d, r28	; 61
    206e:	cf 91       	pop	r28
    2070:	df 91       	pop	r29
    2072:	1f 91       	pop	r17
    2074:	0f 91       	pop	r16
    2076:	08 95       	ret

00002078 <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	0f 92       	push	r0
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
    2082:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2084:	eb e2       	ldi	r30, 0x2B	; 43
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	88 2f       	mov	r24, r24
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	80 72       	andi	r24, 0x20	; 32
    2090:	90 70       	andi	r25, 0x00	; 0
    2092:	00 97       	sbiw	r24, 0x00	; 0
    2094:	b9 f3       	breq	.-18     	; 0x2084 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    2096:	ec e2       	ldi	r30, 0x2C	; 44
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    209e:	0f 90       	pop	r0
    20a0:	cf 91       	pop	r28
    20a2:	df 91       	pop	r29
    20a4:	08 95       	ret

000020a6 <UART_sendString>:


void UART_sendString(const uint8 *Str)
{
    20a6:	df 93       	push	r29
    20a8:	cf 93       	push	r28
    20aa:	00 d0       	rcall	.+0      	; 0x20ac <UART_sendString+0x6>
    20ac:	0f 92       	push	r0
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
    20b2:	9b 83       	std	Y+3, r25	; 0x03
    20b4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    20b6:	19 82       	std	Y+1, r1	; 0x01
    20b8:	0e c0       	rjmp	.+28     	; 0x20d6 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
    20bc:	28 2f       	mov	r18, r24
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	8a 81       	ldd	r24, Y+2	; 0x02
    20c2:	9b 81       	ldd	r25, Y+3	; 0x03
    20c4:	fc 01       	movw	r30, r24
    20c6:	e2 0f       	add	r30, r18
    20c8:	f3 1f       	adc	r31, r19
    20ca:	80 81       	ld	r24, Z
    20cc:	0e 94 3c 10 	call	0x2078	; 0x2078 <UART_sendByte>
		i++;
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	8f 5f       	subi	r24, 0xFF	; 255
    20d4:	89 83       	std	Y+1, r24	; 0x01


void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	28 2f       	mov	r18, r24
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	9b 81       	ldd	r25, Y+3	; 0x03
    20e0:	fc 01       	movw	r30, r24
    20e2:	e2 0f       	add	r30, r18
    20e4:	f3 1f       	adc	r31, r19
    20e6:	80 81       	ld	r24, Z
    20e8:	88 23       	and	r24, r24
    20ea:	39 f7       	brne	.-50     	; 0x20ba <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	cf 91       	pop	r28
    20f4:	df 91       	pop	r29
    20f6:	08 95       	ret

000020f8 <__udivmodsi4>:
    20f8:	a1 e2       	ldi	r26, 0x21	; 33
    20fa:	1a 2e       	mov	r1, r26
    20fc:	aa 1b       	sub	r26, r26
    20fe:	bb 1b       	sub	r27, r27
    2100:	fd 01       	movw	r30, r26
    2102:	0d c0       	rjmp	.+26     	; 0x211e <__udivmodsi4_ep>

00002104 <__udivmodsi4_loop>:
    2104:	aa 1f       	adc	r26, r26
    2106:	bb 1f       	adc	r27, r27
    2108:	ee 1f       	adc	r30, r30
    210a:	ff 1f       	adc	r31, r31
    210c:	a2 17       	cp	r26, r18
    210e:	b3 07       	cpc	r27, r19
    2110:	e4 07       	cpc	r30, r20
    2112:	f5 07       	cpc	r31, r21
    2114:	20 f0       	brcs	.+8      	; 0x211e <__udivmodsi4_ep>
    2116:	a2 1b       	sub	r26, r18
    2118:	b3 0b       	sbc	r27, r19
    211a:	e4 0b       	sbc	r30, r20
    211c:	f5 0b       	sbc	r31, r21

0000211e <__udivmodsi4_ep>:
    211e:	66 1f       	adc	r22, r22
    2120:	77 1f       	adc	r23, r23
    2122:	88 1f       	adc	r24, r24
    2124:	99 1f       	adc	r25, r25
    2126:	1a 94       	dec	r1
    2128:	69 f7       	brne	.-38     	; 0x2104 <__udivmodsi4_loop>
    212a:	60 95       	com	r22
    212c:	70 95       	com	r23
    212e:	80 95       	com	r24
    2130:	90 95       	com	r25
    2132:	9b 01       	movw	r18, r22
    2134:	ac 01       	movw	r20, r24
    2136:	bd 01       	movw	r22, r26
    2138:	cf 01       	movw	r24, r30
    213a:	08 95       	ret

0000213c <__prologue_saves__>:
    213c:	2f 92       	push	r2
    213e:	3f 92       	push	r3
    2140:	4f 92       	push	r4
    2142:	5f 92       	push	r5
    2144:	6f 92       	push	r6
    2146:	7f 92       	push	r7
    2148:	8f 92       	push	r8
    214a:	9f 92       	push	r9
    214c:	af 92       	push	r10
    214e:	bf 92       	push	r11
    2150:	cf 92       	push	r12
    2152:	df 92       	push	r13
    2154:	ef 92       	push	r14
    2156:	ff 92       	push	r15
    2158:	0f 93       	push	r16
    215a:	1f 93       	push	r17
    215c:	cf 93       	push	r28
    215e:	df 93       	push	r29
    2160:	cd b7       	in	r28, 0x3d	; 61
    2162:	de b7       	in	r29, 0x3e	; 62
    2164:	ca 1b       	sub	r28, r26
    2166:	db 0b       	sbc	r29, r27
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	f8 94       	cli
    216c:	de bf       	out	0x3e, r29	; 62
    216e:	0f be       	out	0x3f, r0	; 63
    2170:	cd bf       	out	0x3d, r28	; 61
    2172:	09 94       	ijmp

00002174 <__epilogue_restores__>:
    2174:	2a 88       	ldd	r2, Y+18	; 0x12
    2176:	39 88       	ldd	r3, Y+17	; 0x11
    2178:	48 88       	ldd	r4, Y+16	; 0x10
    217a:	5f 84       	ldd	r5, Y+15	; 0x0f
    217c:	6e 84       	ldd	r6, Y+14	; 0x0e
    217e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2180:	8c 84       	ldd	r8, Y+12	; 0x0c
    2182:	9b 84       	ldd	r9, Y+11	; 0x0b
    2184:	aa 84       	ldd	r10, Y+10	; 0x0a
    2186:	b9 84       	ldd	r11, Y+9	; 0x09
    2188:	c8 84       	ldd	r12, Y+8	; 0x08
    218a:	df 80       	ldd	r13, Y+7	; 0x07
    218c:	ee 80       	ldd	r14, Y+6	; 0x06
    218e:	fd 80       	ldd	r15, Y+5	; 0x05
    2190:	0c 81       	ldd	r16, Y+4	; 0x04
    2192:	1b 81       	ldd	r17, Y+3	; 0x03
    2194:	aa 81       	ldd	r26, Y+2	; 0x02
    2196:	b9 81       	ldd	r27, Y+1	; 0x01
    2198:	ce 0f       	add	r28, r30
    219a:	d1 1d       	adc	r29, r1
    219c:	0f b6       	in	r0, 0x3f	; 63
    219e:	f8 94       	cli
    21a0:	de bf       	out	0x3e, r29	; 62
    21a2:	0f be       	out	0x3f, r0	; 63
    21a4:	cd bf       	out	0x3d, r28	; 61
    21a6:	ed 01       	movw	r28, r26
    21a8:	08 95       	ret

000021aa <_exit>:
    21aa:	f8 94       	cli

000021ac <__stop_program>:
    21ac:	ff cf       	rjmp	.-2      	; 0x21ac <__stop_program>
