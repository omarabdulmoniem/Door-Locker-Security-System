
HMI_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008e  00800060  000029da  00002a6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000ee  008000ee  00002afc  2**0
                  ALLOC
  3 .stab         00002598  00000000  00000000  00002afc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f28  00000000  00000000  00005094  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000060fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000626c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009b50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a70b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3e       	cpi	r26, 0xEE	; 238
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae ee       	ldi	r26, 0xEE	; 238
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3f       	cpi	r26, 0xF4	; 244
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6f 14 	jmp	0x28de	; 0x28de <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae ed       	ldi	r26, 0xDE	; 222
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8b 14 	jmp	0x2916	; 0x2916 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 97 14 	jmp	0x292e	; 0x292e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 97 14 	jmp	0x292e	; 0x292e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6f 14 	jmp	0x28de	; 0x28de <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8e ed       	ldi	r24, 0xDE	; 222
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8b 14 	jmp	0x2916	; 0x2916 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 97 14 	jmp	0x292e	; 0x292e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 97 14 	jmp	0x292e	; 0x292e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 97 14 	jmp	0x292e	; 0x292e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 7f 14 	jmp	0x28fe	; 0x28fe <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
 * [Description] : A function to display the steps that is made to create
 * a new password
 */
void App_newPassword (void) ;
int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	aa 97       	sbiw	r28, 0x2a	; 42
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/* Enable interrupts by setting I-bit */
	SREG  |= (1<<7);
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24
	/* initialize UART */
	UART_ConfigType UART_Config ={EIGHT,ONE,DISABLE_PARITY,9600};
     b68:	9e 01       	movw	r18, r28
     b6a:	23 5e       	subi	r18, 0xE3	; 227
     b6c:	3f 4f       	sbci	r19, 0xFF	; 255
     b6e:	3f a3       	std	Y+39, r19	; 0x27
     b70:	2e a3       	std	Y+38, r18	; 0x26
     b72:	86 ee       	ldi	r24, 0xE6	; 230
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	99 a7       	std	Y+41, r25	; 0x29
     b78:	88 a7       	std	Y+40, r24	; 0x28
     b7a:	97 e0       	ldi	r25, 0x07	; 7
     b7c:	9a a7       	std	Y+42, r25	; 0x2a
     b7e:	e8 a5       	ldd	r30, Y+40	; 0x28
     b80:	f9 a5       	ldd	r31, Y+41	; 0x29
     b82:	00 80       	ld	r0, Z
     b84:	28 a5       	ldd	r18, Y+40	; 0x28
     b86:	39 a5       	ldd	r19, Y+41	; 0x29
     b88:	2f 5f       	subi	r18, 0xFF	; 255
     b8a:	3f 4f       	sbci	r19, 0xFF	; 255
     b8c:	39 a7       	std	Y+41, r19	; 0x29
     b8e:	28 a7       	std	Y+40, r18	; 0x28
     b90:	ee a1       	ldd	r30, Y+38	; 0x26
     b92:	ff a1       	ldd	r31, Y+39	; 0x27
     b94:	00 82       	st	Z, r0
     b96:	2e a1       	ldd	r18, Y+38	; 0x26
     b98:	3f a1       	ldd	r19, Y+39	; 0x27
     b9a:	2f 5f       	subi	r18, 0xFF	; 255
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	3f a3       	std	Y+39, r19	; 0x27
     ba0:	2e a3       	std	Y+38, r18	; 0x26
     ba2:	3a a5       	ldd	r19, Y+42	; 0x2a
     ba4:	31 50       	subi	r19, 0x01	; 1
     ba6:	3a a7       	std	Y+42, r19	; 0x2a
     ba8:	8a a5       	ldd	r24, Y+42	; 0x2a
     baa:	88 23       	and	r24, r24
     bac:	41 f7       	brne	.-48     	; 0xb7e <main+0x38>
	UART_init(&UART_Config);
     bae:	ce 01       	movw	r24, r28
     bb0:	4d 96       	adiw	r24, 0x1d	; 29
     bb2:	0e 94 65 13 	call	0x26ca	; 0x26ca <UART_init>
	/* initialize LCD */
	LCD_init();
     bb6:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <LCD_init>
	/* checking weather it's first time opening the device or there're
	 * Previously made password*/
	if(EEPROM_read(0x00F0) != notFirstTime ) {
     bba:	80 ef       	ldi	r24, 0xF0	; 240
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 76 0d 	call	0x1aec	; 0x1aec <EEPROM_read>
     bc2:	86 34       	cpi	r24, 0x46	; 70
     bc4:	41 f0       	breq	.+16     	; 0xbd6 <main+0x90>
		/* this code is executed only at first time*/
		/*set new password */
		App_newPassword() ;
     bc6:	0e 94 b1 08 	call	0x1162	; 0x1162 <App_newPassword>
		EEPROM_write(0x00F0, notFirstTime) ;
     bca:	80 ef       	ldi	r24, 0xF0	; 240
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	66 e4       	ldi	r22, 0x46	; 70
     bd0:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <EEPROM_write>
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <main+0x94>
	}
	else{
		App_mainOptions() ;
     bd6:	0e 94 08 08 	call	0x1010	; 0x1010 <App_mainOptions>
	}

	while(1)
	{
		g_enteryCount=0 ;
     bda:	10 92 f0 00 	sts	0x00F0, r1
		g_passwordEntery =0 ;
     bde:	10 92 f1 00 	sts	0x00F1, r1
		/* The program begins by switching the received data
		 * in the UDR to take action according to it */
		switch(g_recievedValue) {
     be2:	80 91 ee 00 	lds	r24, 0x00EE
     be6:	e8 2f       	mov	r30, r24
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	fd a3       	std	Y+37, r31	; 0x25
     bec:	ec a3       	std	Y+36, r30	; 0x24
     bee:	2c a1       	ldd	r18, Y+36	; 0x24
     bf0:	3d a1       	ldd	r19, Y+37	; 0x25
     bf2:	2f 34       	cpi	r18, 0x4F	; 79
     bf4:	31 05       	cpc	r19, r1
     bf6:	09 f4       	brne	.+2      	; 0xbfa <main+0xb4>
     bf8:	2d c1       	rjmp	.+602    	; 0xe54 <main+0x30e>
     bfa:	8c a1       	ldd	r24, Y+36	; 0x24
     bfc:	9d a1       	ldd	r25, Y+37	; 0x25
     bfe:	80 35       	cpi	r24, 0x50	; 80
     c00:	91 05       	cpc	r25, r1
     c02:	9c f4       	brge	.+38     	; 0xc2a <main+0xe4>
     c04:	ec a1       	ldd	r30, Y+36	; 0x24
     c06:	fd a1       	ldd	r31, Y+37	; 0x25
     c08:	e5 34       	cpi	r30, 0x45	; 69
     c0a:	f1 05       	cpc	r31, r1
     c0c:	09 f4       	brne	.+2      	; 0xc10 <main+0xca>
     c0e:	19 c1       	rjmp	.+562    	; 0xe42 <main+0x2fc>
     c10:	2c a1       	ldd	r18, Y+36	; 0x24
     c12:	3d a1       	ldd	r19, Y+37	; 0x25
     c14:	2d 34       	cpi	r18, 0x4D	; 77
     c16:	31 05       	cpc	r19, r1
     c18:	09 f4       	brne	.+2      	; 0xc1c <main+0xd6>
     c1a:	2e c1       	rjmp	.+604    	; 0xe78 <main+0x332>
     c1c:	8c a1       	ldd	r24, Y+36	; 0x24
     c1e:	9d a1       	ldd	r25, Y+37	; 0x25
     c20:	83 34       	cpi	r24, 0x43	; 67
     c22:	91 05       	cpc	r25, r1
     c24:	09 f4       	brne	.+2      	; 0xc28 <main+0xe2>
     c26:	1f c1       	rjmp	.+574    	; 0xe66 <main+0x320>
     c28:	d8 cf       	rjmp	.-80     	; 0xbda <main+0x94>
     c2a:	ec a1       	ldd	r30, Y+36	; 0x24
     c2c:	fd a1       	ldd	r31, Y+37	; 0x25
     c2e:	e5 35       	cpi	r30, 0x55	; 85
     c30:	f1 05       	cpc	r31, r1
     c32:	69 f0       	breq	.+26     	; 0xc4e <main+0x108>
     c34:	2c a1       	ldd	r18, Y+36	; 0x24
     c36:	3d a1       	ldd	r19, Y+37	; 0x25
     c38:	27 35       	cpi	r18, 0x57	; 87
     c3a:	31 05       	cpc	r19, r1
     c3c:	09 f4       	brne	.+2      	; 0xc40 <main+0xfa>
     c3e:	84 c0       	rjmp	.+264    	; 0xd48 <main+0x202>
     c40:	8c a1       	ldd	r24, Y+36	; 0x24
     c42:	9d a1       	ldd	r25, Y+37	; 0x25
     c44:	82 35       	cpi	r24, 0x52	; 82
     c46:	91 05       	cpc	r25, r1
     c48:	09 f4       	brne	.+2      	; 0xc4c <main+0x106>
     c4a:	1b c1       	rjmp	.+566    	; 0xe82 <main+0x33c>
     c4c:	c6 cf       	rjmp	.-116    	; 0xbda <main+0x94>
		case passwordsUnmatched :
			/* must clear the g_recievedValue after every
			 * switch case executed so it will not execute again */
			g_recievedValue=0;
     c4e:	10 92 ee 00 	sts	0x00EE, r1
			LCD_clearScreen();
     c52:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_clearScreen>
			LCD_displayString("Unmatched");
     c56:	80 e6       	ldi	r24, 0x60	; 96
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_displayString>
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	aa e7       	ldi	r26, 0x7A	; 122
     c64:	b4 e4       	ldi	r27, 0x44	; 68
     c66:	89 8f       	std	Y+25, r24	; 0x19
     c68:	9a 8f       	std	Y+26, r25	; 0x1a
     c6a:	ab 8f       	std	Y+27, r26	; 0x1b
     c6c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c6e:	69 8d       	ldd	r22, Y+25	; 0x19
     c70:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c72:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c74:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	4a ef       	ldi	r20, 0xFA	; 250
     c7c:	54 e4       	ldi	r21, 0x44	; 68
     c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c82:	dc 01       	movw	r26, r24
     c84:	cb 01       	movw	r24, r22
     c86:	8d 8b       	std	Y+21, r24	; 0x15
     c88:	9e 8b       	std	Y+22, r25	; 0x16
     c8a:	af 8b       	std	Y+23, r26	; 0x17
     c8c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c8e:	6d 89       	ldd	r22, Y+21	; 0x15
     c90:	7e 89       	ldd	r23, Y+22	; 0x16
     c92:	8f 89       	ldd	r24, Y+23	; 0x17
     c94:	98 8d       	ldd	r25, Y+24	; 0x18
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	40 e8       	ldi	r20, 0x80	; 128
     c9c:	5f e3       	ldi	r21, 0x3F	; 63
     c9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ca2:	88 23       	and	r24, r24
     ca4:	2c f4       	brge	.+10     	; 0xcb0 <main+0x16a>
		__ticks = 1;
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	9c 8b       	std	Y+20, r25	; 0x14
     cac:	8b 8b       	std	Y+19, r24	; 0x13
     cae:	3f c0       	rjmp	.+126    	; 0xd2e <main+0x1e8>
	else if (__tmp > 65535)
     cb0:	6d 89       	ldd	r22, Y+21	; 0x15
     cb2:	7e 89       	ldd	r23, Y+22	; 0x16
     cb4:	8f 89       	ldd	r24, Y+23	; 0x17
     cb6:	98 8d       	ldd	r25, Y+24	; 0x18
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	3f ef       	ldi	r19, 0xFF	; 255
     cbc:	4f e7       	ldi	r20, 0x7F	; 127
     cbe:	57 e4       	ldi	r21, 0x47	; 71
     cc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cc4:	18 16       	cp	r1, r24
     cc6:	4c f5       	brge	.+82     	; 0xd1a <main+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cc8:	69 8d       	ldd	r22, Y+25	; 0x19
     cca:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ccc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	40 e2       	ldi	r20, 0x20	; 32
     cd6:	51 e4       	ldi	r21, 0x41	; 65
     cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	bc 01       	movw	r22, r24
     ce2:	cd 01       	movw	r24, r26
     ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ce8:	dc 01       	movw	r26, r24
     cea:	cb 01       	movw	r24, r22
     cec:	9c 8b       	std	Y+20, r25	; 0x14
     cee:	8b 8b       	std	Y+19, r24	; 0x13
     cf0:	0f c0       	rjmp	.+30     	; 0xd10 <main+0x1ca>
     cf2:	88 ec       	ldi	r24, 0xC8	; 200
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	9a 8b       	std	Y+18, r25	; 0x12
     cf8:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cfa:	89 89       	ldd	r24, Y+17	; 0x11
     cfc:	9a 89       	ldd	r25, Y+18	; 0x12
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	f1 f7       	brne	.-4      	; 0xcfe <main+0x1b8>
     d02:	9a 8b       	std	Y+18, r25	; 0x12
     d04:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d06:	8b 89       	ldd	r24, Y+19	; 0x13
     d08:	9c 89       	ldd	r25, Y+20	; 0x14
     d0a:	01 97       	sbiw	r24, 0x01	; 1
     d0c:	9c 8b       	std	Y+20, r25	; 0x14
     d0e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d10:	8b 89       	ldd	r24, Y+19	; 0x13
     d12:	9c 89       	ldd	r25, Y+20	; 0x14
     d14:	00 97       	sbiw	r24, 0x00	; 0
     d16:	69 f7       	brne	.-38     	; 0xcf2 <main+0x1ac>
     d18:	14 c0       	rjmp	.+40     	; 0xd42 <main+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d1a:	6d 89       	ldd	r22, Y+21	; 0x15
     d1c:	7e 89       	ldd	r23, Y+22	; 0x16
     d1e:	8f 89       	ldd	r24, Y+23	; 0x17
     d20:	98 8d       	ldd	r25, Y+24	; 0x18
     d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d26:	dc 01       	movw	r26, r24
     d28:	cb 01       	movw	r24, r22
     d2a:	9c 8b       	std	Y+20, r25	; 0x14
     d2c:	8b 8b       	std	Y+19, r24	; 0x13
     d2e:	8b 89       	ldd	r24, Y+19	; 0x13
     d30:	9c 89       	ldd	r25, Y+20	; 0x14
     d32:	98 8b       	std	Y+16, r25	; 0x10
     d34:	8f 87       	std	Y+15, r24	; 0x0f
     d36:	8f 85       	ldd	r24, Y+15	; 0x0f
     d38:	98 89       	ldd	r25, Y+16	; 0x10
     d3a:	01 97       	sbiw	r24, 0x01	; 1
     d3c:	f1 f7       	brne	.-4      	; 0xd3a <main+0x1f4>
     d3e:	98 8b       	std	Y+16, r25	; 0x10
     d40:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000) ;
			App_newPassword() ;
     d42:	0e 94 b1 08 	call	0x1162	; 0x1162 <App_newPassword>
     d46:	49 cf       	rjmp	.-366    	; 0xbda <main+0x94>
			break ;
		case wrogPassword :
			g_recievedValue=0;
     d48:	10 92 ee 00 	sts	0x00EE, r1
			LCD_clearScreen();
     d4c:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_clearScreen>
			LCD_displayString("Wrong");
     d50:	8a e6       	ldi	r24, 0x6A	; 106
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_displayString>
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	aa e7       	ldi	r26, 0x7A	; 122
     d5e:	b4 e4       	ldi	r27, 0x44	; 68
     d60:	8b 87       	std	Y+11, r24	; 0x0b
     d62:	9c 87       	std	Y+12, r25	; 0x0c
     d64:	ad 87       	std	Y+13, r26	; 0x0d
     d66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d68:	6b 85       	ldd	r22, Y+11	; 0x0b
     d6a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	4a ef       	ldi	r20, 0xFA	; 250
     d76:	54 e4       	ldi	r21, 0x44	; 68
     d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	8f 83       	std	Y+7, r24	; 0x07
     d82:	98 87       	std	Y+8, r25	; 0x08
     d84:	a9 87       	std	Y+9, r26	; 0x09
     d86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d88:	6f 81       	ldd	r22, Y+7	; 0x07
     d8a:	78 85       	ldd	r23, Y+8	; 0x08
     d8c:	89 85       	ldd	r24, Y+9	; 0x09
     d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	40 e8       	ldi	r20, 0x80	; 128
     d96:	5f e3       	ldi	r21, 0x3F	; 63
     d98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d9c:	88 23       	and	r24, r24
     d9e:	2c f4       	brge	.+10     	; 0xdaa <main+0x264>
		__ticks = 1;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	9e 83       	std	Y+6, r25	; 0x06
     da6:	8d 83       	std	Y+5, r24	; 0x05
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <main+0x2e2>
	else if (__tmp > 65535)
     daa:	6f 81       	ldd	r22, Y+7	; 0x07
     dac:	78 85       	ldd	r23, Y+8	; 0x08
     dae:	89 85       	ldd	r24, Y+9	; 0x09
     db0:	9a 85       	ldd	r25, Y+10	; 0x0a
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	3f ef       	ldi	r19, 0xFF	; 255
     db6:	4f e7       	ldi	r20, 0x7F	; 127
     db8:	57 e4       	ldi	r21, 0x47	; 71
     dba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dbe:	18 16       	cp	r1, r24
     dc0:	4c f5       	brge	.+82     	; 0xe14 <main+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dc2:	6b 85       	ldd	r22, Y+11	; 0x0b
     dc4:	7c 85       	ldd	r23, Y+12	; 0x0c
     dc6:	8d 85       	ldd	r24, Y+13	; 0x0d
     dc8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 e2       	ldi	r20, 0x20	; 32
     dd0:	51 e4       	ldi	r21, 0x41	; 65
     dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	bc 01       	movw	r22, r24
     ddc:	cd 01       	movw	r24, r26
     dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	9e 83       	std	Y+6, r25	; 0x06
     de8:	8d 83       	std	Y+5, r24	; 0x05
     dea:	0f c0       	rjmp	.+30     	; 0xe0a <main+0x2c4>
     dec:	88 ec       	ldi	r24, 0xC8	; 200
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	9c 83       	std	Y+4, r25	; 0x04
     df2:	8b 83       	std	Y+3, r24	; 0x03
     df4:	8b 81       	ldd	r24, Y+3	; 0x03
     df6:	9c 81       	ldd	r25, Y+4	; 0x04
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <main+0x2b2>
     dfc:	9c 83       	std	Y+4, r25	; 0x04
     dfe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e00:	8d 81       	ldd	r24, Y+5	; 0x05
     e02:	9e 81       	ldd	r25, Y+6	; 0x06
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	9e 83       	std	Y+6, r25	; 0x06
     e08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e0a:	8d 81       	ldd	r24, Y+5	; 0x05
     e0c:	9e 81       	ldd	r25, Y+6	; 0x06
     e0e:	00 97       	sbiw	r24, 0x00	; 0
     e10:	69 f7       	brne	.-38     	; 0xdec <main+0x2a6>
     e12:	14 c0       	rjmp	.+40     	; 0xe3c <main+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e14:	6f 81       	ldd	r22, Y+7	; 0x07
     e16:	78 85       	ldd	r23, Y+8	; 0x08
     e18:	89 85       	ldd	r24, Y+9	; 0x09
     e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	9e 83       	std	Y+6, r25	; 0x06
     e26:	8d 83       	std	Y+5, r24	; 0x05
     e28:	8d 81       	ldd	r24, Y+5	; 0x05
     e2a:	9e 81       	ldd	r25, Y+6	; 0x06
     e2c:	9a 83       	std	Y+2, r25	; 0x02
     e2e:	89 83       	std	Y+1, r24	; 0x01
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	9a 81       	ldd	r25, Y+2	; 0x02
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	f1 f7       	brne	.-4      	; 0xe34 <main+0x2ee>
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000) ;
			App_askForPassword() ;
     e3c:	0e 94 53 07 	call	0xea6	; 0xea6 <App_askForPassword>
     e40:	cc ce       	rjmp	.-616    	; 0xbda <main+0x94>
			break ;
		case errorScreen :
			g_recievedValue=0;
     e42:	10 92 ee 00 	sts	0x00EE, r1
			LCD_clearScreen();
     e46:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_clearScreen>
			LCD_displayString("ERROR!");
     e4a:	80 e7       	ldi	r24, 0x70	; 112
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_displayString>
     e52:	c3 ce       	rjmp	.-634    	; 0xbda <main+0x94>
			break ;
		case doorOpening :
			g_recievedValue=0;
     e54:	10 92 ee 00 	sts	0x00EE, r1
			LCD_clearScreen();
     e58:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_clearScreen>
			LCD_displayString("DOOR IS OPENING");
     e5c:	87 e7       	ldi	r24, 0x77	; 119
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_displayString>
     e64:	ba ce       	rjmp	.-652    	; 0xbda <main+0x94>
			break ;
		case doorClosing :
			g_recievedValue=0;
     e66:	10 92 ee 00 	sts	0x00EE, r1
			LCD_clearScreen();
     e6a:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_clearScreen>
			LCD_displayString("DOOR IS Closing");
     e6e:	87 e8       	ldi	r24, 0x87	; 135
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_displayString>
     e76:	b1 ce       	rjmp	.-670    	; 0xbda <main+0x94>
			break ;
		case returnMainOptions :
			g_recievedValue=0;
     e78:	10 92 ee 00 	sts	0x00EE, r1
			App_mainOptions() ;
     e7c:	0e 94 08 08 	call	0x1010	; 0x1010 <App_mainOptions>
     e80:	ac ce       	rjmp	.-680    	; 0xbda <main+0x94>

			break ;
		case rightPassword :
			g_recievedValue=0;
     e82:	10 92 ee 00 	sts	0x00EE, r1
			if(g_keyOption== '+'){
     e86:	80 91 f2 00 	lds	r24, 0x00F2
     e8a:	8b 32       	cpi	r24, 0x2B	; 43
     e8c:	21 f4       	brne	.+8      	; 0xe96 <main+0x350>
				/*Tell the other MC2 to open the door*/
				UART_sendByte(openDoor) ;
     e8e:	80 e4       	ldi	r24, 0x40	; 64
     e90:	0e 94 0d 14 	call	0x281a	; 0x281a <UART_sendByte>
     e94:	a2 ce       	rjmp	.-700    	; 0xbda <main+0x94>
			}
			else if(g_keyOption=='-'){
     e96:	80 91 f2 00 	lds	r24, 0x00F2
     e9a:	8d 32       	cpi	r24, 0x2D	; 45
     e9c:	09 f0       	breq	.+2      	; 0xea0 <main+0x35a>
     e9e:	9d ce       	rjmp	.-710    	; 0xbda <main+0x94>
				App_newPassword() ;
     ea0:	0e 94 b1 08 	call	0x1162	; 0x1162 <App_newPassword>
     ea4:	9a ce       	rjmp	.-716    	; 0xbda <main+0x94>

00000ea6 <App_askForPassword>:
			break;
		}
	}

}
void App_askForPassword(void) {
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	2e 97       	sbiw	r28, 0x0e	; 14
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	f8 94       	cli
     eb4:	de bf       	out	0x3e, r29	; 62
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
     eba:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_clearScreen>
	LCD_displayString("Enter Password:");
     ebe:	87 e9       	ldi	r24, 0x97	; 151
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_displayString>
	LCD_moveCursor(1,0);
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_moveCursor>
	/*initiate communication with MC2 to save the entered password and
	 * check if it's right or not */
	UART_sendByte(uncheckedPassword) ;
     ece:	81 e2       	ldi	r24, 0x21	; 33
     ed0:	0e 94 0d 14 	call	0x281a	; 0x281a <UART_sendByte>
     ed4:	8f c0       	rjmp	.+286    	; 0xff4 <App_askForPassword+0x14e>
	while(g_passwordEntery ==0) {
		/* get the pressed key number */
		g_key = KEYPAD_getPressedKey();
     ed6:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <KEYPAD_getPressedKey>
     eda:	80 93 f3 00 	sts	0x00F3, r24
		if ((g_key >=0) && (g_key <=9 ))
     ede:	80 91 f3 00 	lds	r24, 0x00F3
     ee2:	8a 30       	cpi	r24, 0x0A	; 10
     ee4:	48 f4       	brcc	.+18     	; 0xef8 <App_askForPassword+0x52>
		{
			UART_sendByte(g_key) ;
     ee6:	80 91 f3 00 	lds	r24, 0x00F3
     eea:	0e 94 0d 14 	call	0x281a	; 0x281a <UART_sendByte>
			/* display the pressed keypad switch as "*" */
			LCD_displayString("*");
     eee:	87 ea       	ldi	r24, 0xA7	; 167
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_displayString>
     ef6:	0c c0       	rjmp	.+24     	; 0xf10 <App_askForPassword+0x6a>
		}

		else if(g_key == '=')
     ef8:	80 91 f3 00 	lds	r24, 0x00F3
     efc:	8d 33       	cpi	r24, 0x3D	; 61
     efe:	41 f4       	brne	.+16     	; 0xf10 <App_askForPassword+0x6a>
		{
			/*Tell the other MC that u finished entering
			 * password and the MC2 have to check if it's right
			 * */
			UART_sendByte(finishedEntery) ;
     f00:	86 e2       	ldi	r24, 0x26	; 38
     f02:	0e 94 0d 14 	call	0x281a	; 0x281a <UART_sendByte>
			/*tells MC1 that i finished writing password and
			 * should terminate the while loop */
			g_passwordEntery++;
     f06:	80 91 f1 00 	lds	r24, 0x00F1
     f0a:	8f 5f       	subi	r24, 0xFF	; 255
     f0c:	80 93 f1 00 	sts	0x00F1, r24
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	aa e7       	ldi	r26, 0x7A	; 122
     f16:	b4 e4       	ldi	r27, 0x44	; 68
     f18:	8b 87       	std	Y+11, r24	; 0x0b
     f1a:	9c 87       	std	Y+12, r25	; 0x0c
     f1c:	ad 87       	std	Y+13, r26	; 0x0d
     f1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f20:	6b 85       	ldd	r22, Y+11	; 0x0b
     f22:	7c 85       	ldd	r23, Y+12	; 0x0c
     f24:	8d 85       	ldd	r24, Y+13	; 0x0d
     f26:	9e 85       	ldd	r25, Y+14	; 0x0e
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	4a ef       	ldi	r20, 0xFA	; 250
     f2e:	54 e4       	ldi	r21, 0x44	; 68
     f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	8f 83       	std	Y+7, r24	; 0x07
     f3a:	98 87       	std	Y+8, r25	; 0x08
     f3c:	a9 87       	std	Y+9, r26	; 0x09
     f3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f40:	6f 81       	ldd	r22, Y+7	; 0x07
     f42:	78 85       	ldd	r23, Y+8	; 0x08
     f44:	89 85       	ldd	r24, Y+9	; 0x09
     f46:	9a 85       	ldd	r25, Y+10	; 0x0a
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	40 e8       	ldi	r20, 0x80	; 128
     f4e:	5f e3       	ldi	r21, 0x3F	; 63
     f50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f54:	88 23       	and	r24, r24
     f56:	2c f4       	brge	.+10     	; 0xf62 <App_askForPassword+0xbc>
		__ticks = 1;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	9e 83       	std	Y+6, r25	; 0x06
     f5e:	8d 83       	std	Y+5, r24	; 0x05
     f60:	3f c0       	rjmp	.+126    	; 0xfe0 <App_askForPassword+0x13a>
	else if (__tmp > 65535)
     f62:	6f 81       	ldd	r22, Y+7	; 0x07
     f64:	78 85       	ldd	r23, Y+8	; 0x08
     f66:	89 85       	ldd	r24, Y+9	; 0x09
     f68:	9a 85       	ldd	r25, Y+10	; 0x0a
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	3f ef       	ldi	r19, 0xFF	; 255
     f6e:	4f e7       	ldi	r20, 0x7F	; 127
     f70:	57 e4       	ldi	r21, 0x47	; 71
     f72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f76:	18 16       	cp	r1, r24
     f78:	4c f5       	brge	.+82     	; 0xfcc <App_askForPassword+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f7a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f7c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f7e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f80:	9e 85       	ldd	r25, Y+14	; 0x0e
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	40 e2       	ldi	r20, 0x20	; 32
     f88:	51 e4       	ldi	r21, 0x41	; 65
     f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f8e:	dc 01       	movw	r26, r24
     f90:	cb 01       	movw	r24, r22
     f92:	bc 01       	movw	r22, r24
     f94:	cd 01       	movw	r24, r26
     f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	9e 83       	std	Y+6, r25	; 0x06
     fa0:	8d 83       	std	Y+5, r24	; 0x05
     fa2:	0f c0       	rjmp	.+30     	; 0xfc2 <App_askForPassword+0x11c>
     fa4:	88 ec       	ldi	r24, 0xC8	; 200
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	9c 83       	std	Y+4, r25	; 0x04
     faa:	8b 83       	std	Y+3, r24	; 0x03
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	9c 81       	ldd	r25, Y+4	; 0x04
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	f1 f7       	brne	.-4      	; 0xfb0 <App_askForPassword+0x10a>
     fb4:	9c 83       	std	Y+4, r25	; 0x04
     fb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fb8:	8d 81       	ldd	r24, Y+5	; 0x05
     fba:	9e 81       	ldd	r25, Y+6	; 0x06
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	9e 83       	std	Y+6, r25	; 0x06
     fc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc2:	8d 81       	ldd	r24, Y+5	; 0x05
     fc4:	9e 81       	ldd	r25, Y+6	; 0x06
     fc6:	00 97       	sbiw	r24, 0x00	; 0
     fc8:	69 f7       	brne	.-38     	; 0xfa4 <App_askForPassword+0xfe>
     fca:	14 c0       	rjmp	.+40     	; 0xff4 <App_askForPassword+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fcc:	6f 81       	ldd	r22, Y+7	; 0x07
     fce:	78 85       	ldd	r23, Y+8	; 0x08
     fd0:	89 85       	ldd	r24, Y+9	; 0x09
     fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd8:	dc 01       	movw	r26, r24
     fda:	cb 01       	movw	r24, r22
     fdc:	9e 83       	std	Y+6, r25	; 0x06
     fde:	8d 83       	std	Y+5, r24	; 0x05
     fe0:	8d 81       	ldd	r24, Y+5	; 0x05
     fe2:	9e 81       	ldd	r25, Y+6	; 0x06
     fe4:	9a 83       	std	Y+2, r25	; 0x02
     fe6:	89 83       	std	Y+1, r24	; 0x01
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	9a 81       	ldd	r25, Y+2	; 0x02
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	f1 f7       	brne	.-4      	; 0xfec <App_askForPassword+0x146>
     ff0:	9a 83       	std	Y+2, r25	; 0x02
     ff2:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayString("Enter Password:");
	LCD_moveCursor(1,0);
	/*initiate communication with MC2 to save the entered password and
	 * check if it's right or not */
	UART_sendByte(uncheckedPassword) ;
	while(g_passwordEntery ==0) {
     ff4:	80 91 f1 00 	lds	r24, 0x00F1
     ff8:	88 23       	and	r24, r24
     ffa:	09 f4       	brne	.+2      	; 0xffe <App_askForPassword+0x158>
     ffc:	6c cf       	rjmp	.-296    	; 0xed6 <App_askForPassword+0x30>
		/* if any switch pressed for more than 1000 ms it
		 * counts more than one press */
		_delay_ms(1000);
	}

}
     ffe:	2e 96       	adiw	r28, 0x0e	; 14
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <App_mainOptions>:
void App_mainOptions (void){
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	2e 97       	sbiw	r28, 0x0e	; 14
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	f8 94       	cli
    101e:	de bf       	out	0x3e, r29	; 62
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1024:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_clearScreen>
	LCD_displayString("+ : open door");
    1028:	89 ea       	ldi	r24, 0xA9	; 169
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_displayString>
	LCD_displayStringRowColumn(1,0,"- : change password") ;
    1030:	27 eb       	ldi	r18, 0xB7	; 183
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	a9 01       	movw	r20, r18
    103a:	0e 94 08 13 	call	0x2610	; 0x2610 <LCD_displayStringRowColumn>
	/* get the pressed key number */
	g_key = KEYPAD_getPressedKey();
    103e:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <KEYPAD_getPressedKey>
    1042:	80 93 f3 00 	sts	0x00F3, r24
	if (g_key =='-')
    1046:	80 91 f3 00 	lds	r24, 0x00F3
    104a:	8d 32       	cpi	r24, 0x2D	; 45
    104c:	31 f4       	brne	.+12     	; 0x105a <App_mainOptions+0x4a>
	{
		App_askForPassword() ;
    104e:	0e 94 53 07 	call	0xea6	; 0xea6 <App_askForPassword>
		g_keyOption='-' ;
    1052:	8d e2       	ldi	r24, 0x2D	; 45
    1054:	80 93 f2 00 	sts	0x00F2, r24
    1058:	09 c0       	rjmp	.+18     	; 0x106c <App_mainOptions+0x5c>
	}
	else if(g_key == '+')
    105a:	80 91 f3 00 	lds	r24, 0x00F3
    105e:	8b 32       	cpi	r24, 0x2B	; 43
    1060:	29 f4       	brne	.+10     	; 0x106c <App_mainOptions+0x5c>
	{
		App_askForPassword() ;
    1062:	0e 94 53 07 	call	0xea6	; 0xea6 <App_askForPassword>
		g_keyOption='+' ;
    1066:	8b e2       	ldi	r24, 0x2B	; 43
    1068:	80 93 f2 00 	sts	0x00F2, r24
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	aa e7       	ldi	r26, 0x7A	; 122
    1072:	b4 e4       	ldi	r27, 0x44	; 68
    1074:	8b 87       	std	Y+11, r24	; 0x0b
    1076:	9c 87       	std	Y+12, r25	; 0x0c
    1078:	ad 87       	std	Y+13, r26	; 0x0d
    107a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    107c:	6b 85       	ldd	r22, Y+11	; 0x0b
    107e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1080:	8d 85       	ldd	r24, Y+13	; 0x0d
    1082:	9e 85       	ldd	r25, Y+14	; 0x0e
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	4a ef       	ldi	r20, 0xFA	; 250
    108a:	54 e4       	ldi	r21, 0x44	; 68
    108c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1090:	dc 01       	movw	r26, r24
    1092:	cb 01       	movw	r24, r22
    1094:	8f 83       	std	Y+7, r24	; 0x07
    1096:	98 87       	std	Y+8, r25	; 0x08
    1098:	a9 87       	std	Y+9, r26	; 0x09
    109a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    109c:	6f 81       	ldd	r22, Y+7	; 0x07
    109e:	78 85       	ldd	r23, Y+8	; 0x08
    10a0:	89 85       	ldd	r24, Y+9	; 0x09
    10a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	40 e8       	ldi	r20, 0x80	; 128
    10aa:	5f e3       	ldi	r21, 0x3F	; 63
    10ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10b0:	88 23       	and	r24, r24
    10b2:	2c f4       	brge	.+10     	; 0x10be <App_mainOptions+0xae>
		__ticks = 1;
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	9e 83       	std	Y+6, r25	; 0x06
    10ba:	8d 83       	std	Y+5, r24	; 0x05
    10bc:	3f c0       	rjmp	.+126    	; 0x113c <App_mainOptions+0x12c>
	else if (__tmp > 65535)
    10be:	6f 81       	ldd	r22, Y+7	; 0x07
    10c0:	78 85       	ldd	r23, Y+8	; 0x08
    10c2:	89 85       	ldd	r24, Y+9	; 0x09
    10c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	3f ef       	ldi	r19, 0xFF	; 255
    10ca:	4f e7       	ldi	r20, 0x7F	; 127
    10cc:	57 e4       	ldi	r21, 0x47	; 71
    10ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10d2:	18 16       	cp	r1, r24
    10d4:	4c f5       	brge	.+82     	; 0x1128 <App_mainOptions+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10da:	8d 85       	ldd	r24, Y+13	; 0x0d
    10dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	40 e2       	ldi	r20, 0x20	; 32
    10e4:	51 e4       	ldi	r21, 0x41	; 65
    10e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	bc 01       	movw	r22, r24
    10f0:	cd 01       	movw	r24, r26
    10f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	9e 83       	std	Y+6, r25	; 0x06
    10fc:	8d 83       	std	Y+5, r24	; 0x05
    10fe:	0f c0       	rjmp	.+30     	; 0x111e <App_mainOptions+0x10e>
    1100:	88 ec       	ldi	r24, 0xC8	; 200
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	9c 83       	std	Y+4, r25	; 0x04
    1106:	8b 83       	std	Y+3, r24	; 0x03
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	9c 81       	ldd	r25, Y+4	; 0x04
    110c:	01 97       	sbiw	r24, 0x01	; 1
    110e:	f1 f7       	brne	.-4      	; 0x110c <App_mainOptions+0xfc>
    1110:	9c 83       	std	Y+4, r25	; 0x04
    1112:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1114:	8d 81       	ldd	r24, Y+5	; 0x05
    1116:	9e 81       	ldd	r25, Y+6	; 0x06
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	9e 83       	std	Y+6, r25	; 0x06
    111c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    111e:	8d 81       	ldd	r24, Y+5	; 0x05
    1120:	9e 81       	ldd	r25, Y+6	; 0x06
    1122:	00 97       	sbiw	r24, 0x00	; 0
    1124:	69 f7       	brne	.-38     	; 0x1100 <App_mainOptions+0xf0>
    1126:	14 c0       	rjmp	.+40     	; 0x1150 <App_mainOptions+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1128:	6f 81       	ldd	r22, Y+7	; 0x07
    112a:	78 85       	ldd	r23, Y+8	; 0x08
    112c:	89 85       	ldd	r24, Y+9	; 0x09
    112e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	9e 83       	std	Y+6, r25	; 0x06
    113a:	8d 83       	std	Y+5, r24	; 0x05
    113c:	8d 81       	ldd	r24, Y+5	; 0x05
    113e:	9e 81       	ldd	r25, Y+6	; 0x06
    1140:	9a 83       	std	Y+2, r25	; 0x02
    1142:	89 83       	std	Y+1, r24	; 0x01
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	9a 81       	ldd	r25, Y+2	; 0x02
    1148:	01 97       	sbiw	r24, 0x01	; 1
    114a:	f1 f7       	brne	.-4      	; 0x1148 <App_mainOptions+0x138>
    114c:	9a 83       	std	Y+2, r25	; 0x02
    114e:	89 83       	std	Y+1, r24	; 0x01
	}
	 /* Press time */
	_delay_ms(1000);
}
    1150:	2e 96       	adiw	r28, 0x0e	; 14
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	f8 94       	cli
    1156:	de bf       	out	0x3e, r29	; 62
    1158:	0f be       	out	0x3f, r0	; 63
    115a:	cd bf       	out	0x3d, r28	; 61
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <App_newPassword>:
void App_newPassword (void) {
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	6c 97       	sbiw	r28, 0x1c	; 28
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	f8 94       	cli
    1170:	de bf       	out	0x3e, r29	; 62
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1176:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_clearScreen>
	LCD_displayString("Enter Password:");
    117a:	87 e9       	ldi	r24, 0x97	; 151
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_displayString>
	LCD_moveCursor(1,0);
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	60 e0       	ldi	r22, 0x00	; 0
    1186:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_moveCursor>
	/*initiate communication with MC2 to save the first entry of
	 * the new password */
	UART_sendByte(newPasswordFirst) ;
    118a:	8e e5       	ldi	r24, 0x5E	; 94
    118c:	0e 94 0d 14 	call	0x281a	; 0x281a <UART_sendByte>
    1190:	8f c0       	rjmp	.+286    	; 0x12b0 <App_newPassword+0x14e>
	while(g_enteryCount ==0) {
		g_key = KEYPAD_getPressedKey(); /* get the pressed key number */
    1192:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <KEYPAD_getPressedKey>
    1196:	80 93 f3 00 	sts	0x00F3, r24
		if ((g_key <= 9) && (g_key >= 0))
    119a:	80 91 f3 00 	lds	r24, 0x00F3
    119e:	8a 30       	cpi	r24, 0x0A	; 10
    11a0:	48 f4       	brcc	.+18     	; 0x11b4 <App_newPassword+0x52>
		{
			UART_sendByte(g_key) ;
    11a2:	80 91 f3 00 	lds	r24, 0x00F3
    11a6:	0e 94 0d 14 	call	0x281a	; 0x281a <UART_sendByte>
			LCD_displayString("*"); /* display the pressed keypad switch as * */
    11aa:	87 ea       	ldi	r24, 0xA7	; 167
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_displayString>
    11b2:	0c c0       	rjmp	.+24     	; 0x11cc <App_newPassword+0x6a>
		}
		else if(g_key == '=')
    11b4:	80 91 f3 00 	lds	r24, 0x00F3
    11b8:	8d 33       	cpi	r24, 0x3D	; 61
    11ba:	41 f4       	brne	.+16     	; 0x11cc <App_newPassword+0x6a>
		{
			/*Tell the other MC that u finished entry*/
			UART_sendByte(finishedEntery) ;
    11bc:	86 e2       	ldi	r24, 0x26	; 38
    11be:	0e 94 0d 14 	call	0x281a	; 0x281a <UART_sendByte>
			/*tells MC1 that i finished first entry */
			g_enteryCount++;
    11c2:	80 91 f0 00 	lds	r24, 0x00F0
    11c6:	8f 5f       	subi	r24, 0xFF	; 255
    11c8:	80 93 f0 00 	sts	0x00F0, r24
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	aa e7       	ldi	r26, 0x7A	; 122
    11d2:	b4 e4       	ldi	r27, 0x44	; 68
    11d4:	89 8f       	std	Y+25, r24	; 0x19
    11d6:	9a 8f       	std	Y+26, r25	; 0x1a
    11d8:	ab 8f       	std	Y+27, r26	; 0x1b
    11da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11dc:	69 8d       	ldd	r22, Y+25	; 0x19
    11de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	4a ef       	ldi	r20, 0xFA	; 250
    11ea:	54 e4       	ldi	r21, 0x44	; 68
    11ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	8d 8b       	std	Y+21, r24	; 0x15
    11f6:	9e 8b       	std	Y+22, r25	; 0x16
    11f8:	af 8b       	std	Y+23, r26	; 0x17
    11fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11fc:	6d 89       	ldd	r22, Y+21	; 0x15
    11fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1200:	8f 89       	ldd	r24, Y+23	; 0x17
    1202:	98 8d       	ldd	r25, Y+24	; 0x18
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	40 e8       	ldi	r20, 0x80	; 128
    120a:	5f e3       	ldi	r21, 0x3F	; 63
    120c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1210:	88 23       	and	r24, r24
    1212:	2c f4       	brge	.+10     	; 0x121e <App_newPassword+0xbc>
		__ticks = 1;
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	9c 8b       	std	Y+20, r25	; 0x14
    121a:	8b 8b       	std	Y+19, r24	; 0x13
    121c:	3f c0       	rjmp	.+126    	; 0x129c <App_newPassword+0x13a>
	else if (__tmp > 65535)
    121e:	6d 89       	ldd	r22, Y+21	; 0x15
    1220:	7e 89       	ldd	r23, Y+22	; 0x16
    1222:	8f 89       	ldd	r24, Y+23	; 0x17
    1224:	98 8d       	ldd	r25, Y+24	; 0x18
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	3f ef       	ldi	r19, 0xFF	; 255
    122a:	4f e7       	ldi	r20, 0x7F	; 127
    122c:	57 e4       	ldi	r21, 0x47	; 71
    122e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1232:	18 16       	cp	r1, r24
    1234:	4c f5       	brge	.+82     	; 0x1288 <App_newPassword+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1236:	69 8d       	ldd	r22, Y+25	; 0x19
    1238:	7a 8d       	ldd	r23, Y+26	; 0x1a
    123a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    123c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	40 e2       	ldi	r20, 0x20	; 32
    1244:	51 e4       	ldi	r21, 0x41	; 65
    1246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    124a:	dc 01       	movw	r26, r24
    124c:	cb 01       	movw	r24, r22
    124e:	bc 01       	movw	r22, r24
    1250:	cd 01       	movw	r24, r26
    1252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1256:	dc 01       	movw	r26, r24
    1258:	cb 01       	movw	r24, r22
    125a:	9c 8b       	std	Y+20, r25	; 0x14
    125c:	8b 8b       	std	Y+19, r24	; 0x13
    125e:	0f c0       	rjmp	.+30     	; 0x127e <App_newPassword+0x11c>
    1260:	88 ec       	ldi	r24, 0xC8	; 200
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	9a 8b       	std	Y+18, r25	; 0x12
    1266:	89 8b       	std	Y+17, r24	; 0x11
    1268:	89 89       	ldd	r24, Y+17	; 0x11
    126a:	9a 89       	ldd	r25, Y+18	; 0x12
    126c:	01 97       	sbiw	r24, 0x01	; 1
    126e:	f1 f7       	brne	.-4      	; 0x126c <App_newPassword+0x10a>
    1270:	9a 8b       	std	Y+18, r25	; 0x12
    1272:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1274:	8b 89       	ldd	r24, Y+19	; 0x13
    1276:	9c 89       	ldd	r25, Y+20	; 0x14
    1278:	01 97       	sbiw	r24, 0x01	; 1
    127a:	9c 8b       	std	Y+20, r25	; 0x14
    127c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    127e:	8b 89       	ldd	r24, Y+19	; 0x13
    1280:	9c 89       	ldd	r25, Y+20	; 0x14
    1282:	00 97       	sbiw	r24, 0x00	; 0
    1284:	69 f7       	brne	.-38     	; 0x1260 <App_newPassword+0xfe>
    1286:	14 c0       	rjmp	.+40     	; 0x12b0 <App_newPassword+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1288:	6d 89       	ldd	r22, Y+21	; 0x15
    128a:	7e 89       	ldd	r23, Y+22	; 0x16
    128c:	8f 89       	ldd	r24, Y+23	; 0x17
    128e:	98 8d       	ldd	r25, Y+24	; 0x18
    1290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	9c 8b       	std	Y+20, r25	; 0x14
    129a:	8b 8b       	std	Y+19, r24	; 0x13
    129c:	8b 89       	ldd	r24, Y+19	; 0x13
    129e:	9c 89       	ldd	r25, Y+20	; 0x14
    12a0:	98 8b       	std	Y+16, r25	; 0x10
    12a2:	8f 87       	std	Y+15, r24	; 0x0f
    12a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    12a6:	98 89       	ldd	r25, Y+16	; 0x10
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	f1 f7       	brne	.-4      	; 0x12a8 <App_newPassword+0x146>
    12ac:	98 8b       	std	Y+16, r25	; 0x10
    12ae:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_displayString("Enter Password:");
	LCD_moveCursor(1,0);
	/*initiate communication with MC2 to save the first entry of
	 * the new password */
	UART_sendByte(newPasswordFirst) ;
	while(g_enteryCount ==0) {
    12b0:	80 91 f0 00 	lds	r24, 0x00F0
    12b4:	88 23       	and	r24, r24
    12b6:	09 f4       	brne	.+2      	; 0x12ba <App_newPassword+0x158>
    12b8:	6c cf       	rjmp	.-296    	; 0x1192 <App_newPassword+0x30>
			/*tells MC1 that i finished first entry */
			g_enteryCount++;
		}
		_delay_ms(1000);
	}
	LCD_clearScreen();
    12ba:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_clearScreen>
	LCD_displayString("Re-Enter Password:");
    12be:	8b ec       	ldi	r24, 0xCB	; 203
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_displayString>
	LCD_moveCursor(1,0);
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	60 e0       	ldi	r22, 0x00	; 0
    12ca:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_moveCursor>
	/*initiate communication with MC2 to save the second enter of
	 * the new password */
	UART_sendByte(newPasswordSecoend) ;
    12ce:	8e e7       	ldi	r24, 0x7E	; 126
    12d0:	0e 94 0d 14 	call	0x281a	; 0x281a <UART_sendByte>
    12d4:	8f c0       	rjmp	.+286    	; 0x13f4 <App_newPassword+0x292>
	while (g_enteryCount ==1) {

		g_key = KEYPAD_getPressedKey();
    12d6:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <KEYPAD_getPressedKey>
    12da:	80 93 f3 00 	sts	0x00F3, r24
		if ((g_key >=0 && g_key <=9 ))
    12de:	80 91 f3 00 	lds	r24, 0x00F3
    12e2:	8a 30       	cpi	r24, 0x0A	; 10
    12e4:	48 f4       	brcc	.+18     	; 0x12f8 <App_newPassword+0x196>
		{
			UART_sendByte(g_key) ;
    12e6:	80 91 f3 00 	lds	r24, 0x00F3
    12ea:	0e 94 0d 14 	call	0x281a	; 0x281a <UART_sendByte>
			/* display the pressed keypad switch as * */
			LCD_displayString("*");
    12ee:	87 ea       	ldi	r24, 0xA7	; 167
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_displayString>
    12f6:	0c c0       	rjmp	.+24     	; 0x1310 <App_newPassword+0x1ae>
		}

		else if(g_key == '=')
    12f8:	80 91 f3 00 	lds	r24, 0x00F3
    12fc:	8d 33       	cpi	r24, 0x3D	; 61
    12fe:	41 f4       	brne	.+16     	; 0x1310 <App_newPassword+0x1ae>
		{/*Tell the other MC that u finished entry*/
			UART_sendByte(finishedEntery) ;
    1300:	86 e2       	ldi	r24, 0x26	; 38
    1302:	0e 94 0d 14 	call	0x281a	; 0x281a <UART_sendByte>
			/*tells MC1 that i finished second entry */
			g_enteryCount++;
    1306:	80 91 f0 00 	lds	r24, 0x00F0
    130a:	8f 5f       	subi	r24, 0xFF	; 255
    130c:	80 93 f0 00 	sts	0x00F0, r24
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	aa e7       	ldi	r26, 0x7A	; 122
    1316:	b4 e4       	ldi	r27, 0x44	; 68
    1318:	8b 87       	std	Y+11, r24	; 0x0b
    131a:	9c 87       	std	Y+12, r25	; 0x0c
    131c:	ad 87       	std	Y+13, r26	; 0x0d
    131e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1320:	6b 85       	ldd	r22, Y+11	; 0x0b
    1322:	7c 85       	ldd	r23, Y+12	; 0x0c
    1324:	8d 85       	ldd	r24, Y+13	; 0x0d
    1326:	9e 85       	ldd	r25, Y+14	; 0x0e
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	4a ef       	ldi	r20, 0xFA	; 250
    132e:	54 e4       	ldi	r21, 0x44	; 68
    1330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	8f 83       	std	Y+7, r24	; 0x07
    133a:	98 87       	std	Y+8, r25	; 0x08
    133c:	a9 87       	std	Y+9, r26	; 0x09
    133e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1340:	6f 81       	ldd	r22, Y+7	; 0x07
    1342:	78 85       	ldd	r23, Y+8	; 0x08
    1344:	89 85       	ldd	r24, Y+9	; 0x09
    1346:	9a 85       	ldd	r25, Y+10	; 0x0a
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	40 e8       	ldi	r20, 0x80	; 128
    134e:	5f e3       	ldi	r21, 0x3F	; 63
    1350:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1354:	88 23       	and	r24, r24
    1356:	2c f4       	brge	.+10     	; 0x1362 <App_newPassword+0x200>
		__ticks = 1;
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	9e 83       	std	Y+6, r25	; 0x06
    135e:	8d 83       	std	Y+5, r24	; 0x05
    1360:	3f c0       	rjmp	.+126    	; 0x13e0 <App_newPassword+0x27e>
	else if (__tmp > 65535)
    1362:	6f 81       	ldd	r22, Y+7	; 0x07
    1364:	78 85       	ldd	r23, Y+8	; 0x08
    1366:	89 85       	ldd	r24, Y+9	; 0x09
    1368:	9a 85       	ldd	r25, Y+10	; 0x0a
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	3f ef       	ldi	r19, 0xFF	; 255
    136e:	4f e7       	ldi	r20, 0x7F	; 127
    1370:	57 e4       	ldi	r21, 0x47	; 71
    1372:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1376:	18 16       	cp	r1, r24
    1378:	4c f5       	brge	.+82     	; 0x13cc <App_newPassword+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    137a:	6b 85       	ldd	r22, Y+11	; 0x0b
    137c:	7c 85       	ldd	r23, Y+12	; 0x0c
    137e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1380:	9e 85       	ldd	r25, Y+14	; 0x0e
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	40 e2       	ldi	r20, 0x20	; 32
    1388:	51 e4       	ldi	r21, 0x41	; 65
    138a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	bc 01       	movw	r22, r24
    1394:	cd 01       	movw	r24, r26
    1396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	9e 83       	std	Y+6, r25	; 0x06
    13a0:	8d 83       	std	Y+5, r24	; 0x05
    13a2:	0f c0       	rjmp	.+30     	; 0x13c2 <App_newPassword+0x260>
    13a4:	88 ec       	ldi	r24, 0xC8	; 200
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	9c 83       	std	Y+4, r25	; 0x04
    13aa:	8b 83       	std	Y+3, r24	; 0x03
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	9c 81       	ldd	r25, Y+4	; 0x04
    13b0:	01 97       	sbiw	r24, 0x01	; 1
    13b2:	f1 f7       	brne	.-4      	; 0x13b0 <App_newPassword+0x24e>
    13b4:	9c 83       	std	Y+4, r25	; 0x04
    13b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ba:	9e 81       	ldd	r25, Y+6	; 0x06
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    13be:	9e 83       	std	Y+6, r25	; 0x06
    13c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c2:	8d 81       	ldd	r24, Y+5	; 0x05
    13c4:	9e 81       	ldd	r25, Y+6	; 0x06
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	69 f7       	brne	.-38     	; 0x13a4 <App_newPassword+0x242>
    13ca:	14 c0       	rjmp	.+40     	; 0x13f4 <App_newPassword+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13cc:	6f 81       	ldd	r22, Y+7	; 0x07
    13ce:	78 85       	ldd	r23, Y+8	; 0x08
    13d0:	89 85       	ldd	r24, Y+9	; 0x09
    13d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d8:	dc 01       	movw	r26, r24
    13da:	cb 01       	movw	r24, r22
    13dc:	9e 83       	std	Y+6, r25	; 0x06
    13de:	8d 83       	std	Y+5, r24	; 0x05
    13e0:	8d 81       	ldd	r24, Y+5	; 0x05
    13e2:	9e 81       	ldd	r25, Y+6	; 0x06
    13e4:	9a 83       	std	Y+2, r25	; 0x02
    13e6:	89 83       	std	Y+1, r24	; 0x01
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	9a 81       	ldd	r25, Y+2	; 0x02
    13ec:	01 97       	sbiw	r24, 0x01	; 1
    13ee:	f1 f7       	brne	.-4      	; 0x13ec <App_newPassword+0x28a>
    13f0:	9a 83       	std	Y+2, r25	; 0x02
    13f2:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayString("Re-Enter Password:");
	LCD_moveCursor(1,0);
	/*initiate communication with MC2 to save the second enter of
	 * the new password */
	UART_sendByte(newPasswordSecoend) ;
	while (g_enteryCount ==1) {
    13f4:	80 91 f0 00 	lds	r24, 0x00F0
    13f8:	81 30       	cpi	r24, 0x01	; 1
    13fa:	09 f4       	brne	.+2      	; 0x13fe <App_newPassword+0x29c>
    13fc:	6c cf       	rjmp	.-296    	; 0x12d6 <App_newPassword+0x174>
			/*tells MC1 that i finished second entry */
			g_enteryCount++;
		}
		_delay_ms(1000); /* Press time */
	}
}
    13fe:	6c 96       	adiw	r28, 0x1c	; 28
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	f8 94       	cli
    1404:	de bf       	out	0x3e, r29	; 62
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	cd bf       	out	0x3d, r28	; 61
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	08 95       	ret

00001410 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	00 d0       	rcall	.+0      	; 0x1416 <GPIO_setupPinDirection+0x6>
    1416:	00 d0       	rcall	.+0      	; 0x1418 <GPIO_setupPinDirection+0x8>
    1418:	0f 92       	push	r0
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	89 83       	std	Y+1, r24	; 0x01
    1420:	6a 83       	std	Y+2, r22	; 0x02
    1422:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	88 30       	cpi	r24, 0x08	; 8
    1428:	08 f0       	brcs	.+2      	; 0x142c <GPIO_setupPinDirection+0x1c>
    142a:	d5 c0       	rjmp	.+426    	; 0x15d6 <GPIO_setupPinDirection+0x1c6>
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	84 30       	cpi	r24, 0x04	; 4
    1430:	08 f0       	brcs	.+2      	; 0x1434 <GPIO_setupPinDirection+0x24>
    1432:	d1 c0       	rjmp	.+418    	; 0x15d6 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	3d 83       	std	Y+5, r19	; 0x05
    143c:	2c 83       	std	Y+4, r18	; 0x04
    143e:	8c 81       	ldd	r24, Y+4	; 0x04
    1440:	9d 81       	ldd	r25, Y+5	; 0x05
    1442:	81 30       	cpi	r24, 0x01	; 1
    1444:	91 05       	cpc	r25, r1
    1446:	09 f4       	brne	.+2      	; 0x144a <GPIO_setupPinDirection+0x3a>
    1448:	43 c0       	rjmp	.+134    	; 0x14d0 <GPIO_setupPinDirection+0xc0>
    144a:	2c 81       	ldd	r18, Y+4	; 0x04
    144c:	3d 81       	ldd	r19, Y+5	; 0x05
    144e:	22 30       	cpi	r18, 0x02	; 2
    1450:	31 05       	cpc	r19, r1
    1452:	2c f4       	brge	.+10     	; 0x145e <GPIO_setupPinDirection+0x4e>
    1454:	8c 81       	ldd	r24, Y+4	; 0x04
    1456:	9d 81       	ldd	r25, Y+5	; 0x05
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	71 f0       	breq	.+28     	; 0x1478 <GPIO_setupPinDirection+0x68>
    145c:	bc c0       	rjmp	.+376    	; 0x15d6 <GPIO_setupPinDirection+0x1c6>
    145e:	2c 81       	ldd	r18, Y+4	; 0x04
    1460:	3d 81       	ldd	r19, Y+5	; 0x05
    1462:	22 30       	cpi	r18, 0x02	; 2
    1464:	31 05       	cpc	r19, r1
    1466:	09 f4       	brne	.+2      	; 0x146a <GPIO_setupPinDirection+0x5a>
    1468:	5f c0       	rjmp	.+190    	; 0x1528 <GPIO_setupPinDirection+0x118>
    146a:	8c 81       	ldd	r24, Y+4	; 0x04
    146c:	9d 81       	ldd	r25, Y+5	; 0x05
    146e:	83 30       	cpi	r24, 0x03	; 3
    1470:	91 05       	cpc	r25, r1
    1472:	09 f4       	brne	.+2      	; 0x1476 <GPIO_setupPinDirection+0x66>
    1474:	85 c0       	rjmp	.+266    	; 0x1580 <GPIO_setupPinDirection+0x170>
    1476:	af c0       	rjmp	.+350    	; 0x15d6 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	81 30       	cpi	r24, 0x01	; 1
    147c:	a1 f4       	brne	.+40     	; 0x14a6 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    147e:	aa e3       	ldi	r26, 0x3A	; 58
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	ea e3       	ldi	r30, 0x3A	; 58
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	48 2f       	mov	r20, r24
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	02 2e       	mov	r0, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <GPIO_setupPinDirection+0x8c>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	0a 94       	dec	r0
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <GPIO_setupPinDirection+0x88>
    14a0:	84 2b       	or	r24, r20
    14a2:	8c 93       	st	X, r24
    14a4:	98 c0       	rjmp	.+304    	; 0x15d6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    14a6:	aa e3       	ldi	r26, 0x3A	; 58
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	ea e3       	ldi	r30, 0x3A	; 58
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 2e       	mov	r0, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <GPIO_setupPinDirection+0xb4>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	0a 94       	dec	r0
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <GPIO_setupPinDirection+0xb0>
    14c8:	80 95       	com	r24
    14ca:	84 23       	and	r24, r20
    14cc:	8c 93       	st	X, r24
    14ce:	83 c0       	rjmp	.+262    	; 0x15d6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	81 30       	cpi	r24, 0x01	; 1
    14d4:	a1 f4       	brne	.+40     	; 0x14fe <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    14d6:	a7 e3       	ldi	r26, 0x37	; 55
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e7 e3       	ldi	r30, 0x37	; 55
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	48 2f       	mov	r20, r24
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 2e       	mov	r0, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <GPIO_setupPinDirection+0xe4>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	0a 94       	dec	r0
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <GPIO_setupPinDirection+0xe0>
    14f8:	84 2b       	or	r24, r20
    14fa:	8c 93       	st	X, r24
    14fc:	6c c0       	rjmp	.+216    	; 0x15d6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    14fe:	a7 e3       	ldi	r26, 0x37	; 55
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e7 e3       	ldi	r30, 0x37	; 55
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	48 2f       	mov	r20, r24
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	02 2e       	mov	r0, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <GPIO_setupPinDirection+0x10c>
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	0a 94       	dec	r0
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <GPIO_setupPinDirection+0x108>
    1520:	80 95       	com	r24
    1522:	84 23       	and	r24, r20
    1524:	8c 93       	st	X, r24
    1526:	57 c0       	rjmp	.+174    	; 0x15d6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	a1 f4       	brne	.+40     	; 0x1556 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    152e:	a4 e3       	ldi	r26, 0x34	; 52
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	e4 e3       	ldi	r30, 0x34	; 52
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	48 2f       	mov	r20, r24
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	02 2e       	mov	r0, r18
    1546:	02 c0       	rjmp	.+4      	; 0x154c <GPIO_setupPinDirection+0x13c>
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	0a 94       	dec	r0
    154e:	e2 f7       	brpl	.-8      	; 0x1548 <GPIO_setupPinDirection+0x138>
    1550:	84 2b       	or	r24, r20
    1552:	8c 93       	st	X, r24
    1554:	40 c0       	rjmp	.+128    	; 0x15d6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1556:	a4 e3       	ldi	r26, 0x34	; 52
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e4 e3       	ldi	r30, 0x34	; 52
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	48 2f       	mov	r20, r24
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	02 2e       	mov	r0, r18
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <GPIO_setupPinDirection+0x164>
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	0a 94       	dec	r0
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <GPIO_setupPinDirection+0x160>
    1578:	80 95       	com	r24
    157a:	84 23       	and	r24, r20
    157c:	8c 93       	st	X, r24
    157e:	2b c0       	rjmp	.+86     	; 0x15d6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	81 30       	cpi	r24, 0x01	; 1
    1584:	a1 f4       	brne	.+40     	; 0x15ae <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1586:	a1 e3       	ldi	r26, 0x31	; 49
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e1 e3       	ldi	r30, 0x31	; 49
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	48 2f       	mov	r20, r24
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	02 2e       	mov	r0, r18
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <GPIO_setupPinDirection+0x194>
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	0a 94       	dec	r0
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <GPIO_setupPinDirection+0x190>
    15a8:	84 2b       	or	r24, r20
    15aa:	8c 93       	st	X, r24
    15ac:	14 c0       	rjmp	.+40     	; 0x15d6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    15ae:	a1 e3       	ldi	r26, 0x31	; 49
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e1 e3       	ldi	r30, 0x31	; 49
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	48 2f       	mov	r20, r24
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	02 2e       	mov	r0, r18
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <GPIO_setupPinDirection+0x1bc>
    15c8:	88 0f       	add	r24, r24
    15ca:	99 1f       	adc	r25, r25
    15cc:	0a 94       	dec	r0
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <GPIO_setupPinDirection+0x1b8>
    15d0:	80 95       	com	r24
    15d2:	84 23       	and	r24, r20
    15d4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	08 95       	ret

000015e6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    15e6:	df 93       	push	r29
    15e8:	cf 93       	push	r28
    15ea:	00 d0       	rcall	.+0      	; 0x15ec <GPIO_writePin+0x6>
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <GPIO_writePin+0x8>
    15ee:	0f 92       	push	r0
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	6a 83       	std	Y+2, r22	; 0x02
    15f8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	88 30       	cpi	r24, 0x08	; 8
    15fe:	08 f0       	brcs	.+2      	; 0x1602 <GPIO_writePin+0x1c>
    1600:	d5 c0       	rjmp	.+426    	; 0x17ac <GPIO_writePin+0x1c6>
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	84 30       	cpi	r24, 0x04	; 4
    1606:	08 f0       	brcs	.+2      	; 0x160a <GPIO_writePin+0x24>
    1608:	d1 c0       	rjmp	.+418    	; 0x17ac <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	3d 83       	std	Y+5, r19	; 0x05
    1612:	2c 83       	std	Y+4, r18	; 0x04
    1614:	8c 81       	ldd	r24, Y+4	; 0x04
    1616:	9d 81       	ldd	r25, Y+5	; 0x05
    1618:	81 30       	cpi	r24, 0x01	; 1
    161a:	91 05       	cpc	r25, r1
    161c:	09 f4       	brne	.+2      	; 0x1620 <GPIO_writePin+0x3a>
    161e:	43 c0       	rjmp	.+134    	; 0x16a6 <GPIO_writePin+0xc0>
    1620:	2c 81       	ldd	r18, Y+4	; 0x04
    1622:	3d 81       	ldd	r19, Y+5	; 0x05
    1624:	22 30       	cpi	r18, 0x02	; 2
    1626:	31 05       	cpc	r19, r1
    1628:	2c f4       	brge	.+10     	; 0x1634 <GPIO_writePin+0x4e>
    162a:	8c 81       	ldd	r24, Y+4	; 0x04
    162c:	9d 81       	ldd	r25, Y+5	; 0x05
    162e:	00 97       	sbiw	r24, 0x00	; 0
    1630:	71 f0       	breq	.+28     	; 0x164e <GPIO_writePin+0x68>
    1632:	bc c0       	rjmp	.+376    	; 0x17ac <GPIO_writePin+0x1c6>
    1634:	2c 81       	ldd	r18, Y+4	; 0x04
    1636:	3d 81       	ldd	r19, Y+5	; 0x05
    1638:	22 30       	cpi	r18, 0x02	; 2
    163a:	31 05       	cpc	r19, r1
    163c:	09 f4       	brne	.+2      	; 0x1640 <GPIO_writePin+0x5a>
    163e:	5f c0       	rjmp	.+190    	; 0x16fe <GPIO_writePin+0x118>
    1640:	8c 81       	ldd	r24, Y+4	; 0x04
    1642:	9d 81       	ldd	r25, Y+5	; 0x05
    1644:	83 30       	cpi	r24, 0x03	; 3
    1646:	91 05       	cpc	r25, r1
    1648:	09 f4       	brne	.+2      	; 0x164c <GPIO_writePin+0x66>
    164a:	85 c0       	rjmp	.+266    	; 0x1756 <GPIO_writePin+0x170>
    164c:	af c0       	rjmp	.+350    	; 0x17ac <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	81 30       	cpi	r24, 0x01	; 1
    1652:	a1 f4       	brne	.+40     	; 0x167c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1654:	ab e3       	ldi	r26, 0x3B	; 59
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	eb e3       	ldi	r30, 0x3B	; 59
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	48 2f       	mov	r20, r24
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	02 2e       	mov	r0, r18
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <GPIO_writePin+0x8c>
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	0a 94       	dec	r0
    1674:	e2 f7       	brpl	.-8      	; 0x166e <GPIO_writePin+0x88>
    1676:	84 2b       	or	r24, r20
    1678:	8c 93       	st	X, r24
    167a:	98 c0       	rjmp	.+304    	; 0x17ac <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    167c:	ab e3       	ldi	r26, 0x3B	; 59
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	eb e3       	ldi	r30, 0x3B	; 59
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	48 2f       	mov	r20, r24
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	02 2e       	mov	r0, r18
    1694:	02 c0       	rjmp	.+4      	; 0x169a <GPIO_writePin+0xb4>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	0a 94       	dec	r0
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <GPIO_writePin+0xb0>
    169e:	80 95       	com	r24
    16a0:	84 23       	and	r24, r20
    16a2:	8c 93       	st	X, r24
    16a4:	83 c0       	rjmp	.+262    	; 0x17ac <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	81 30       	cpi	r24, 0x01	; 1
    16aa:	a1 f4       	brne	.+40     	; 0x16d4 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    16ac:	a8 e3       	ldi	r26, 0x38	; 56
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e8 e3       	ldi	r30, 0x38	; 56
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	48 2f       	mov	r20, r24
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	02 2e       	mov	r0, r18
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <GPIO_writePin+0xe4>
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	0a 94       	dec	r0
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <GPIO_writePin+0xe0>
    16ce:	84 2b       	or	r24, r20
    16d0:	8c 93       	st	X, r24
    16d2:	6c c0       	rjmp	.+216    	; 0x17ac <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    16d4:	a8 e3       	ldi	r26, 0x38	; 56
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e8 e3       	ldi	r30, 0x38	; 56
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	48 2f       	mov	r20, r24
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	02 2e       	mov	r0, r18
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <GPIO_writePin+0x10c>
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	0a 94       	dec	r0
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <GPIO_writePin+0x108>
    16f6:	80 95       	com	r24
    16f8:	84 23       	and	r24, r20
    16fa:	8c 93       	st	X, r24
    16fc:	57 c0       	rjmp	.+174    	; 0x17ac <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	81 30       	cpi	r24, 0x01	; 1
    1702:	a1 f4       	brne	.+40     	; 0x172c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1704:	a5 e3       	ldi	r26, 0x35	; 53
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e5 e3       	ldi	r30, 0x35	; 53
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	48 2f       	mov	r20, r24
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	02 2e       	mov	r0, r18
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <GPIO_writePin+0x13c>
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	0a 94       	dec	r0
    1724:	e2 f7       	brpl	.-8      	; 0x171e <GPIO_writePin+0x138>
    1726:	84 2b       	or	r24, r20
    1728:	8c 93       	st	X, r24
    172a:	40 c0       	rjmp	.+128    	; 0x17ac <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    172c:	a5 e3       	ldi	r26, 0x35	; 53
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e5 e3       	ldi	r30, 0x35	; 53
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	48 2f       	mov	r20, r24
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	02 2e       	mov	r0, r18
    1744:	02 c0       	rjmp	.+4      	; 0x174a <GPIO_writePin+0x164>
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	0a 94       	dec	r0
    174c:	e2 f7       	brpl	.-8      	; 0x1746 <GPIO_writePin+0x160>
    174e:	80 95       	com	r24
    1750:	84 23       	and	r24, r20
    1752:	8c 93       	st	X, r24
    1754:	2b c0       	rjmp	.+86     	; 0x17ac <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	81 30       	cpi	r24, 0x01	; 1
    175a:	a1 f4       	brne	.+40     	; 0x1784 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    175c:	a2 e3       	ldi	r26, 0x32	; 50
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e2 e3       	ldi	r30, 0x32	; 50
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	48 2f       	mov	r20, r24
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	02 2e       	mov	r0, r18
    1774:	02 c0       	rjmp	.+4      	; 0x177a <GPIO_writePin+0x194>
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	0a 94       	dec	r0
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <GPIO_writePin+0x190>
    177e:	84 2b       	or	r24, r20
    1780:	8c 93       	st	X, r24
    1782:	14 c0       	rjmp	.+40     	; 0x17ac <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1784:	a2 e3       	ldi	r26, 0x32	; 50
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e2 e3       	ldi	r30, 0x32	; 50
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	48 2f       	mov	r20, r24
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	02 2e       	mov	r0, r18
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <GPIO_writePin+0x1bc>
    179e:	88 0f       	add	r24, r24
    17a0:	99 1f       	adc	r25, r25
    17a2:	0a 94       	dec	r0
    17a4:	e2 f7       	brpl	.-8      	; 0x179e <GPIO_writePin+0x1b8>
    17a6:	80 95       	com	r24
    17a8:	84 23       	and	r24, r20
    17aa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	0f 90       	pop	r0
    17b6:	cf 91       	pop	r28
    17b8:	df 91       	pop	r29
    17ba:	08 95       	ret

000017bc <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    17bc:	df 93       	push	r29
    17be:	cf 93       	push	r28
    17c0:	00 d0       	rcall	.+0      	; 0x17c2 <GPIO_readPin+0x6>
    17c2:	00 d0       	rcall	.+0      	; 0x17c4 <GPIO_readPin+0x8>
    17c4:	0f 92       	push	r0
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
    17ca:	8a 83       	std	Y+2, r24	; 0x02
    17cc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    17ce:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	88 30       	cpi	r24, 0x08	; 8
    17d4:	08 f0       	brcs	.+2      	; 0x17d8 <GPIO_readPin+0x1c>
    17d6:	84 c0       	rjmp	.+264    	; 0x18e0 <GPIO_readPin+0x124>
    17d8:	8a 81       	ldd	r24, Y+2	; 0x02
    17da:	84 30       	cpi	r24, 0x04	; 4
    17dc:	08 f0       	brcs	.+2      	; 0x17e0 <GPIO_readPin+0x24>
    17de:	80 c0       	rjmp	.+256    	; 0x18e0 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	3d 83       	std	Y+5, r19	; 0x05
    17e8:	2c 83       	std	Y+4, r18	; 0x04
    17ea:	4c 81       	ldd	r20, Y+4	; 0x04
    17ec:	5d 81       	ldd	r21, Y+5	; 0x05
    17ee:	41 30       	cpi	r20, 0x01	; 1
    17f0:	51 05       	cpc	r21, r1
    17f2:	79 f1       	breq	.+94     	; 0x1852 <GPIO_readPin+0x96>
    17f4:	8c 81       	ldd	r24, Y+4	; 0x04
    17f6:	9d 81       	ldd	r25, Y+5	; 0x05
    17f8:	82 30       	cpi	r24, 0x02	; 2
    17fa:	91 05       	cpc	r25, r1
    17fc:	34 f4       	brge	.+12     	; 0x180a <GPIO_readPin+0x4e>
    17fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1800:	3d 81       	ldd	r19, Y+5	; 0x05
    1802:	21 15       	cp	r18, r1
    1804:	31 05       	cpc	r19, r1
    1806:	69 f0       	breq	.+26     	; 0x1822 <GPIO_readPin+0x66>
    1808:	6b c0       	rjmp	.+214    	; 0x18e0 <GPIO_readPin+0x124>
    180a:	4c 81       	ldd	r20, Y+4	; 0x04
    180c:	5d 81       	ldd	r21, Y+5	; 0x05
    180e:	42 30       	cpi	r20, 0x02	; 2
    1810:	51 05       	cpc	r21, r1
    1812:	b9 f1       	breq	.+110    	; 0x1882 <GPIO_readPin+0xc6>
    1814:	8c 81       	ldd	r24, Y+4	; 0x04
    1816:	9d 81       	ldd	r25, Y+5	; 0x05
    1818:	83 30       	cpi	r24, 0x03	; 3
    181a:	91 05       	cpc	r25, r1
    181c:	09 f4       	brne	.+2      	; 0x1820 <GPIO_readPin+0x64>
    181e:	49 c0       	rjmp	.+146    	; 0x18b2 <GPIO_readPin+0xf6>
    1820:	5f c0       	rjmp	.+190    	; 0x18e0 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1822:	e9 e3       	ldi	r30, 0x39	; 57
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	88 2f       	mov	r24, r24
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	a9 01       	movw	r20, r18
    1834:	02 c0       	rjmp	.+4      	; 0x183a <GPIO_readPin+0x7e>
    1836:	55 95       	asr	r21
    1838:	47 95       	ror	r20
    183a:	8a 95       	dec	r24
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <GPIO_readPin+0x7a>
    183e:	ca 01       	movw	r24, r20
    1840:	81 70       	andi	r24, 0x01	; 1
    1842:	90 70       	andi	r25, 0x00	; 0
    1844:	88 23       	and	r24, r24
    1846:	19 f0       	breq	.+6      	; 0x184e <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	89 83       	std	Y+1, r24	; 0x01
    184c:	49 c0       	rjmp	.+146    	; 0x18e0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    184e:	19 82       	std	Y+1, r1	; 0x01
    1850:	47 c0       	rjmp	.+142    	; 0x18e0 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1852:	e6 e3       	ldi	r30, 0x36	; 54
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	88 2f       	mov	r24, r24
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	a9 01       	movw	r20, r18
    1864:	02 c0       	rjmp	.+4      	; 0x186a <GPIO_readPin+0xae>
    1866:	55 95       	asr	r21
    1868:	47 95       	ror	r20
    186a:	8a 95       	dec	r24
    186c:	e2 f7       	brpl	.-8      	; 0x1866 <GPIO_readPin+0xaa>
    186e:	ca 01       	movw	r24, r20
    1870:	81 70       	andi	r24, 0x01	; 1
    1872:	90 70       	andi	r25, 0x00	; 0
    1874:	88 23       	and	r24, r24
    1876:	19 f0       	breq	.+6      	; 0x187e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	31 c0       	rjmp	.+98     	; 0x18e0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    187e:	19 82       	std	Y+1, r1	; 0x01
    1880:	2f c0       	rjmp	.+94     	; 0x18e0 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1882:	e3 e3       	ldi	r30, 0x33	; 51
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	88 2f       	mov	r24, r24
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	a9 01       	movw	r20, r18
    1894:	02 c0       	rjmp	.+4      	; 0x189a <GPIO_readPin+0xde>
    1896:	55 95       	asr	r21
    1898:	47 95       	ror	r20
    189a:	8a 95       	dec	r24
    189c:	e2 f7       	brpl	.-8      	; 0x1896 <GPIO_readPin+0xda>
    189e:	ca 01       	movw	r24, r20
    18a0:	81 70       	andi	r24, 0x01	; 1
    18a2:	90 70       	andi	r25, 0x00	; 0
    18a4:	88 23       	and	r24, r24
    18a6:	19 f0       	breq	.+6      	; 0x18ae <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	19 c0       	rjmp	.+50     	; 0x18e0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18ae:	19 82       	std	Y+1, r1	; 0x01
    18b0:	17 c0       	rjmp	.+46     	; 0x18e0 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    18b2:	e0 e3       	ldi	r30, 0x30	; 48
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	88 2f       	mov	r24, r24
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	a9 01       	movw	r20, r18
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <GPIO_readPin+0x10e>
    18c6:	55 95       	asr	r21
    18c8:	47 95       	ror	r20
    18ca:	8a 95       	dec	r24
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <GPIO_readPin+0x10a>
    18ce:	ca 01       	movw	r24, r20
    18d0:	81 70       	andi	r24, 0x01	; 1
    18d2:	90 70       	andi	r25, 0x00	; 0
    18d4:	88 23       	and	r24, r24
    18d6:	19 f0       	breq	.+6      	; 0x18de <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	89 83       	std	Y+1, r24	; 0x01
    18dc:	01 c0       	rjmp	.+2      	; 0x18e0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18de:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	cf 91       	pop	r28
    18ee:	df 91       	pop	r29
    18f0:	08 95       	ret

000018f2 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    18f2:	df 93       	push	r29
    18f4:	cf 93       	push	r28
    18f6:	00 d0       	rcall	.+0      	; 0x18f8 <GPIO_setupPortDirection+0x6>
    18f8:	00 d0       	rcall	.+0      	; 0x18fa <GPIO_setupPortDirection+0x8>
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	89 83       	std	Y+1, r24	; 0x01
    1900:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	84 30       	cpi	r24, 0x04	; 4
    1906:	90 f5       	brcc	.+100    	; 0x196c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1908:	89 81       	ldd	r24, Y+1	; 0x01
    190a:	28 2f       	mov	r18, r24
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	3c 83       	std	Y+4, r19	; 0x04
    1910:	2b 83       	std	Y+3, r18	; 0x03
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	9c 81       	ldd	r25, Y+4	; 0x04
    1916:	81 30       	cpi	r24, 0x01	; 1
    1918:	91 05       	cpc	r25, r1
    191a:	d1 f0       	breq	.+52     	; 0x1950 <GPIO_setupPortDirection+0x5e>
    191c:	2b 81       	ldd	r18, Y+3	; 0x03
    191e:	3c 81       	ldd	r19, Y+4	; 0x04
    1920:	22 30       	cpi	r18, 0x02	; 2
    1922:	31 05       	cpc	r19, r1
    1924:	2c f4       	brge	.+10     	; 0x1930 <GPIO_setupPortDirection+0x3e>
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	9c 81       	ldd	r25, Y+4	; 0x04
    192a:	00 97       	sbiw	r24, 0x00	; 0
    192c:	61 f0       	breq	.+24     	; 0x1946 <GPIO_setupPortDirection+0x54>
    192e:	1e c0       	rjmp	.+60     	; 0x196c <GPIO_setupPortDirection+0x7a>
    1930:	2b 81       	ldd	r18, Y+3	; 0x03
    1932:	3c 81       	ldd	r19, Y+4	; 0x04
    1934:	22 30       	cpi	r18, 0x02	; 2
    1936:	31 05       	cpc	r19, r1
    1938:	81 f0       	breq	.+32     	; 0x195a <GPIO_setupPortDirection+0x68>
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	9c 81       	ldd	r25, Y+4	; 0x04
    193e:	83 30       	cpi	r24, 0x03	; 3
    1940:	91 05       	cpc	r25, r1
    1942:	81 f0       	breq	.+32     	; 0x1964 <GPIO_setupPortDirection+0x72>
    1944:	13 c0       	rjmp	.+38     	; 0x196c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1946:	ea e3       	ldi	r30, 0x3A	; 58
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	80 83       	st	Z, r24
    194e:	0e c0       	rjmp	.+28     	; 0x196c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1950:	e7 e3       	ldi	r30, 0x37	; 55
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	80 83       	st	Z, r24
    1958:	09 c0       	rjmp	.+18     	; 0x196c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    195a:	e4 e3       	ldi	r30, 0x34	; 52
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	80 83       	st	Z, r24
    1962:	04 c0       	rjmp	.+8      	; 0x196c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1964:	e1 e3       	ldi	r30, 0x31	; 49
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	8a 81       	ldd	r24, Y+2	; 0x02
    196a:	80 83       	st	Z, r24
			break;
		}
	}
}
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	cf 91       	pop	r28
    1976:	df 91       	pop	r29
    1978:	08 95       	ret

0000197a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    197a:	df 93       	push	r29
    197c:	cf 93       	push	r28
    197e:	00 d0       	rcall	.+0      	; 0x1980 <GPIO_writePort+0x6>
    1980:	00 d0       	rcall	.+0      	; 0x1982 <GPIO_writePort+0x8>
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
    1986:	89 83       	std	Y+1, r24	; 0x01
    1988:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	84 30       	cpi	r24, 0x04	; 4
    198e:	90 f5       	brcc	.+100    	; 0x19f4 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1990:	89 81       	ldd	r24, Y+1	; 0x01
    1992:	28 2f       	mov	r18, r24
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	3c 83       	std	Y+4, r19	; 0x04
    1998:	2b 83       	std	Y+3, r18	; 0x03
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	9c 81       	ldd	r25, Y+4	; 0x04
    199e:	81 30       	cpi	r24, 0x01	; 1
    19a0:	91 05       	cpc	r25, r1
    19a2:	d1 f0       	breq	.+52     	; 0x19d8 <GPIO_writePort+0x5e>
    19a4:	2b 81       	ldd	r18, Y+3	; 0x03
    19a6:	3c 81       	ldd	r19, Y+4	; 0x04
    19a8:	22 30       	cpi	r18, 0x02	; 2
    19aa:	31 05       	cpc	r19, r1
    19ac:	2c f4       	brge	.+10     	; 0x19b8 <GPIO_writePort+0x3e>
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	9c 81       	ldd	r25, Y+4	; 0x04
    19b2:	00 97       	sbiw	r24, 0x00	; 0
    19b4:	61 f0       	breq	.+24     	; 0x19ce <GPIO_writePort+0x54>
    19b6:	1e c0       	rjmp	.+60     	; 0x19f4 <GPIO_writePort+0x7a>
    19b8:	2b 81       	ldd	r18, Y+3	; 0x03
    19ba:	3c 81       	ldd	r19, Y+4	; 0x04
    19bc:	22 30       	cpi	r18, 0x02	; 2
    19be:	31 05       	cpc	r19, r1
    19c0:	81 f0       	breq	.+32     	; 0x19e2 <GPIO_writePort+0x68>
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	9c 81       	ldd	r25, Y+4	; 0x04
    19c6:	83 30       	cpi	r24, 0x03	; 3
    19c8:	91 05       	cpc	r25, r1
    19ca:	81 f0       	breq	.+32     	; 0x19ec <GPIO_writePort+0x72>
    19cc:	13 c0       	rjmp	.+38     	; 0x19f4 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    19ce:	eb e3       	ldi	r30, 0x3B	; 59
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	8a 81       	ldd	r24, Y+2	; 0x02
    19d4:	80 83       	st	Z, r24
    19d6:	0e c0       	rjmp	.+28     	; 0x19f4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    19d8:	e8 e3       	ldi	r30, 0x38	; 56
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
    19de:	80 83       	st	Z, r24
    19e0:	09 c0       	rjmp	.+18     	; 0x19f4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    19e2:	e5 e3       	ldi	r30, 0x35	; 53
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	80 83       	st	Z, r24
    19ea:	04 c0       	rjmp	.+8      	; 0x19f4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    19ec:	e2 e3       	ldi	r30, 0x32	; 50
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	80 83       	st	Z, r24
			break;
		}
	}
}
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	cf 91       	pop	r28
    19fe:	df 91       	pop	r29
    1a00:	08 95       	ret

00001a02 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1a02:	df 93       	push	r29
    1a04:	cf 93       	push	r28
    1a06:	00 d0       	rcall	.+0      	; 0x1a08 <GPIO_readPort+0x6>
    1a08:	00 d0       	rcall	.+0      	; 0x1a0a <GPIO_readPort+0x8>
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
    1a0e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1a10:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	84 30       	cpi	r24, 0x04	; 4
    1a16:	90 f5       	brcc	.+100    	; 0x1a7c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1a18:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1a:	28 2f       	mov	r18, r24
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	3c 83       	std	Y+4, r19	; 0x04
    1a20:	2b 83       	std	Y+3, r18	; 0x03
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	9c 81       	ldd	r25, Y+4	; 0x04
    1a26:	81 30       	cpi	r24, 0x01	; 1
    1a28:	91 05       	cpc	r25, r1
    1a2a:	d1 f0       	breq	.+52     	; 0x1a60 <GPIO_readPort+0x5e>
    1a2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a30:	22 30       	cpi	r18, 0x02	; 2
    1a32:	31 05       	cpc	r19, r1
    1a34:	2c f4       	brge	.+10     	; 0x1a40 <GPIO_readPort+0x3e>
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3a:	00 97       	sbiw	r24, 0x00	; 0
    1a3c:	61 f0       	breq	.+24     	; 0x1a56 <GPIO_readPort+0x54>
    1a3e:	1e c0       	rjmp	.+60     	; 0x1a7c <GPIO_readPort+0x7a>
    1a40:	2b 81       	ldd	r18, Y+3	; 0x03
    1a42:	3c 81       	ldd	r19, Y+4	; 0x04
    1a44:	22 30       	cpi	r18, 0x02	; 2
    1a46:	31 05       	cpc	r19, r1
    1a48:	81 f0       	breq	.+32     	; 0x1a6a <GPIO_readPort+0x68>
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4e:	83 30       	cpi	r24, 0x03	; 3
    1a50:	91 05       	cpc	r25, r1
    1a52:	81 f0       	breq	.+32     	; 0x1a74 <GPIO_readPort+0x72>
    1a54:	13 c0       	rjmp	.+38     	; 0x1a7c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1a56:	e9 e3       	ldi	r30, 0x39	; 57
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	89 83       	std	Y+1, r24	; 0x01
    1a5e:	0e c0       	rjmp	.+28     	; 0x1a7c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1a60:	e6 e3       	ldi	r30, 0x36	; 54
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	89 83       	std	Y+1, r24	; 0x01
    1a68:	09 c0       	rjmp	.+18     	; 0x1a7c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1a6a:	e3 e3       	ldi	r30, 0x33	; 51
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	89 83       	std	Y+1, r24	; 0x01
    1a72:	04 c0       	rjmp	.+8      	; 0x1a7c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1a74:	e0 e3       	ldi	r30, 0x30	; 48
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	cf 91       	pop	r28
    1a88:	df 91       	pop	r29
    1a8a:	08 95       	ret

00001a8c <EEPROM_write>:


#include "internal_eeprom.h"

void EEPROM_write(unsigned short uiAddress, unsigned char ucData) {
    1a8c:	df 93       	push	r29
    1a8e:	cf 93       	push	r28
    1a90:	00 d0       	rcall	.+0      	; 0x1a92 <EEPROM_write+0x6>
    1a92:	0f 92       	push	r0
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
    1a98:	9a 83       	std	Y+2, r25	; 0x02
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    1a9c:	6b 83       	std	Y+3, r22	; 0x03
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE)) ;
    1a9e:	ec e3       	ldi	r30, 0x3C	; 60
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	88 2f       	mov	r24, r24
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	82 70       	andi	r24, 0x02	; 2
    1aaa:	90 70       	andi	r25, 0x00	; 0
    1aac:	00 97       	sbiw	r24, 0x00	; 0
    1aae:	b9 f7       	brne	.-18     	; 0x1a9e <EEPROM_write+0x12>
	/* Set up address and data registers */
	EEAR = uiAddress; EEDR = ucData;
    1ab0:	ee e3       	ldi	r30, 0x3E	; 62
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab8:	91 83       	std	Z+1, r25	; 0x01
    1aba:	80 83       	st	Z, r24
    1abc:	ed e3       	ldi	r30, 0x3D	; 61
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	80 83       	st	Z, r24
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
    1ac4:	ac e3       	ldi	r26, 0x3C	; 60
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	ec e3       	ldi	r30, 0x3C	; 60
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	84 60       	ori	r24, 0x04	; 4
    1ad0:	8c 93       	st	X, r24
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
    1ad2:	ac e3       	ldi	r26, 0x3C	; 60
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	ec e3       	ldi	r30, 0x3C	; 60
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	82 60       	ori	r24, 0x02	; 2
    1ade:	8c 93       	st	X, r24
}
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	cf 91       	pop	r28
    1ae8:	df 91       	pop	r29
    1aea:	08 95       	ret

00001aec <EEPROM_read>:

unsigned char EEPROM_read(unsigned short uiAddress) {
    1aec:	df 93       	push	r29
    1aee:	cf 93       	push	r28
    1af0:	00 d0       	rcall	.+0      	; 0x1af2 <EEPROM_read+0x6>
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
    1af6:	9a 83       	std	Y+2, r25	; 0x02
    1af8:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE)) ;
    1afa:	ec e3       	ldi	r30, 0x3C	; 60
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	88 2f       	mov	r24, r24
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	82 70       	andi	r24, 0x02	; 2
    1b06:	90 70       	andi	r25, 0x00	; 0
    1b08:	00 97       	sbiw	r24, 0x00	; 0
    1b0a:	b9 f7       	brne	.-18     	; 0x1afa <EEPROM_read+0xe>
	/* Set up address register */
	EEAR = uiAddress;
    1b0c:	ee e3       	ldi	r30, 0x3E	; 62
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	9a 81       	ldd	r25, Y+2	; 0x02
    1b14:	91 83       	std	Z+1, r25	; 0x01
    1b16:	80 83       	st	Z, r24
/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    1b18:	ac e3       	ldi	r26, 0x3C	; 60
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	ec e3       	ldi	r30, 0x3C	; 60
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	81 60       	ori	r24, 0x01	; 1
    1b24:	8c 93       	st	X, r24
	/* Return data from data register */
	return EEDR;
    1b26:	ed e3       	ldi	r30, 0x3D	; 61
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
}
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	08 95       	ret

00001b36 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <KEYPAD_getPressedKey+0x6>
    1b3c:	0f 92       	push	r0
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1b42:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1b44:	1b 82       	std	Y+3, r1	; 0x03
    1b46:	42 c0       	rjmp	.+132    	; 0x1bcc <KEYPAD_getPressedKey+0x96>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	60 e0       	ldi	r22, 0x00	; 0
    1b4c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	98 2f       	mov	r25, r24
    1b54:	9c 5f       	subi	r25, 0xFC	; 252
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	69 2f       	mov	r22, r25
    1b5a:	41 e0       	ldi	r20, 0x01	; 1
    1b5c:	0e 94 08 0a 	call	0x1410	; 0x1410 <GPIO_setupPinDirection>
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	88 2f       	mov	r24, r24
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	9c 01       	movw	r18, r24
    1b68:	2c 5f       	subi	r18, 0xFC	; 252
    1b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <KEYPAD_getPressedKey+0x40>
    1b72:	88 0f       	add	r24, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	2a 95       	dec	r18
    1b78:	e2 f7       	brpl	.-8      	; 0x1b72 <KEYPAD_getPressedKey+0x3c>
    1b7a:	89 83       	std	Y+1, r24	; 0x01
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	69 81       	ldd	r22, Y+1	; 0x01
    1b80:	0e 94 bd 0c 	call	0x197a	; 0x197a <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1b84:	1a 82       	std	Y+2, r1	; 0x02
    1b86:	1c c0       	rjmp	.+56     	; 0x1bc0 <KEYPAD_getPressedKey+0x8a>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	6a 81       	ldd	r22, Y+2	; 0x02
    1b8c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <GPIO_readPin>
    1b90:	81 30       	cpi	r24, 0x01	; 1
    1b92:	99 f4       	brne	.+38     	; 0x1bba <KEYPAD_getPressedKey+0x84>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	88 2f       	mov	r24, r24
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	88 0f       	add	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	98 2f       	mov	r25, r24
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	89 0f       	add	r24, r25
    1ba8:	8f 5f       	subi	r24, 0xFF	; 255
    1baa:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
    1bb4:	cf 91       	pop	r28
    1bb6:	df 91       	pop	r29
    1bb8:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	8f 5f       	subi	r24, 0xFF	; 255
    1bbe:	8a 83       	std	Y+2, r24	; 0x02
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	84 30       	cpi	r24, 0x04	; 4
    1bc4:	08 f3       	brcs	.-62     	; 0x1b88 <KEYPAD_getPressedKey+0x52>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	8f 5f       	subi	r24, 0xFF	; 255
    1bca:	8b 83       	std	Y+3, r24	; 0x03
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	84 30       	cpi	r24, 0x04	; 4
    1bd0:	08 f4       	brcc	.+2      	; 0x1bd4 <KEYPAD_getPressedKey+0x9e>
    1bd2:	ba cf       	rjmp	.-140    	; 0x1b48 <KEYPAD_getPressedKey+0x12>
    1bd4:	b7 cf       	rjmp	.-146    	; 0x1b44 <KEYPAD_getPressedKey+0xe>

00001bd6 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	00 d0       	rcall	.+0      	; 0x1bdc <KEYPAD_4x4_adjustKeyNumber+0x6>
    1bdc:	00 d0       	rcall	.+0      	; 0x1bde <KEYPAD_4x4_adjustKeyNumber+0x8>
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
    1be2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1be4:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	3c 83       	std	Y+4, r19	; 0x04
    1bee:	2b 83       	std	Y+3, r18	; 0x03
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf4:	88 30       	cpi	r24, 0x08	; 8
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	09 f4       	brne	.+2      	; 0x1bfc <KEYPAD_4x4_adjustKeyNumber+0x26>
    1bfa:	70 c0       	rjmp	.+224    	; 0x1cdc <KEYPAD_4x4_adjustKeyNumber+0x106>
    1bfc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bfe:	3c 81       	ldd	r19, Y+4	; 0x04
    1c00:	29 30       	cpi	r18, 0x09	; 9
    1c02:	31 05       	cpc	r19, r1
    1c04:	5c f5       	brge	.+86     	; 0x1c5c <KEYPAD_4x4_adjustKeyNumber+0x86>
    1c06:	8b 81       	ldd	r24, Y+3	; 0x03
    1c08:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0a:	84 30       	cpi	r24, 0x04	; 4
    1c0c:	91 05       	cpc	r25, r1
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1c10:	59 c0       	rjmp	.+178    	; 0x1cc4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1c12:	2b 81       	ldd	r18, Y+3	; 0x03
    1c14:	3c 81       	ldd	r19, Y+4	; 0x04
    1c16:	25 30       	cpi	r18, 0x05	; 5
    1c18:	31 05       	cpc	r19, r1
    1c1a:	9c f4       	brge	.+38     	; 0x1c42 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c20:	82 30       	cpi	r24, 0x02	; 2
    1c22:	91 05       	cpc	r25, r1
    1c24:	09 f4       	brne	.+2      	; 0x1c28 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1c26:	48 c0       	rjmp	.+144    	; 0x1cb8 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1c28:	2b 81       	ldd	r18, Y+3	; 0x03
    1c2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c2c:	23 30       	cpi	r18, 0x03	; 3
    1c2e:	31 05       	cpc	r19, r1
    1c30:	0c f0       	brlt	.+2      	; 0x1c34 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1c32:	45 c0       	rjmp	.+138    	; 0x1cbe <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1c34:	8b 81       	ldd	r24, Y+3	; 0x03
    1c36:	9c 81       	ldd	r25, Y+4	; 0x04
    1c38:	81 30       	cpi	r24, 0x01	; 1
    1c3a:	91 05       	cpc	r25, r1
    1c3c:	09 f4       	brne	.+2      	; 0x1c40 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1c3e:	39 c0       	rjmp	.+114    	; 0x1cb2 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1c40:	67 c0       	rjmp	.+206    	; 0x1d10 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1c42:	2b 81       	ldd	r18, Y+3	; 0x03
    1c44:	3c 81       	ldd	r19, Y+4	; 0x04
    1c46:	26 30       	cpi	r18, 0x06	; 6
    1c48:	31 05       	cpc	r19, r1
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <KEYPAD_4x4_adjustKeyNumber+0x78>
    1c4c:	41 c0       	rjmp	.+130    	; 0x1cd0 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	9c 81       	ldd	r25, Y+4	; 0x04
    1c52:	87 30       	cpi	r24, 0x07	; 7
    1c54:	91 05       	cpc	r25, r1
    1c56:	0c f0       	brlt	.+2      	; 0x1c5a <KEYPAD_4x4_adjustKeyNumber+0x84>
    1c58:	3e c0       	rjmp	.+124    	; 0x1cd6 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1c5a:	37 c0       	rjmp	.+110    	; 0x1cca <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1c5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c60:	2c 30       	cpi	r18, 0x0C	; 12
    1c62:	31 05       	cpc	r19, r1
    1c64:	09 f4       	brne	.+2      	; 0x1c68 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1c66:	46 c0       	rjmp	.+140    	; 0x1cf4 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1c68:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6c:	8d 30       	cpi	r24, 0x0D	; 13
    1c6e:	91 05       	cpc	r25, r1
    1c70:	5c f4       	brge	.+22     	; 0x1c88 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1c72:	2b 81       	ldd	r18, Y+3	; 0x03
    1c74:	3c 81       	ldd	r19, Y+4	; 0x04
    1c76:	2a 30       	cpi	r18, 0x0A	; 10
    1c78:	31 05       	cpc	r19, r1
    1c7a:	b1 f1       	breq	.+108    	; 0x1ce8 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c80:	8b 30       	cpi	r24, 0x0B	; 11
    1c82:	91 05       	cpc	r25, r1
    1c84:	a4 f5       	brge	.+104    	; 0x1cee <KEYPAD_4x4_adjustKeyNumber+0x118>
    1c86:	2d c0       	rjmp	.+90     	; 0x1ce2 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1c88:	2b 81       	ldd	r18, Y+3	; 0x03
    1c8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c8c:	2e 30       	cpi	r18, 0x0E	; 14
    1c8e:	31 05       	cpc	r19, r1
    1c90:	b9 f1       	breq	.+110    	; 0x1d00 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	9c 81       	ldd	r25, Y+4	; 0x04
    1c96:	8e 30       	cpi	r24, 0x0E	; 14
    1c98:	91 05       	cpc	r25, r1
    1c9a:	7c f1       	brlt	.+94     	; 0x1cfa <KEYPAD_4x4_adjustKeyNumber+0x124>
    1c9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1ca0:	2f 30       	cpi	r18, 0x0F	; 15
    1ca2:	31 05       	cpc	r19, r1
    1ca4:	79 f1       	breq	.+94     	; 0x1d04 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca8:	9c 81       	ldd	r25, Y+4	; 0x04
    1caa:	80 31       	cpi	r24, 0x10	; 16
    1cac:	91 05       	cpc	r25, r1
    1cae:	69 f1       	breq	.+90     	; 0x1d0a <KEYPAD_4x4_adjustKeyNumber+0x134>
    1cb0:	2f c0       	rjmp	.+94     	; 0x1d10 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1cb2:	87 e0       	ldi	r24, 0x07	; 7
    1cb4:	89 83       	std	Y+1, r24	; 0x01
    1cb6:	2e c0       	rjmp	.+92     	; 0x1d14 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1cb8:	88 e0       	ldi	r24, 0x08	; 8
    1cba:	89 83       	std	Y+1, r24	; 0x01
    1cbc:	2b c0       	rjmp	.+86     	; 0x1d14 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1cbe:	89 e0       	ldi	r24, 0x09	; 9
    1cc0:	89 83       	std	Y+1, r24	; 0x01
    1cc2:	28 c0       	rjmp	.+80     	; 0x1d14 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1cc4:	85 e2       	ldi	r24, 0x25	; 37
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	25 c0       	rjmp	.+74     	; 0x1d14 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1cca:	84 e0       	ldi	r24, 0x04	; 4
    1ccc:	89 83       	std	Y+1, r24	; 0x01
    1cce:	22 c0       	rjmp	.+68     	; 0x1d14 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1cd0:	85 e0       	ldi	r24, 0x05	; 5
    1cd2:	89 83       	std	Y+1, r24	; 0x01
    1cd4:	1f c0       	rjmp	.+62     	; 0x1d14 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1cd6:	86 e0       	ldi	r24, 0x06	; 6
    1cd8:	89 83       	std	Y+1, r24	; 0x01
    1cda:	1c c0       	rjmp	.+56     	; 0x1d14 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1cdc:	8a e2       	ldi	r24, 0x2A	; 42
    1cde:	89 83       	std	Y+1, r24	; 0x01
    1ce0:	19 c0       	rjmp	.+50     	; 0x1d14 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	89 83       	std	Y+1, r24	; 0x01
    1ce6:	16 c0       	rjmp	.+44     	; 0x1d14 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1ce8:	82 e0       	ldi	r24, 0x02	; 2
    1cea:	89 83       	std	Y+1, r24	; 0x01
    1cec:	13 c0       	rjmp	.+38     	; 0x1d14 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1cee:	83 e0       	ldi	r24, 0x03	; 3
    1cf0:	89 83       	std	Y+1, r24	; 0x01
    1cf2:	10 c0       	rjmp	.+32     	; 0x1d14 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1cf4:	8d e2       	ldi	r24, 0x2D	; 45
    1cf6:	89 83       	std	Y+1, r24	; 0x01
    1cf8:	0d c0       	rjmp	.+26     	; 0x1d14 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1cfa:	8d e0       	ldi	r24, 0x0D	; 13
    1cfc:	89 83       	std	Y+1, r24	; 0x01
    1cfe:	0a c0       	rjmp	.+20     	; 0x1d14 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1d00:	19 82       	std	Y+1, r1	; 0x01
    1d02:	08 c0       	rjmp	.+16     	; 0x1d14 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1d04:	8d e3       	ldi	r24, 0x3D	; 61
    1d06:	89 83       	std	Y+1, r24	; 0x01
    1d08:	05 c0       	rjmp	.+10     	; 0x1d14 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1d0a:	8b e2       	ldi	r24, 0x2B	; 43
    1d0c:	89 83       	std	Y+1, r24	; 0x01
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1d10:	8a 81       	ldd	r24, Y+2	; 0x02
    1d12:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	08 95       	ret

00001d24 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1d2c:	83 e0       	ldi	r24, 0x03	; 3
    1d2e:	64 e0       	ldi	r22, 0x04	; 4
    1d30:	41 e0       	ldi	r20, 0x01	; 1
    1d32:	0e 94 08 0a 	call	0x1410	; 0x1410 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1d36:	83 e0       	ldi	r24, 0x03	; 3
    1d38:	65 e0       	ldi	r22, 0x05	; 5
    1d3a:	41 e0       	ldi	r20, 0x01	; 1
    1d3c:	0e 94 08 0a 	call	0x1410	; 0x1410 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1d40:	83 e0       	ldi	r24, 0x03	; 3
    1d42:	66 e0       	ldi	r22, 0x06	; 6
    1d44:	41 e0       	ldi	r20, 0x01	; 1
    1d46:	0e 94 08 0a 	call	0x1410	; 0x1410 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1d4a:	82 e0       	ldi	r24, 0x02	; 2
    1d4c:	6f ef       	ldi	r22, 0xFF	; 255
    1d4e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1d52:	88 e3       	ldi	r24, 0x38	; 56
    1d54:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1d58:	8c e0       	ldi	r24, 0x0C	; 12
    1d5a:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_sendCommand>
}
    1d64:	cf 91       	pop	r28
    1d66:	df 91       	pop	r29
    1d68:	08 95       	ret

00001d6a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1d6a:	df 93       	push	r29
    1d6c:	cf 93       	push	r28
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
    1d72:	e9 97       	sbiw	r28, 0x39	; 57
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	f8 94       	cli
    1d78:	de bf       	out	0x3e, r29	; 62
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	cd bf       	out	0x3d, r28	; 61
    1d7e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1d80:	83 e0       	ldi	r24, 0x03	; 3
    1d82:	64 e0       	ldi	r22, 0x04	; 4
    1d84:	40 e0       	ldi	r20, 0x00	; 0
    1d86:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1d8a:	83 e0       	ldi	r24, 0x03	; 3
    1d8c:	65 e0       	ldi	r22, 0x05	; 5
    1d8e:	40 e0       	ldi	r20, 0x00	; 0
    1d90:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <GPIO_writePin>
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	a0 e8       	ldi	r26, 0x80	; 128
    1d9a:	bf e3       	ldi	r27, 0x3F	; 63
    1d9c:	8d ab       	std	Y+53, r24	; 0x35
    1d9e:	9e ab       	std	Y+54, r25	; 0x36
    1da0:	af ab       	std	Y+55, r26	; 0x37
    1da2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da4:	6d a9       	ldd	r22, Y+53	; 0x35
    1da6:	7e a9       	ldd	r23, Y+54	; 0x36
    1da8:	8f a9       	ldd	r24, Y+55	; 0x37
    1daa:	98 ad       	ldd	r25, Y+56	; 0x38
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	4a e7       	ldi	r20, 0x7A	; 122
    1db2:	53 e4       	ldi	r21, 0x43	; 67
    1db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	89 ab       	std	Y+49, r24	; 0x31
    1dbe:	9a ab       	std	Y+50, r25	; 0x32
    1dc0:	ab ab       	std	Y+51, r26	; 0x33
    1dc2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1dc4:	69 a9       	ldd	r22, Y+49	; 0x31
    1dc6:	7a a9       	ldd	r23, Y+50	; 0x32
    1dc8:	8b a9       	ldd	r24, Y+51	; 0x33
    1dca:	9c a9       	ldd	r25, Y+52	; 0x34
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	40 e8       	ldi	r20, 0x80	; 128
    1dd2:	5f e3       	ldi	r21, 0x3F	; 63
    1dd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dd8:	88 23       	and	r24, r24
    1dda:	2c f4       	brge	.+10     	; 0x1de6 <LCD_sendCommand+0x7c>
		__ticks = 1;
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	98 ab       	std	Y+48, r25	; 0x30
    1de2:	8f a7       	std	Y+47, r24	; 0x2f
    1de4:	3f c0       	rjmp	.+126    	; 0x1e64 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1de6:	69 a9       	ldd	r22, Y+49	; 0x31
    1de8:	7a a9       	ldd	r23, Y+50	; 0x32
    1dea:	8b a9       	ldd	r24, Y+51	; 0x33
    1dec:	9c a9       	ldd	r25, Y+52	; 0x34
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	3f ef       	ldi	r19, 0xFF	; 255
    1df2:	4f e7       	ldi	r20, 0x7F	; 127
    1df4:	57 e4       	ldi	r21, 0x47	; 71
    1df6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dfa:	18 16       	cp	r1, r24
    1dfc:	4c f5       	brge	.+82     	; 0x1e50 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dfe:	6d a9       	ldd	r22, Y+53	; 0x35
    1e00:	7e a9       	ldd	r23, Y+54	; 0x36
    1e02:	8f a9       	ldd	r24, Y+55	; 0x37
    1e04:	98 ad       	ldd	r25, Y+56	; 0x38
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	40 e2       	ldi	r20, 0x20	; 32
    1e0c:	51 e4       	ldi	r21, 0x41	; 65
    1e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	bc 01       	movw	r22, r24
    1e18:	cd 01       	movw	r24, r26
    1e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	98 ab       	std	Y+48, r25	; 0x30
    1e24:	8f a7       	std	Y+47, r24	; 0x2f
    1e26:	0f c0       	rjmp	.+30     	; 0x1e46 <LCD_sendCommand+0xdc>
    1e28:	89 e1       	ldi	r24, 0x19	; 25
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	9e a7       	std	Y+46, r25	; 0x2e
    1e2e:	8d a7       	std	Y+45, r24	; 0x2d
    1e30:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e32:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	f1 f7       	brne	.-4      	; 0x1e34 <LCD_sendCommand+0xca>
    1e38:	9e a7       	std	Y+46, r25	; 0x2e
    1e3a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e3e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	98 ab       	std	Y+48, r25	; 0x30
    1e44:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e48:	98 a9       	ldd	r25, Y+48	; 0x30
    1e4a:	00 97       	sbiw	r24, 0x00	; 0
    1e4c:	69 f7       	brne	.-38     	; 0x1e28 <LCD_sendCommand+0xbe>
    1e4e:	14 c0       	rjmp	.+40     	; 0x1e78 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e50:	69 a9       	ldd	r22, Y+49	; 0x31
    1e52:	7a a9       	ldd	r23, Y+50	; 0x32
    1e54:	8b a9       	ldd	r24, Y+51	; 0x33
    1e56:	9c a9       	ldd	r25, Y+52	; 0x34
    1e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	98 ab       	std	Y+48, r25	; 0x30
    1e62:	8f a7       	std	Y+47, r24	; 0x2f
    1e64:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e66:	98 a9       	ldd	r25, Y+48	; 0x30
    1e68:	9c a7       	std	Y+44, r25	; 0x2c
    1e6a:	8b a7       	std	Y+43, r24	; 0x2b
    1e6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e6e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	f1 f7       	brne	.-4      	; 0x1e70 <LCD_sendCommand+0x106>
    1e74:	9c a7       	std	Y+44, r25	; 0x2c
    1e76:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1e78:	83 e0       	ldi	r24, 0x03	; 3
    1e7a:	66 e0       	ldi	r22, 0x06	; 6
    1e7c:	41 e0       	ldi	r20, 0x01	; 1
    1e7e:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <GPIO_writePin>
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	a0 e8       	ldi	r26, 0x80	; 128
    1e88:	bf e3       	ldi	r27, 0x3F	; 63
    1e8a:	8f a3       	std	Y+39, r24	; 0x27
    1e8c:	98 a7       	std	Y+40, r25	; 0x28
    1e8e:	a9 a7       	std	Y+41, r26	; 0x29
    1e90:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e92:	6f a1       	ldd	r22, Y+39	; 0x27
    1e94:	78 a5       	ldd	r23, Y+40	; 0x28
    1e96:	89 a5       	ldd	r24, Y+41	; 0x29
    1e98:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	4a e7       	ldi	r20, 0x7A	; 122
    1ea0:	53 e4       	ldi	r21, 0x43	; 67
    1ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	8b a3       	std	Y+35, r24	; 0x23
    1eac:	9c a3       	std	Y+36, r25	; 0x24
    1eae:	ad a3       	std	Y+37, r26	; 0x25
    1eb0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1eb2:	6b a1       	ldd	r22, Y+35	; 0x23
    1eb4:	7c a1       	ldd	r23, Y+36	; 0x24
    1eb6:	8d a1       	ldd	r24, Y+37	; 0x25
    1eb8:	9e a1       	ldd	r25, Y+38	; 0x26
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	40 e8       	ldi	r20, 0x80	; 128
    1ec0:	5f e3       	ldi	r21, 0x3F	; 63
    1ec2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ec6:	88 23       	and	r24, r24
    1ec8:	2c f4       	brge	.+10     	; 0x1ed4 <LCD_sendCommand+0x16a>
		__ticks = 1;
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	9a a3       	std	Y+34, r25	; 0x22
    1ed0:	89 a3       	std	Y+33, r24	; 0x21
    1ed2:	3f c0       	rjmp	.+126    	; 0x1f52 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1ed4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ed6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ed8:	8d a1       	ldd	r24, Y+37	; 0x25
    1eda:	9e a1       	ldd	r25, Y+38	; 0x26
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	3f ef       	ldi	r19, 0xFF	; 255
    1ee0:	4f e7       	ldi	r20, 0x7F	; 127
    1ee2:	57 e4       	ldi	r21, 0x47	; 71
    1ee4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ee8:	18 16       	cp	r1, r24
    1eea:	4c f5       	brge	.+82     	; 0x1f3e <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eec:	6f a1       	ldd	r22, Y+39	; 0x27
    1eee:	78 a5       	ldd	r23, Y+40	; 0x28
    1ef0:	89 a5       	ldd	r24, Y+41	; 0x29
    1ef2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	40 e2       	ldi	r20, 0x20	; 32
    1efa:	51 e4       	ldi	r21, 0x41	; 65
    1efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	bc 01       	movw	r22, r24
    1f06:	cd 01       	movw	r24, r26
    1f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	9a a3       	std	Y+34, r25	; 0x22
    1f12:	89 a3       	std	Y+33, r24	; 0x21
    1f14:	0f c0       	rjmp	.+30     	; 0x1f34 <LCD_sendCommand+0x1ca>
    1f16:	89 e1       	ldi	r24, 0x19	; 25
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	98 a3       	std	Y+32, r25	; 0x20
    1f1c:	8f 8f       	std	Y+31, r24	; 0x1f
    1f1e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f20:	98 a1       	ldd	r25, Y+32	; 0x20
    1f22:	01 97       	sbiw	r24, 0x01	; 1
    1f24:	f1 f7       	brne	.-4      	; 0x1f22 <LCD_sendCommand+0x1b8>
    1f26:	98 a3       	std	Y+32, r25	; 0x20
    1f28:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f2a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f2c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
    1f30:	9a a3       	std	Y+34, r25	; 0x22
    1f32:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f34:	89 a1       	ldd	r24, Y+33	; 0x21
    1f36:	9a a1       	ldd	r25, Y+34	; 0x22
    1f38:	00 97       	sbiw	r24, 0x00	; 0
    1f3a:	69 f7       	brne	.-38     	; 0x1f16 <LCD_sendCommand+0x1ac>
    1f3c:	14 c0       	rjmp	.+40     	; 0x1f66 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f40:	7c a1       	ldd	r23, Y+36	; 0x24
    1f42:	8d a1       	ldd	r24, Y+37	; 0x25
    1f44:	9e a1       	ldd	r25, Y+38	; 0x26
    1f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	9a a3       	std	Y+34, r25	; 0x22
    1f50:	89 a3       	std	Y+33, r24	; 0x21
    1f52:	89 a1       	ldd	r24, Y+33	; 0x21
    1f54:	9a a1       	ldd	r25, Y+34	; 0x22
    1f56:	9e 8f       	std	Y+30, r25	; 0x1e
    1f58:	8d 8f       	std	Y+29, r24	; 0x1d
    1f5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f5c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	f1 f7       	brne	.-4      	; 0x1f5e <LCD_sendCommand+0x1f4>
    1f62:	9e 8f       	std	Y+30, r25	; 0x1e
    1f64:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1f66:	82 e0       	ldi	r24, 0x02	; 2
    1f68:	69 ad       	ldd	r22, Y+57	; 0x39
    1f6a:	0e 94 bd 0c 	call	0x197a	; 0x197a <GPIO_writePort>
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	a0 e8       	ldi	r26, 0x80	; 128
    1f74:	bf e3       	ldi	r27, 0x3F	; 63
    1f76:	89 8f       	std	Y+25, r24	; 0x19
    1f78:	9a 8f       	std	Y+26, r25	; 0x1a
    1f7a:	ab 8f       	std	Y+27, r26	; 0x1b
    1f7c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f7e:	69 8d       	ldd	r22, Y+25	; 0x19
    1f80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	4a e7       	ldi	r20, 0x7A	; 122
    1f8c:	53 e4       	ldi	r21, 0x43	; 67
    1f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	8d 8b       	std	Y+21, r24	; 0x15
    1f98:	9e 8b       	std	Y+22, r25	; 0x16
    1f9a:	af 8b       	std	Y+23, r26	; 0x17
    1f9c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	40 e8       	ldi	r20, 0x80	; 128
    1fac:	5f e3       	ldi	r21, 0x3F	; 63
    1fae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fb2:	88 23       	and	r24, r24
    1fb4:	2c f4       	brge	.+10     	; 0x1fc0 <LCD_sendCommand+0x256>
		__ticks = 1;
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	9c 8b       	std	Y+20, r25	; 0x14
    1fbc:	8b 8b       	std	Y+19, r24	; 0x13
    1fbe:	3f c0       	rjmp	.+126    	; 0x203e <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1fc0:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc2:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	3f ef       	ldi	r19, 0xFF	; 255
    1fcc:	4f e7       	ldi	r20, 0x7F	; 127
    1fce:	57 e4       	ldi	r21, 0x47	; 71
    1fd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fd4:	18 16       	cp	r1, r24
    1fd6:	4c f5       	brge	.+82     	; 0x202a <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd8:	69 8d       	ldd	r22, Y+25	; 0x19
    1fda:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fde:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	40 e2       	ldi	r20, 0x20	; 32
    1fe6:	51 e4       	ldi	r21, 0x41	; 65
    1fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	bc 01       	movw	r22, r24
    1ff2:	cd 01       	movw	r24, r26
    1ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	9c 8b       	std	Y+20, r25	; 0x14
    1ffe:	8b 8b       	std	Y+19, r24	; 0x13
    2000:	0f c0       	rjmp	.+30     	; 0x2020 <LCD_sendCommand+0x2b6>
    2002:	89 e1       	ldi	r24, 0x19	; 25
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	9a 8b       	std	Y+18, r25	; 0x12
    2008:	89 8b       	std	Y+17, r24	; 0x11
    200a:	89 89       	ldd	r24, Y+17	; 0x11
    200c:	9a 89       	ldd	r25, Y+18	; 0x12
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	f1 f7       	brne	.-4      	; 0x200e <LCD_sendCommand+0x2a4>
    2012:	9a 8b       	std	Y+18, r25	; 0x12
    2014:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2016:	8b 89       	ldd	r24, Y+19	; 0x13
    2018:	9c 89       	ldd	r25, Y+20	; 0x14
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	9c 8b       	std	Y+20, r25	; 0x14
    201e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2020:	8b 89       	ldd	r24, Y+19	; 0x13
    2022:	9c 89       	ldd	r25, Y+20	; 0x14
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	69 f7       	brne	.-38     	; 0x2002 <LCD_sendCommand+0x298>
    2028:	14 c0       	rjmp	.+40     	; 0x2052 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    202a:	6d 89       	ldd	r22, Y+21	; 0x15
    202c:	7e 89       	ldd	r23, Y+22	; 0x16
    202e:	8f 89       	ldd	r24, Y+23	; 0x17
    2030:	98 8d       	ldd	r25, Y+24	; 0x18
    2032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	9c 8b       	std	Y+20, r25	; 0x14
    203c:	8b 8b       	std	Y+19, r24	; 0x13
    203e:	8b 89       	ldd	r24, Y+19	; 0x13
    2040:	9c 89       	ldd	r25, Y+20	; 0x14
    2042:	98 8b       	std	Y+16, r25	; 0x10
    2044:	8f 87       	std	Y+15, r24	; 0x0f
    2046:	8f 85       	ldd	r24, Y+15	; 0x0f
    2048:	98 89       	ldd	r25, Y+16	; 0x10
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	f1 f7       	brne	.-4      	; 0x204a <LCD_sendCommand+0x2e0>
    204e:	98 8b       	std	Y+16, r25	; 0x10
    2050:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2052:	83 e0       	ldi	r24, 0x03	; 3
    2054:	66 e0       	ldi	r22, 0x06	; 6
    2056:	40 e0       	ldi	r20, 0x00	; 0
    2058:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <GPIO_writePin>
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	a0 e8       	ldi	r26, 0x80	; 128
    2062:	bf e3       	ldi	r27, 0x3F	; 63
    2064:	8b 87       	std	Y+11, r24	; 0x0b
    2066:	9c 87       	std	Y+12, r25	; 0x0c
    2068:	ad 87       	std	Y+13, r26	; 0x0d
    206a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    206c:	6b 85       	ldd	r22, Y+11	; 0x0b
    206e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2070:	8d 85       	ldd	r24, Y+13	; 0x0d
    2072:	9e 85       	ldd	r25, Y+14	; 0x0e
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	4a e7       	ldi	r20, 0x7A	; 122
    207a:	53 e4       	ldi	r21, 0x43	; 67
    207c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	8f 83       	std	Y+7, r24	; 0x07
    2086:	98 87       	std	Y+8, r25	; 0x08
    2088:	a9 87       	std	Y+9, r26	; 0x09
    208a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    208c:	6f 81       	ldd	r22, Y+7	; 0x07
    208e:	78 85       	ldd	r23, Y+8	; 0x08
    2090:	89 85       	ldd	r24, Y+9	; 0x09
    2092:	9a 85       	ldd	r25, Y+10	; 0x0a
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	40 e8       	ldi	r20, 0x80	; 128
    209a:	5f e3       	ldi	r21, 0x3F	; 63
    209c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20a0:	88 23       	and	r24, r24
    20a2:	2c f4       	brge	.+10     	; 0x20ae <LCD_sendCommand+0x344>
		__ticks = 1;
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	9e 83       	std	Y+6, r25	; 0x06
    20aa:	8d 83       	std	Y+5, r24	; 0x05
    20ac:	3f c0       	rjmp	.+126    	; 0x212c <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    20ae:	6f 81       	ldd	r22, Y+7	; 0x07
    20b0:	78 85       	ldd	r23, Y+8	; 0x08
    20b2:	89 85       	ldd	r24, Y+9	; 0x09
    20b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	3f ef       	ldi	r19, 0xFF	; 255
    20ba:	4f e7       	ldi	r20, 0x7F	; 127
    20bc:	57 e4       	ldi	r21, 0x47	; 71
    20be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20c2:	18 16       	cp	r1, r24
    20c4:	4c f5       	brge	.+82     	; 0x2118 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    20cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e2       	ldi	r20, 0x20	; 32
    20d4:	51 e4       	ldi	r21, 0x41	; 65
    20d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	bc 01       	movw	r22, r24
    20e0:	cd 01       	movw	r24, r26
    20e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	9e 83       	std	Y+6, r25	; 0x06
    20ec:	8d 83       	std	Y+5, r24	; 0x05
    20ee:	0f c0       	rjmp	.+30     	; 0x210e <LCD_sendCommand+0x3a4>
    20f0:	89 e1       	ldi	r24, 0x19	; 25
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	9c 83       	std	Y+4, r25	; 0x04
    20f6:	8b 83       	std	Y+3, r24	; 0x03
    20f8:	8b 81       	ldd	r24, Y+3	; 0x03
    20fa:	9c 81       	ldd	r25, Y+4	; 0x04
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	f1 f7       	brne	.-4      	; 0x20fc <LCD_sendCommand+0x392>
    2100:	9c 83       	std	Y+4, r25	; 0x04
    2102:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2104:	8d 81       	ldd	r24, Y+5	; 0x05
    2106:	9e 81       	ldd	r25, Y+6	; 0x06
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	9e 83       	std	Y+6, r25	; 0x06
    210c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210e:	8d 81       	ldd	r24, Y+5	; 0x05
    2110:	9e 81       	ldd	r25, Y+6	; 0x06
    2112:	00 97       	sbiw	r24, 0x00	; 0
    2114:	69 f7       	brne	.-38     	; 0x20f0 <LCD_sendCommand+0x386>
    2116:	14 c0       	rjmp	.+40     	; 0x2140 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2118:	6f 81       	ldd	r22, Y+7	; 0x07
    211a:	78 85       	ldd	r23, Y+8	; 0x08
    211c:	89 85       	ldd	r24, Y+9	; 0x09
    211e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	9e 83       	std	Y+6, r25	; 0x06
    212a:	8d 83       	std	Y+5, r24	; 0x05
    212c:	8d 81       	ldd	r24, Y+5	; 0x05
    212e:	9e 81       	ldd	r25, Y+6	; 0x06
    2130:	9a 83       	std	Y+2, r25	; 0x02
    2132:	89 83       	std	Y+1, r24	; 0x01
    2134:	89 81       	ldd	r24, Y+1	; 0x01
    2136:	9a 81       	ldd	r25, Y+2	; 0x02
    2138:	01 97       	sbiw	r24, 0x01	; 1
    213a:	f1 f7       	brne	.-4      	; 0x2138 <LCD_sendCommand+0x3ce>
    213c:	9a 83       	std	Y+2, r25	; 0x02
    213e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2140:	e9 96       	adiw	r28, 0x39	; 57
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	f8 94       	cli
    2146:	de bf       	out	0x3e, r29	; 62
    2148:	0f be       	out	0x3f, r0	; 63
    214a:	cd bf       	out	0x3d, r28	; 61
    214c:	cf 91       	pop	r28
    214e:	df 91       	pop	r29
    2150:	08 95       	ret

00002152 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
    215a:	e9 97       	sbiw	r28, 0x39	; 57
    215c:	0f b6       	in	r0, 0x3f	; 63
    215e:	f8 94       	cli
    2160:	de bf       	out	0x3e, r29	; 62
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	cd bf       	out	0x3d, r28	; 61
    2166:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2168:	83 e0       	ldi	r24, 0x03	; 3
    216a:	64 e0       	ldi	r22, 0x04	; 4
    216c:	41 e0       	ldi	r20, 0x01	; 1
    216e:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2172:	83 e0       	ldi	r24, 0x03	; 3
    2174:	65 e0       	ldi	r22, 0x05	; 5
    2176:	40 e0       	ldi	r20, 0x00	; 0
    2178:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <GPIO_writePin>
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	a0 e8       	ldi	r26, 0x80	; 128
    2182:	bf e3       	ldi	r27, 0x3F	; 63
    2184:	8d ab       	std	Y+53, r24	; 0x35
    2186:	9e ab       	std	Y+54, r25	; 0x36
    2188:	af ab       	std	Y+55, r26	; 0x37
    218a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    218c:	6d a9       	ldd	r22, Y+53	; 0x35
    218e:	7e a9       	ldd	r23, Y+54	; 0x36
    2190:	8f a9       	ldd	r24, Y+55	; 0x37
    2192:	98 ad       	ldd	r25, Y+56	; 0x38
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	4a e7       	ldi	r20, 0x7A	; 122
    219a:	53 e4       	ldi	r21, 0x43	; 67
    219c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	89 ab       	std	Y+49, r24	; 0x31
    21a6:	9a ab       	std	Y+50, r25	; 0x32
    21a8:	ab ab       	std	Y+51, r26	; 0x33
    21aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21ac:	69 a9       	ldd	r22, Y+49	; 0x31
    21ae:	7a a9       	ldd	r23, Y+50	; 0x32
    21b0:	8b a9       	ldd	r24, Y+51	; 0x33
    21b2:	9c a9       	ldd	r25, Y+52	; 0x34
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	40 e8       	ldi	r20, 0x80	; 128
    21ba:	5f e3       	ldi	r21, 0x3F	; 63
    21bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21c0:	88 23       	and	r24, r24
    21c2:	2c f4       	brge	.+10     	; 0x21ce <LCD_displayCharacter+0x7c>
		__ticks = 1;
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	98 ab       	std	Y+48, r25	; 0x30
    21ca:	8f a7       	std	Y+47, r24	; 0x2f
    21cc:	3f c0       	rjmp	.+126    	; 0x224c <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    21ce:	69 a9       	ldd	r22, Y+49	; 0x31
    21d0:	7a a9       	ldd	r23, Y+50	; 0x32
    21d2:	8b a9       	ldd	r24, Y+51	; 0x33
    21d4:	9c a9       	ldd	r25, Y+52	; 0x34
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	3f ef       	ldi	r19, 0xFF	; 255
    21da:	4f e7       	ldi	r20, 0x7F	; 127
    21dc:	57 e4       	ldi	r21, 0x47	; 71
    21de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21e2:	18 16       	cp	r1, r24
    21e4:	4c f5       	brge	.+82     	; 0x2238 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e6:	6d a9       	ldd	r22, Y+53	; 0x35
    21e8:	7e a9       	ldd	r23, Y+54	; 0x36
    21ea:	8f a9       	ldd	r24, Y+55	; 0x37
    21ec:	98 ad       	ldd	r25, Y+56	; 0x38
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e2       	ldi	r20, 0x20	; 32
    21f4:	51 e4       	ldi	r21, 0x41	; 65
    21f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	bc 01       	movw	r22, r24
    2200:	cd 01       	movw	r24, r26
    2202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	98 ab       	std	Y+48, r25	; 0x30
    220c:	8f a7       	std	Y+47, r24	; 0x2f
    220e:	0f c0       	rjmp	.+30     	; 0x222e <LCD_displayCharacter+0xdc>
    2210:	89 e1       	ldi	r24, 0x19	; 25
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	9e a7       	std	Y+46, r25	; 0x2e
    2216:	8d a7       	std	Y+45, r24	; 0x2d
    2218:	8d a5       	ldd	r24, Y+45	; 0x2d
    221a:	9e a5       	ldd	r25, Y+46	; 0x2e
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	f1 f7       	brne	.-4      	; 0x221c <LCD_displayCharacter+0xca>
    2220:	9e a7       	std	Y+46, r25	; 0x2e
    2222:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2224:	8f a5       	ldd	r24, Y+47	; 0x2f
    2226:	98 a9       	ldd	r25, Y+48	; 0x30
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	98 ab       	std	Y+48, r25	; 0x30
    222c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    222e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2230:	98 a9       	ldd	r25, Y+48	; 0x30
    2232:	00 97       	sbiw	r24, 0x00	; 0
    2234:	69 f7       	brne	.-38     	; 0x2210 <LCD_displayCharacter+0xbe>
    2236:	14 c0       	rjmp	.+40     	; 0x2260 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2238:	69 a9       	ldd	r22, Y+49	; 0x31
    223a:	7a a9       	ldd	r23, Y+50	; 0x32
    223c:	8b a9       	ldd	r24, Y+51	; 0x33
    223e:	9c a9       	ldd	r25, Y+52	; 0x34
    2240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	98 ab       	std	Y+48, r25	; 0x30
    224a:	8f a7       	std	Y+47, r24	; 0x2f
    224c:	8f a5       	ldd	r24, Y+47	; 0x2f
    224e:	98 a9       	ldd	r25, Y+48	; 0x30
    2250:	9c a7       	std	Y+44, r25	; 0x2c
    2252:	8b a7       	std	Y+43, r24	; 0x2b
    2254:	8b a5       	ldd	r24, Y+43	; 0x2b
    2256:	9c a5       	ldd	r25, Y+44	; 0x2c
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	f1 f7       	brne	.-4      	; 0x2258 <LCD_displayCharacter+0x106>
    225c:	9c a7       	std	Y+44, r25	; 0x2c
    225e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2260:	83 e0       	ldi	r24, 0x03	; 3
    2262:	66 e0       	ldi	r22, 0x06	; 6
    2264:	41 e0       	ldi	r20, 0x01	; 1
    2266:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <GPIO_writePin>
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	a0 e8       	ldi	r26, 0x80	; 128
    2270:	bf e3       	ldi	r27, 0x3F	; 63
    2272:	8f a3       	std	Y+39, r24	; 0x27
    2274:	98 a7       	std	Y+40, r25	; 0x28
    2276:	a9 a7       	std	Y+41, r26	; 0x29
    2278:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    227a:	6f a1       	ldd	r22, Y+39	; 0x27
    227c:	78 a5       	ldd	r23, Y+40	; 0x28
    227e:	89 a5       	ldd	r24, Y+41	; 0x29
    2280:	9a a5       	ldd	r25, Y+42	; 0x2a
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	4a e7       	ldi	r20, 0x7A	; 122
    2288:	53 e4       	ldi	r21, 0x43	; 67
    228a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	8b a3       	std	Y+35, r24	; 0x23
    2294:	9c a3       	std	Y+36, r25	; 0x24
    2296:	ad a3       	std	Y+37, r26	; 0x25
    2298:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    229a:	6b a1       	ldd	r22, Y+35	; 0x23
    229c:	7c a1       	ldd	r23, Y+36	; 0x24
    229e:	8d a1       	ldd	r24, Y+37	; 0x25
    22a0:	9e a1       	ldd	r25, Y+38	; 0x26
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	40 e8       	ldi	r20, 0x80	; 128
    22a8:	5f e3       	ldi	r21, 0x3F	; 63
    22aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ae:	88 23       	and	r24, r24
    22b0:	2c f4       	brge	.+10     	; 0x22bc <LCD_displayCharacter+0x16a>
		__ticks = 1;
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	9a a3       	std	Y+34, r25	; 0x22
    22b8:	89 a3       	std	Y+33, r24	; 0x21
    22ba:	3f c0       	rjmp	.+126    	; 0x233a <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    22bc:	6b a1       	ldd	r22, Y+35	; 0x23
    22be:	7c a1       	ldd	r23, Y+36	; 0x24
    22c0:	8d a1       	ldd	r24, Y+37	; 0x25
    22c2:	9e a1       	ldd	r25, Y+38	; 0x26
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	3f ef       	ldi	r19, 0xFF	; 255
    22c8:	4f e7       	ldi	r20, 0x7F	; 127
    22ca:	57 e4       	ldi	r21, 0x47	; 71
    22cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22d0:	18 16       	cp	r1, r24
    22d2:	4c f5       	brge	.+82     	; 0x2326 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d4:	6f a1       	ldd	r22, Y+39	; 0x27
    22d6:	78 a5       	ldd	r23, Y+40	; 0x28
    22d8:	89 a5       	ldd	r24, Y+41	; 0x29
    22da:	9a a5       	ldd	r25, Y+42	; 0x2a
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	40 e2       	ldi	r20, 0x20	; 32
    22e2:	51 e4       	ldi	r21, 0x41	; 65
    22e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	bc 01       	movw	r22, r24
    22ee:	cd 01       	movw	r24, r26
    22f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	9a a3       	std	Y+34, r25	; 0x22
    22fa:	89 a3       	std	Y+33, r24	; 0x21
    22fc:	0f c0       	rjmp	.+30     	; 0x231c <LCD_displayCharacter+0x1ca>
    22fe:	89 e1       	ldi	r24, 0x19	; 25
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	98 a3       	std	Y+32, r25	; 0x20
    2304:	8f 8f       	std	Y+31, r24	; 0x1f
    2306:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2308:	98 a1       	ldd	r25, Y+32	; 0x20
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	f1 f7       	brne	.-4      	; 0x230a <LCD_displayCharacter+0x1b8>
    230e:	98 a3       	std	Y+32, r25	; 0x20
    2310:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2312:	89 a1       	ldd	r24, Y+33	; 0x21
    2314:	9a a1       	ldd	r25, Y+34	; 0x22
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	9a a3       	std	Y+34, r25	; 0x22
    231a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    231c:	89 a1       	ldd	r24, Y+33	; 0x21
    231e:	9a a1       	ldd	r25, Y+34	; 0x22
    2320:	00 97       	sbiw	r24, 0x00	; 0
    2322:	69 f7       	brne	.-38     	; 0x22fe <LCD_displayCharacter+0x1ac>
    2324:	14 c0       	rjmp	.+40     	; 0x234e <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2326:	6b a1       	ldd	r22, Y+35	; 0x23
    2328:	7c a1       	ldd	r23, Y+36	; 0x24
    232a:	8d a1       	ldd	r24, Y+37	; 0x25
    232c:	9e a1       	ldd	r25, Y+38	; 0x26
    232e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	9a a3       	std	Y+34, r25	; 0x22
    2338:	89 a3       	std	Y+33, r24	; 0x21
    233a:	89 a1       	ldd	r24, Y+33	; 0x21
    233c:	9a a1       	ldd	r25, Y+34	; 0x22
    233e:	9e 8f       	std	Y+30, r25	; 0x1e
    2340:	8d 8f       	std	Y+29, r24	; 0x1d
    2342:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2344:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	f1 f7       	brne	.-4      	; 0x2346 <LCD_displayCharacter+0x1f4>
    234a:	9e 8f       	std	Y+30, r25	; 0x1e
    234c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    234e:	82 e0       	ldi	r24, 0x02	; 2
    2350:	69 ad       	ldd	r22, Y+57	; 0x39
    2352:	0e 94 bd 0c 	call	0x197a	; 0x197a <GPIO_writePort>
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	a0 e8       	ldi	r26, 0x80	; 128
    235c:	bf e3       	ldi	r27, 0x3F	; 63
    235e:	89 8f       	std	Y+25, r24	; 0x19
    2360:	9a 8f       	std	Y+26, r25	; 0x1a
    2362:	ab 8f       	std	Y+27, r26	; 0x1b
    2364:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2366:	69 8d       	ldd	r22, Y+25	; 0x19
    2368:	7a 8d       	ldd	r23, Y+26	; 0x1a
    236a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    236c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	4a e7       	ldi	r20, 0x7A	; 122
    2374:	53 e4       	ldi	r21, 0x43	; 67
    2376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	8d 8b       	std	Y+21, r24	; 0x15
    2380:	9e 8b       	std	Y+22, r25	; 0x16
    2382:	af 8b       	std	Y+23, r26	; 0x17
    2384:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2386:	6d 89       	ldd	r22, Y+21	; 0x15
    2388:	7e 89       	ldd	r23, Y+22	; 0x16
    238a:	8f 89       	ldd	r24, Y+23	; 0x17
    238c:	98 8d       	ldd	r25, Y+24	; 0x18
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e8       	ldi	r20, 0x80	; 128
    2394:	5f e3       	ldi	r21, 0x3F	; 63
    2396:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    239a:	88 23       	and	r24, r24
    239c:	2c f4       	brge	.+10     	; 0x23a8 <LCD_displayCharacter+0x256>
		__ticks = 1;
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	9c 8b       	std	Y+20, r25	; 0x14
    23a4:	8b 8b       	std	Y+19, r24	; 0x13
    23a6:	3f c0       	rjmp	.+126    	; 0x2426 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    23a8:	6d 89       	ldd	r22, Y+21	; 0x15
    23aa:	7e 89       	ldd	r23, Y+22	; 0x16
    23ac:	8f 89       	ldd	r24, Y+23	; 0x17
    23ae:	98 8d       	ldd	r25, Y+24	; 0x18
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	3f ef       	ldi	r19, 0xFF	; 255
    23b4:	4f e7       	ldi	r20, 0x7F	; 127
    23b6:	57 e4       	ldi	r21, 0x47	; 71
    23b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23bc:	18 16       	cp	r1, r24
    23be:	4c f5       	brge	.+82     	; 0x2412 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c0:	69 8d       	ldd	r22, Y+25	; 0x19
    23c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	40 e2       	ldi	r20, 0x20	; 32
    23ce:	51 e4       	ldi	r21, 0x41	; 65
    23d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	bc 01       	movw	r22, r24
    23da:	cd 01       	movw	r24, r26
    23dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	9c 8b       	std	Y+20, r25	; 0x14
    23e6:	8b 8b       	std	Y+19, r24	; 0x13
    23e8:	0f c0       	rjmp	.+30     	; 0x2408 <LCD_displayCharacter+0x2b6>
    23ea:	89 e1       	ldi	r24, 0x19	; 25
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	9a 8b       	std	Y+18, r25	; 0x12
    23f0:	89 8b       	std	Y+17, r24	; 0x11
    23f2:	89 89       	ldd	r24, Y+17	; 0x11
    23f4:	9a 89       	ldd	r25, Y+18	; 0x12
    23f6:	01 97       	sbiw	r24, 0x01	; 1
    23f8:	f1 f7       	brne	.-4      	; 0x23f6 <LCD_displayCharacter+0x2a4>
    23fa:	9a 8b       	std	Y+18, r25	; 0x12
    23fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2400:	9c 89       	ldd	r25, Y+20	; 0x14
    2402:	01 97       	sbiw	r24, 0x01	; 1
    2404:	9c 8b       	std	Y+20, r25	; 0x14
    2406:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2408:	8b 89       	ldd	r24, Y+19	; 0x13
    240a:	9c 89       	ldd	r25, Y+20	; 0x14
    240c:	00 97       	sbiw	r24, 0x00	; 0
    240e:	69 f7       	brne	.-38     	; 0x23ea <LCD_displayCharacter+0x298>
    2410:	14 c0       	rjmp	.+40     	; 0x243a <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2412:	6d 89       	ldd	r22, Y+21	; 0x15
    2414:	7e 89       	ldd	r23, Y+22	; 0x16
    2416:	8f 89       	ldd	r24, Y+23	; 0x17
    2418:	98 8d       	ldd	r25, Y+24	; 0x18
    241a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	9c 8b       	std	Y+20, r25	; 0x14
    2424:	8b 8b       	std	Y+19, r24	; 0x13
    2426:	8b 89       	ldd	r24, Y+19	; 0x13
    2428:	9c 89       	ldd	r25, Y+20	; 0x14
    242a:	98 8b       	std	Y+16, r25	; 0x10
    242c:	8f 87       	std	Y+15, r24	; 0x0f
    242e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2430:	98 89       	ldd	r25, Y+16	; 0x10
    2432:	01 97       	sbiw	r24, 0x01	; 1
    2434:	f1 f7       	brne	.-4      	; 0x2432 <LCD_displayCharacter+0x2e0>
    2436:	98 8b       	std	Y+16, r25	; 0x10
    2438:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    243a:	83 e0       	ldi	r24, 0x03	; 3
    243c:	66 e0       	ldi	r22, 0x06	; 6
    243e:	40 e0       	ldi	r20, 0x00	; 0
    2440:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <GPIO_writePin>
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	a0 e8       	ldi	r26, 0x80	; 128
    244a:	bf e3       	ldi	r27, 0x3F	; 63
    244c:	8b 87       	std	Y+11, r24	; 0x0b
    244e:	9c 87       	std	Y+12, r25	; 0x0c
    2450:	ad 87       	std	Y+13, r26	; 0x0d
    2452:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2454:	6b 85       	ldd	r22, Y+11	; 0x0b
    2456:	7c 85       	ldd	r23, Y+12	; 0x0c
    2458:	8d 85       	ldd	r24, Y+13	; 0x0d
    245a:	9e 85       	ldd	r25, Y+14	; 0x0e
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	4a e7       	ldi	r20, 0x7A	; 122
    2462:	53 e4       	ldi	r21, 0x43	; 67
    2464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	8f 83       	std	Y+7, r24	; 0x07
    246e:	98 87       	std	Y+8, r25	; 0x08
    2470:	a9 87       	std	Y+9, r26	; 0x09
    2472:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2474:	6f 81       	ldd	r22, Y+7	; 0x07
    2476:	78 85       	ldd	r23, Y+8	; 0x08
    2478:	89 85       	ldd	r24, Y+9	; 0x09
    247a:	9a 85       	ldd	r25, Y+10	; 0x0a
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	40 e8       	ldi	r20, 0x80	; 128
    2482:	5f e3       	ldi	r21, 0x3F	; 63
    2484:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2488:	88 23       	and	r24, r24
    248a:	2c f4       	brge	.+10     	; 0x2496 <LCD_displayCharacter+0x344>
		__ticks = 1;
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	9e 83       	std	Y+6, r25	; 0x06
    2492:	8d 83       	std	Y+5, r24	; 0x05
    2494:	3f c0       	rjmp	.+126    	; 0x2514 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2496:	6f 81       	ldd	r22, Y+7	; 0x07
    2498:	78 85       	ldd	r23, Y+8	; 0x08
    249a:	89 85       	ldd	r24, Y+9	; 0x09
    249c:	9a 85       	ldd	r25, Y+10	; 0x0a
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	3f ef       	ldi	r19, 0xFF	; 255
    24a2:	4f e7       	ldi	r20, 0x7F	; 127
    24a4:	57 e4       	ldi	r21, 0x47	; 71
    24a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24aa:	18 16       	cp	r1, r24
    24ac:	4c f5       	brge	.+82     	; 0x2500 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	40 e2       	ldi	r20, 0x20	; 32
    24bc:	51 e4       	ldi	r21, 0x41	; 65
    24be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	bc 01       	movw	r22, r24
    24c8:	cd 01       	movw	r24, r26
    24ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	9e 83       	std	Y+6, r25	; 0x06
    24d4:	8d 83       	std	Y+5, r24	; 0x05
    24d6:	0f c0       	rjmp	.+30     	; 0x24f6 <LCD_displayCharacter+0x3a4>
    24d8:	89 e1       	ldi	r24, 0x19	; 25
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	9c 83       	std	Y+4, r25	; 0x04
    24de:	8b 83       	std	Y+3, r24	; 0x03
    24e0:	8b 81       	ldd	r24, Y+3	; 0x03
    24e2:	9c 81       	ldd	r25, Y+4	; 0x04
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	f1 f7       	brne	.-4      	; 0x24e4 <LCD_displayCharacter+0x392>
    24e8:	9c 83       	std	Y+4, r25	; 0x04
    24ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ec:	8d 81       	ldd	r24, Y+5	; 0x05
    24ee:	9e 81       	ldd	r25, Y+6	; 0x06
    24f0:	01 97       	sbiw	r24, 0x01	; 1
    24f2:	9e 83       	std	Y+6, r25	; 0x06
    24f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f6:	8d 81       	ldd	r24, Y+5	; 0x05
    24f8:	9e 81       	ldd	r25, Y+6	; 0x06
    24fa:	00 97       	sbiw	r24, 0x00	; 0
    24fc:	69 f7       	brne	.-38     	; 0x24d8 <LCD_displayCharacter+0x386>
    24fe:	14 c0       	rjmp	.+40     	; 0x2528 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2500:	6f 81       	ldd	r22, Y+7	; 0x07
    2502:	78 85       	ldd	r23, Y+8	; 0x08
    2504:	89 85       	ldd	r24, Y+9	; 0x09
    2506:	9a 85       	ldd	r25, Y+10	; 0x0a
    2508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	9e 83       	std	Y+6, r25	; 0x06
    2512:	8d 83       	std	Y+5, r24	; 0x05
    2514:	8d 81       	ldd	r24, Y+5	; 0x05
    2516:	9e 81       	ldd	r25, Y+6	; 0x06
    2518:	9a 83       	std	Y+2, r25	; 0x02
    251a:	89 83       	std	Y+1, r24	; 0x01
    251c:	89 81       	ldd	r24, Y+1	; 0x01
    251e:	9a 81       	ldd	r25, Y+2	; 0x02
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	f1 f7       	brne	.-4      	; 0x2520 <LCD_displayCharacter+0x3ce>
    2524:	9a 83       	std	Y+2, r25	; 0x02
    2526:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2528:	e9 96       	adiw	r28, 0x39	; 57
    252a:	0f b6       	in	r0, 0x3f	; 63
    252c:	f8 94       	cli
    252e:	de bf       	out	0x3e, r29	; 62
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	cd bf       	out	0x3d, r28	; 61
    2534:	cf 91       	pop	r28
    2536:	df 91       	pop	r29
    2538:	08 95       	ret

0000253a <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    253a:	df 93       	push	r29
    253c:	cf 93       	push	r28
    253e:	00 d0       	rcall	.+0      	; 0x2540 <LCD_displayString+0x6>
    2540:	0f 92       	push	r0
    2542:	cd b7       	in	r28, 0x3d	; 61
    2544:	de b7       	in	r29, 0x3e	; 62
    2546:	9b 83       	std	Y+3, r25	; 0x03
    2548:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    254a:	19 82       	std	Y+1, r1	; 0x01
    254c:	0e c0       	rjmp	.+28     	; 0x256a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	28 2f       	mov	r18, r24
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	8a 81       	ldd	r24, Y+2	; 0x02
    2556:	9b 81       	ldd	r25, Y+3	; 0x03
    2558:	fc 01       	movw	r30, r24
    255a:	e2 0f       	add	r30, r18
    255c:	f3 1f       	adc	r31, r19
    255e:	80 81       	ld	r24, Z
    2560:	0e 94 a9 10 	call	0x2152	; 0x2152 <LCD_displayCharacter>
		i++;
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	8f 5f       	subi	r24, 0xFF	; 255
    2568:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    256a:	89 81       	ldd	r24, Y+1	; 0x01
    256c:	28 2f       	mov	r18, r24
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	8a 81       	ldd	r24, Y+2	; 0x02
    2572:	9b 81       	ldd	r25, Y+3	; 0x03
    2574:	fc 01       	movw	r30, r24
    2576:	e2 0f       	add	r30, r18
    2578:	f3 1f       	adc	r31, r19
    257a:	80 81       	ld	r24, Z
    257c:	88 23       	and	r24, r24
    257e:	39 f7       	brne	.-50     	; 0x254e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2580:	0f 90       	pop	r0
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	cf 91       	pop	r28
    2588:	df 91       	pop	r29
    258a:	08 95       	ret

0000258c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    258c:	df 93       	push	r29
    258e:	cf 93       	push	r28
    2590:	00 d0       	rcall	.+0      	; 0x2592 <LCD_moveCursor+0x6>
    2592:	00 d0       	rcall	.+0      	; 0x2594 <LCD_moveCursor+0x8>
    2594:	0f 92       	push	r0
    2596:	cd b7       	in	r28, 0x3d	; 61
    2598:	de b7       	in	r29, 0x3e	; 62
    259a:	8a 83       	std	Y+2, r24	; 0x02
    259c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    259e:	8a 81       	ldd	r24, Y+2	; 0x02
    25a0:	28 2f       	mov	r18, r24
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	3d 83       	std	Y+5, r19	; 0x05
    25a6:	2c 83       	std	Y+4, r18	; 0x04
    25a8:	8c 81       	ldd	r24, Y+4	; 0x04
    25aa:	9d 81       	ldd	r25, Y+5	; 0x05
    25ac:	81 30       	cpi	r24, 0x01	; 1
    25ae:	91 05       	cpc	r25, r1
    25b0:	c1 f0       	breq	.+48     	; 0x25e2 <LCD_moveCursor+0x56>
    25b2:	2c 81       	ldd	r18, Y+4	; 0x04
    25b4:	3d 81       	ldd	r19, Y+5	; 0x05
    25b6:	22 30       	cpi	r18, 0x02	; 2
    25b8:	31 05       	cpc	r19, r1
    25ba:	2c f4       	brge	.+10     	; 0x25c6 <LCD_moveCursor+0x3a>
    25bc:	8c 81       	ldd	r24, Y+4	; 0x04
    25be:	9d 81       	ldd	r25, Y+5	; 0x05
    25c0:	00 97       	sbiw	r24, 0x00	; 0
    25c2:	61 f0       	breq	.+24     	; 0x25dc <LCD_moveCursor+0x50>
    25c4:	19 c0       	rjmp	.+50     	; 0x25f8 <LCD_moveCursor+0x6c>
    25c6:	2c 81       	ldd	r18, Y+4	; 0x04
    25c8:	3d 81       	ldd	r19, Y+5	; 0x05
    25ca:	22 30       	cpi	r18, 0x02	; 2
    25cc:	31 05       	cpc	r19, r1
    25ce:	69 f0       	breq	.+26     	; 0x25ea <LCD_moveCursor+0x5e>
    25d0:	8c 81       	ldd	r24, Y+4	; 0x04
    25d2:	9d 81       	ldd	r25, Y+5	; 0x05
    25d4:	83 30       	cpi	r24, 0x03	; 3
    25d6:	91 05       	cpc	r25, r1
    25d8:	61 f0       	breq	.+24     	; 0x25f2 <LCD_moveCursor+0x66>
    25da:	0e c0       	rjmp	.+28     	; 0x25f8 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    25dc:	8b 81       	ldd	r24, Y+3	; 0x03
    25de:	89 83       	std	Y+1, r24	; 0x01
    25e0:	0b c0       	rjmp	.+22     	; 0x25f8 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    25e2:	8b 81       	ldd	r24, Y+3	; 0x03
    25e4:	80 5c       	subi	r24, 0xC0	; 192
    25e6:	89 83       	std	Y+1, r24	; 0x01
    25e8:	07 c0       	rjmp	.+14     	; 0x25f8 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    25ea:	8b 81       	ldd	r24, Y+3	; 0x03
    25ec:	80 5f       	subi	r24, 0xF0	; 240
    25ee:	89 83       	std	Y+1, r24	; 0x01
    25f0:	03 c0       	rjmp	.+6      	; 0x25f8 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    25f2:	8b 81       	ldd	r24, Y+3	; 0x03
    25f4:	80 5b       	subi	r24, 0xB0	; 176
    25f6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	80 68       	ori	r24, 0x80	; 128
    25fc:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_sendCommand>
}
    2600:	0f 90       	pop	r0
    2602:	0f 90       	pop	r0
    2604:	0f 90       	pop	r0
    2606:	0f 90       	pop	r0
    2608:	0f 90       	pop	r0
    260a:	cf 91       	pop	r28
    260c:	df 91       	pop	r29
    260e:	08 95       	ret

00002610 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2610:	df 93       	push	r29
    2612:	cf 93       	push	r28
    2614:	00 d0       	rcall	.+0      	; 0x2616 <LCD_displayStringRowColumn+0x6>
    2616:	00 d0       	rcall	.+0      	; 0x2618 <LCD_displayStringRowColumn+0x8>
    2618:	cd b7       	in	r28, 0x3d	; 61
    261a:	de b7       	in	r29, 0x3e	; 62
    261c:	89 83       	std	Y+1, r24	; 0x01
    261e:	6a 83       	std	Y+2, r22	; 0x02
    2620:	5c 83       	std	Y+4, r21	; 0x04
    2622:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	6a 81       	ldd	r22, Y+2	; 0x02
    2628:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    262c:	8b 81       	ldd	r24, Y+3	; 0x03
    262e:	9c 81       	ldd	r25, Y+4	; 0x04
    2630:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_displayString>
}
    2634:	0f 90       	pop	r0
    2636:	0f 90       	pop	r0
    2638:	0f 90       	pop	r0
    263a:	0f 90       	pop	r0
    263c:	cf 91       	pop	r28
    263e:	df 91       	pop	r29
    2640:	08 95       	ret

00002642 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2642:	df 93       	push	r29
    2644:	cf 93       	push	r28
    2646:	cd b7       	in	r28, 0x3d	; 61
    2648:	de b7       	in	r29, 0x3e	; 62
    264a:	62 97       	sbiw	r28, 0x12	; 18
    264c:	0f b6       	in	r0, 0x3f	; 63
    264e:	f8 94       	cli
    2650:	de bf       	out	0x3e, r29	; 62
    2652:	0f be       	out	0x3f, r0	; 63
    2654:	cd bf       	out	0x3d, r28	; 61
    2656:	9a 8b       	std	Y+18, r25	; 0x12
    2658:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    265a:	89 89       	ldd	r24, Y+17	; 0x11
    265c:	9a 89       	ldd	r25, Y+18	; 0x12
    265e:	9e 01       	movw	r18, r28
    2660:	2f 5f       	subi	r18, 0xFF	; 255
    2662:	3f 4f       	sbci	r19, 0xFF	; 255
    2664:	b9 01       	movw	r22, r18
    2666:	4a e0       	ldi	r20, 0x0A	; 10
    2668:	50 e0       	ldi	r21, 0x00	; 0
    266a:	0e 94 a6 14 	call	0x294c	; 0x294c <itoa>
   LCD_displayString(buff); /* Display the string */
    266e:	ce 01       	movw	r24, r28
    2670:	01 96       	adiw	r24, 0x01	; 1
    2672:	0e 94 9d 12 	call	0x253a	; 0x253a <LCD_displayString>
}
    2676:	62 96       	adiw	r28, 0x12	; 18
    2678:	0f b6       	in	r0, 0x3f	; 63
    267a:	f8 94       	cli
    267c:	de bf       	out	0x3e, r29	; 62
    267e:	0f be       	out	0x3f, r0	; 63
    2680:	cd bf       	out	0x3d, r28	; 61
    2682:	cf 91       	pop	r28
    2684:	df 91       	pop	r29
    2686:	08 95       	ret

00002688 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2688:	df 93       	push	r29
    268a:	cf 93       	push	r28
    268c:	cd b7       	in	r28, 0x3d	; 61
    268e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_sendCommand>
}
    2696:	cf 91       	pop	r28
    2698:	df 91       	pop	r29
    269a:	08 95       	ret

0000269c <ISR>:
//#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 8UL))) - 1)

/*******************************************************************************
 *                                ISR                                    *
 *******************************************************************************/
ISR(USART_RXC_vect) {
    269c:	df 93       	push	r29
    269e:	cf 93       	push	r28
    26a0:	00 d0       	rcall	.+0      	; 0x26a2 <ISR+0x6>
    26a2:	00 d0       	rcall	.+0      	; 0x26a4 <ISR+0x8>
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
    26a8:	9a 83       	std	Y+2, r25	; 0x02
    26aa:	89 83       	std	Y+1, r24	; 0x01
	g_recievedValue =UDR ;
    26ac:	ec e2       	ldi	r30, 0x2C	; 44
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	80 81       	ld	r24, Z
    26b2:	80 93 ee 00 	sts	0x00EE, r24
	g_recievedFlag =1 ;
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	80 93 ef 00 	sts	0x00EF, r24

}
    26bc:	0f 90       	pop	r0
    26be:	0f 90       	pop	r0
    26c0:	0f 90       	pop	r0
    26c2:	0f 90       	pop	r0
    26c4:	cf 91       	pop	r28
    26c6:	df 91       	pop	r29
    26c8:	08 95       	ret

000026ca <UART_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(const UART_ConfigType *Config_ptr)
{
    26ca:	0f 93       	push	r16
    26cc:	1f 93       	push	r17
    26ce:	df 93       	push	r29
    26d0:	cf 93       	push	r28
    26d2:	00 d0       	rcall	.+0      	; 0x26d4 <UART_init+0xa>
    26d4:	00 d0       	rcall	.+0      	; 0x26d6 <UART_init+0xc>
    26d6:	00 d0       	rcall	.+0      	; 0x26d8 <UART_init+0xe>
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
    26dc:	9e 83       	std	Y+6, r25	; 0x06
    26de:	8d 83       	std	Y+5, r24	; 0x05
	uint32 USART_BAUDRATE=(Config_ptr->baudRate ) ;
    26e0:	ed 81       	ldd	r30, Y+5	; 0x05
    26e2:	fe 81       	ldd	r31, Y+6	; 0x06
    26e4:	83 81       	ldd	r24, Z+3	; 0x03
    26e6:	94 81       	ldd	r25, Z+4	; 0x04
    26e8:	a5 81       	ldd	r26, Z+5	; 0x05
    26ea:	b6 81       	ldd	r27, Z+6	; 0x06
    26ec:	89 83       	std	Y+1, r24	; 0x01
    26ee:	9a 83       	std	Y+2, r25	; 0x02
    26f0:	ab 83       	std	Y+3, r26	; 0x03
    26f2:	bc 83       	std	Y+4, r27	; 0x04
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    26f4:	eb e2       	ldi	r30, 0x2B	; 43
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	82 e0       	ldi	r24, 0x02	; 2
    26fa:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 =0 FOR (5,6,7,8)BIT DATE MODES
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN)  | (1<<RXCIE);
    26fc:	ea e2       	ldi	r30, 0x2A	; 42
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	88 e9       	ldi	r24, 0x98	; 152
    2702:	80 83       	st	Z, r24
	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    2704:	e0 e4       	ldi	r30, 0x40	; 64
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	86 e8       	ldi	r24, 0x86	; 134
    270a:	80 83       	st	Z, r24
	/* UCSZ1:0 = 11 For number of data mode */
	UCSRC =(0XFC &UCSRC) |(Config_ptr->dataBits) ;
    270c:	a0 e4       	ldi	r26, 0x40	; 64
    270e:	b0 e0       	ldi	r27, 0x00	; 0
    2710:	e0 e4       	ldi	r30, 0x40	; 64
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	80 81       	ld	r24, Z
    2716:	98 2f       	mov	r25, r24
    2718:	9c 7f       	andi	r25, 0xFC	; 252
    271a:	ed 81       	ldd	r30, Y+5	; 0x05
    271c:	fe 81       	ldd	r31, Y+6	; 0x06
    271e:	80 81       	ld	r24, Z
    2720:	89 2b       	or	r24, r25
    2722:	8c 93       	st	X, r24
	/* UPM1:0  = 00 Disable parity bit */
	UCSRC =(0XCF &UCSRC) |((Config_ptr->parityBits)<<4) ;
    2724:	a0 e4       	ldi	r26, 0x40	; 64
    2726:	b0 e0       	ldi	r27, 0x00	; 0
    2728:	e0 e4       	ldi	r30, 0x40	; 64
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
    272e:	28 2f       	mov	r18, r24
    2730:	2f 7c       	andi	r18, 0xCF	; 207
    2732:	ed 81       	ldd	r30, Y+5	; 0x05
    2734:	fe 81       	ldd	r31, Y+6	; 0x06
    2736:	82 81       	ldd	r24, Z+2	; 0x02
    2738:	88 2f       	mov	r24, r24
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	82 95       	swap	r24
    273e:	92 95       	swap	r25
    2740:	90 7f       	andi	r25, 0xF0	; 240
    2742:	98 27       	eor	r25, r24
    2744:	80 7f       	andi	r24, 0xF0	; 240
    2746:	98 27       	eor	r25, r24
    2748:	82 2b       	or	r24, r18
    274a:	8c 93       	st	X, r24
	/* USBS    = 0 One stop bit
	 * */
	UCSRC =(0XF7 &UCSRC) |((Config_ptr->stopBits)<<3) ;
    274c:	a0 e4       	ldi	r26, 0x40	; 64
    274e:	b0 e0       	ldi	r27, 0x00	; 0
    2750:	e0 e4       	ldi	r30, 0x40	; 64
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	80 81       	ld	r24, Z
    2756:	28 2f       	mov	r18, r24
    2758:	27 7f       	andi	r18, 0xF7	; 247
    275a:	ed 81       	ldd	r30, Y+5	; 0x05
    275c:	fe 81       	ldd	r31, Y+6	; 0x06
    275e:	81 81       	ldd	r24, Z+1	; 0x01
    2760:	88 2f       	mov	r24, r24
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	88 0f       	add	r24, r24
    2766:	99 1f       	adc	r25, r25
    2768:	88 0f       	add	r24, r24
    276a:	99 1f       	adc	r25, r25
    276c:	88 0f       	add	r24, r24
    276e:	99 1f       	adc	r25, r25
    2770:	82 2b       	or	r24, r18
    2772:	8c 93       	st	X, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	//UBRRH = BAUD_PRESCALE>>8;
	//UBRRL = BAUD_PRESCALE;
	UBRRH = ((((F_CPU / (USART_BAUDRATE * 8UL))) - 1)>>8) ;
    2774:	00 e4       	ldi	r16, 0x40	; 64
    2776:	10 e0       	ldi	r17, 0x00	; 0
    2778:	89 81       	ldd	r24, Y+1	; 0x01
    277a:	9a 81       	ldd	r25, Y+2	; 0x02
    277c:	ab 81       	ldd	r26, Y+3	; 0x03
    277e:	bc 81       	ldd	r27, Y+4	; 0x04
    2780:	88 0f       	add	r24, r24
    2782:	99 1f       	adc	r25, r25
    2784:	aa 1f       	adc	r26, r26
    2786:	bb 1f       	adc	r27, r27
    2788:	88 0f       	add	r24, r24
    278a:	99 1f       	adc	r25, r25
    278c:	aa 1f       	adc	r26, r26
    278e:	bb 1f       	adc	r27, r27
    2790:	88 0f       	add	r24, r24
    2792:	99 1f       	adc	r25, r25
    2794:	aa 1f       	adc	r26, r26
    2796:	bb 1f       	adc	r27, r27
    2798:	9c 01       	movw	r18, r24
    279a:	ad 01       	movw	r20, r26
    279c:	80 e4       	ldi	r24, 0x40	; 64
    279e:	92 e4       	ldi	r25, 0x42	; 66
    27a0:	af e0       	ldi	r26, 0x0F	; 15
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	bc 01       	movw	r22, r24
    27a6:	cd 01       	movw	r24, r26
    27a8:	0e 94 4d 14 	call	0x289a	; 0x289a <__udivmodsi4>
    27ac:	da 01       	movw	r26, r20
    27ae:	c9 01       	movw	r24, r18
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	a1 09       	sbc	r26, r1
    27b4:	b1 09       	sbc	r27, r1
    27b6:	89 2f       	mov	r24, r25
    27b8:	9a 2f       	mov	r25, r26
    27ba:	ab 2f       	mov	r26, r27
    27bc:	bb 27       	eor	r27, r27
    27be:	f8 01       	movw	r30, r16
    27c0:	80 83       	st	Z, r24
	UBRRL = (((F_CPU / (USART_BAUDRATE * 8UL))) - 1) ;
    27c2:	09 e2       	ldi	r16, 0x29	; 41
    27c4:	10 e0       	ldi	r17, 0x00	; 0
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
    27c8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ca:	ab 81       	ldd	r26, Y+3	; 0x03
    27cc:	bc 81       	ldd	r27, Y+4	; 0x04
    27ce:	88 0f       	add	r24, r24
    27d0:	99 1f       	adc	r25, r25
    27d2:	aa 1f       	adc	r26, r26
    27d4:	bb 1f       	adc	r27, r27
    27d6:	88 0f       	add	r24, r24
    27d8:	99 1f       	adc	r25, r25
    27da:	aa 1f       	adc	r26, r26
    27dc:	bb 1f       	adc	r27, r27
    27de:	88 0f       	add	r24, r24
    27e0:	99 1f       	adc	r25, r25
    27e2:	aa 1f       	adc	r26, r26
    27e4:	bb 1f       	adc	r27, r27
    27e6:	9c 01       	movw	r18, r24
    27e8:	ad 01       	movw	r20, r26
    27ea:	80 e4       	ldi	r24, 0x40	; 64
    27ec:	92 e4       	ldi	r25, 0x42	; 66
    27ee:	af e0       	ldi	r26, 0x0F	; 15
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	bc 01       	movw	r22, r24
    27f4:	cd 01       	movw	r24, r26
    27f6:	0e 94 4d 14 	call	0x289a	; 0x289a <__udivmodsi4>
    27fa:	da 01       	movw	r26, r20
    27fc:	c9 01       	movw	r24, r18
    27fe:	81 50       	subi	r24, 0x01	; 1
    2800:	f8 01       	movw	r30, r16
    2802:	80 83       	st	Z, r24
}
    2804:	26 96       	adiw	r28, 0x06	; 6
    2806:	0f b6       	in	r0, 0x3f	; 63
    2808:	f8 94       	cli
    280a:	de bf       	out	0x3e, r29	; 62
    280c:	0f be       	out	0x3f, r0	; 63
    280e:	cd bf       	out	0x3d, r28	; 61
    2810:	cf 91       	pop	r28
    2812:	df 91       	pop	r29
    2814:	1f 91       	pop	r17
    2816:	0f 91       	pop	r16
    2818:	08 95       	ret

0000281a <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
    281a:	df 93       	push	r29
    281c:	cf 93       	push	r28
    281e:	0f 92       	push	r0
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
    2824:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2826:	eb e2       	ldi	r30, 0x2B	; 43
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	80 81       	ld	r24, Z
    282c:	88 2f       	mov	r24, r24
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	80 72       	andi	r24, 0x20	; 32
    2832:	90 70       	andi	r25, 0x00	; 0
    2834:	00 97       	sbiw	r24, 0x00	; 0
    2836:	b9 f3       	breq	.-18     	; 0x2826 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    2838:	ec e2       	ldi	r30, 0x2C	; 44
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	89 81       	ldd	r24, Y+1	; 0x01
    283e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2840:	0f 90       	pop	r0
    2842:	cf 91       	pop	r28
    2844:	df 91       	pop	r29
    2846:	08 95       	ret

00002848 <UART_sendString>:


void UART_sendString(const uint8 *Str)
{
    2848:	df 93       	push	r29
    284a:	cf 93       	push	r28
    284c:	00 d0       	rcall	.+0      	; 0x284e <UART_sendString+0x6>
    284e:	0f 92       	push	r0
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
    2854:	9b 83       	std	Y+3, r25	; 0x03
    2856:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2858:	19 82       	std	Y+1, r1	; 0x01
    285a:	0e c0       	rjmp	.+28     	; 0x2878 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    285c:	89 81       	ldd	r24, Y+1	; 0x01
    285e:	28 2f       	mov	r18, r24
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	8a 81       	ldd	r24, Y+2	; 0x02
    2864:	9b 81       	ldd	r25, Y+3	; 0x03
    2866:	fc 01       	movw	r30, r24
    2868:	e2 0f       	add	r30, r18
    286a:	f3 1f       	adc	r31, r19
    286c:	80 81       	ld	r24, Z
    286e:	0e 94 0d 14 	call	0x281a	; 0x281a <UART_sendByte>
		i++;
    2872:	89 81       	ldd	r24, Y+1	; 0x01
    2874:	8f 5f       	subi	r24, 0xFF	; 255
    2876:	89 83       	std	Y+1, r24	; 0x01


void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	28 2f       	mov	r18, r24
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	8a 81       	ldd	r24, Y+2	; 0x02
    2880:	9b 81       	ldd	r25, Y+3	; 0x03
    2882:	fc 01       	movw	r30, r24
    2884:	e2 0f       	add	r30, r18
    2886:	f3 1f       	adc	r31, r19
    2888:	80 81       	ld	r24, Z
    288a:	88 23       	and	r24, r24
    288c:	39 f7       	brne	.-50     	; 0x285c <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    288e:	0f 90       	pop	r0
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	cf 91       	pop	r28
    2896:	df 91       	pop	r29
    2898:	08 95       	ret

0000289a <__udivmodsi4>:
    289a:	a1 e2       	ldi	r26, 0x21	; 33
    289c:	1a 2e       	mov	r1, r26
    289e:	aa 1b       	sub	r26, r26
    28a0:	bb 1b       	sub	r27, r27
    28a2:	fd 01       	movw	r30, r26
    28a4:	0d c0       	rjmp	.+26     	; 0x28c0 <__udivmodsi4_ep>

000028a6 <__udivmodsi4_loop>:
    28a6:	aa 1f       	adc	r26, r26
    28a8:	bb 1f       	adc	r27, r27
    28aa:	ee 1f       	adc	r30, r30
    28ac:	ff 1f       	adc	r31, r31
    28ae:	a2 17       	cp	r26, r18
    28b0:	b3 07       	cpc	r27, r19
    28b2:	e4 07       	cpc	r30, r20
    28b4:	f5 07       	cpc	r31, r21
    28b6:	20 f0       	brcs	.+8      	; 0x28c0 <__udivmodsi4_ep>
    28b8:	a2 1b       	sub	r26, r18
    28ba:	b3 0b       	sbc	r27, r19
    28bc:	e4 0b       	sbc	r30, r20
    28be:	f5 0b       	sbc	r31, r21

000028c0 <__udivmodsi4_ep>:
    28c0:	66 1f       	adc	r22, r22
    28c2:	77 1f       	adc	r23, r23
    28c4:	88 1f       	adc	r24, r24
    28c6:	99 1f       	adc	r25, r25
    28c8:	1a 94       	dec	r1
    28ca:	69 f7       	brne	.-38     	; 0x28a6 <__udivmodsi4_loop>
    28cc:	60 95       	com	r22
    28ce:	70 95       	com	r23
    28d0:	80 95       	com	r24
    28d2:	90 95       	com	r25
    28d4:	9b 01       	movw	r18, r22
    28d6:	ac 01       	movw	r20, r24
    28d8:	bd 01       	movw	r22, r26
    28da:	cf 01       	movw	r24, r30
    28dc:	08 95       	ret

000028de <__prologue_saves__>:
    28de:	2f 92       	push	r2
    28e0:	3f 92       	push	r3
    28e2:	4f 92       	push	r4
    28e4:	5f 92       	push	r5
    28e6:	6f 92       	push	r6
    28e8:	7f 92       	push	r7
    28ea:	8f 92       	push	r8
    28ec:	9f 92       	push	r9
    28ee:	af 92       	push	r10
    28f0:	bf 92       	push	r11
    28f2:	cf 92       	push	r12
    28f4:	df 92       	push	r13
    28f6:	ef 92       	push	r14
    28f8:	ff 92       	push	r15
    28fa:	0f 93       	push	r16
    28fc:	1f 93       	push	r17
    28fe:	cf 93       	push	r28
    2900:	df 93       	push	r29
    2902:	cd b7       	in	r28, 0x3d	; 61
    2904:	de b7       	in	r29, 0x3e	; 62
    2906:	ca 1b       	sub	r28, r26
    2908:	db 0b       	sbc	r29, r27
    290a:	0f b6       	in	r0, 0x3f	; 63
    290c:	f8 94       	cli
    290e:	de bf       	out	0x3e, r29	; 62
    2910:	0f be       	out	0x3f, r0	; 63
    2912:	cd bf       	out	0x3d, r28	; 61
    2914:	09 94       	ijmp

00002916 <__epilogue_restores__>:
    2916:	2a 88       	ldd	r2, Y+18	; 0x12
    2918:	39 88       	ldd	r3, Y+17	; 0x11
    291a:	48 88       	ldd	r4, Y+16	; 0x10
    291c:	5f 84       	ldd	r5, Y+15	; 0x0f
    291e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2920:	7d 84       	ldd	r7, Y+13	; 0x0d
    2922:	8c 84       	ldd	r8, Y+12	; 0x0c
    2924:	9b 84       	ldd	r9, Y+11	; 0x0b
    2926:	aa 84       	ldd	r10, Y+10	; 0x0a
    2928:	b9 84       	ldd	r11, Y+9	; 0x09
    292a:	c8 84       	ldd	r12, Y+8	; 0x08
    292c:	df 80       	ldd	r13, Y+7	; 0x07
    292e:	ee 80       	ldd	r14, Y+6	; 0x06
    2930:	fd 80       	ldd	r15, Y+5	; 0x05
    2932:	0c 81       	ldd	r16, Y+4	; 0x04
    2934:	1b 81       	ldd	r17, Y+3	; 0x03
    2936:	aa 81       	ldd	r26, Y+2	; 0x02
    2938:	b9 81       	ldd	r27, Y+1	; 0x01
    293a:	ce 0f       	add	r28, r30
    293c:	d1 1d       	adc	r29, r1
    293e:	0f b6       	in	r0, 0x3f	; 63
    2940:	f8 94       	cli
    2942:	de bf       	out	0x3e, r29	; 62
    2944:	0f be       	out	0x3f, r0	; 63
    2946:	cd bf       	out	0x3d, r28	; 61
    2948:	ed 01       	movw	r28, r26
    294a:	08 95       	ret

0000294c <itoa>:
    294c:	fb 01       	movw	r30, r22
    294e:	9f 01       	movw	r18, r30
    2950:	e8 94       	clt
    2952:	42 30       	cpi	r20, 0x02	; 2
    2954:	c4 f0       	brlt	.+48     	; 0x2986 <itoa+0x3a>
    2956:	45 32       	cpi	r20, 0x25	; 37
    2958:	b4 f4       	brge	.+44     	; 0x2986 <itoa+0x3a>
    295a:	4a 30       	cpi	r20, 0x0A	; 10
    295c:	29 f4       	brne	.+10     	; 0x2968 <itoa+0x1c>
    295e:	97 fb       	bst	r25, 7
    2960:	1e f4       	brtc	.+6      	; 0x2968 <itoa+0x1c>
    2962:	90 95       	com	r25
    2964:	81 95       	neg	r24
    2966:	9f 4f       	sbci	r25, 0xFF	; 255
    2968:	64 2f       	mov	r22, r20
    296a:	77 27       	eor	r23, r23
    296c:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__udivmodhi4>
    2970:	80 5d       	subi	r24, 0xD0	; 208
    2972:	8a 33       	cpi	r24, 0x3A	; 58
    2974:	0c f0       	brlt	.+2      	; 0x2978 <itoa+0x2c>
    2976:	89 5d       	subi	r24, 0xD9	; 217
    2978:	81 93       	st	Z+, r24
    297a:	cb 01       	movw	r24, r22
    297c:	00 97       	sbiw	r24, 0x00	; 0
    297e:	a1 f7       	brne	.-24     	; 0x2968 <itoa+0x1c>
    2980:	16 f4       	brtc	.+4      	; 0x2986 <itoa+0x3a>
    2982:	5d e2       	ldi	r21, 0x2D	; 45
    2984:	51 93       	st	Z+, r21
    2986:	10 82       	st	Z, r1
    2988:	c9 01       	movw	r24, r18
    298a:	0c 94 c7 14 	jmp	0x298e	; 0x298e <strrev>

0000298e <strrev>:
    298e:	dc 01       	movw	r26, r24
    2990:	fc 01       	movw	r30, r24
    2992:	67 2f       	mov	r22, r23
    2994:	71 91       	ld	r23, Z+
    2996:	77 23       	and	r23, r23
    2998:	e1 f7       	brne	.-8      	; 0x2992 <strrev+0x4>
    299a:	32 97       	sbiw	r30, 0x02	; 2
    299c:	04 c0       	rjmp	.+8      	; 0x29a6 <strrev+0x18>
    299e:	7c 91       	ld	r23, X
    29a0:	6d 93       	st	X+, r22
    29a2:	70 83       	st	Z, r23
    29a4:	62 91       	ld	r22, -Z
    29a6:	ae 17       	cp	r26, r30
    29a8:	bf 07       	cpc	r27, r31
    29aa:	c8 f3       	brcs	.-14     	; 0x299e <strrev+0x10>
    29ac:	08 95       	ret

000029ae <__udivmodhi4>:
    29ae:	aa 1b       	sub	r26, r26
    29b0:	bb 1b       	sub	r27, r27
    29b2:	51 e1       	ldi	r21, 0x11	; 17
    29b4:	07 c0       	rjmp	.+14     	; 0x29c4 <__udivmodhi4_ep>

000029b6 <__udivmodhi4_loop>:
    29b6:	aa 1f       	adc	r26, r26
    29b8:	bb 1f       	adc	r27, r27
    29ba:	a6 17       	cp	r26, r22
    29bc:	b7 07       	cpc	r27, r23
    29be:	10 f0       	brcs	.+4      	; 0x29c4 <__udivmodhi4_ep>
    29c0:	a6 1b       	sub	r26, r22
    29c2:	b7 0b       	sbc	r27, r23

000029c4 <__udivmodhi4_ep>:
    29c4:	88 1f       	adc	r24, r24
    29c6:	99 1f       	adc	r25, r25
    29c8:	5a 95       	dec	r21
    29ca:	a9 f7       	brne	.-22     	; 0x29b6 <__udivmodhi4_loop>
    29cc:	80 95       	com	r24
    29ce:	90 95       	com	r25
    29d0:	bc 01       	movw	r22, r24
    29d2:	cd 01       	movw	r24, r26
    29d4:	08 95       	ret

000029d6 <_exit>:
    29d6:	f8 94       	cli

000029d8 <__stop_program>:
    29d8:	ff cf       	rjmp	.-2      	; 0x29d8 <__stop_program>
